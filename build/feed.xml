<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hasidic Development Group</title>
    <description>Welcome to the Hasidic Development Group website, we hope you find everything you need...</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 24 Feb 2023 15:28:05 -0500</pubDate>
    <lastBuildDate>Fri, 24 Feb 2023 15:28:05 -0500</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>

    
      <item>
        <title>Client-Side vs. Server-Side Scripting</title>
        <description>&lt;p&gt;In web development, there are two primary methods of processing and delivering data: client-side and server-side. Each approach has its unique advantages and limitations, and understanding the difference between the two is essential for creating efficient and effective web applications.
&lt;!--more--&gt;
Client-side scripting refers to the code that runs on the user’s computer or device in a web browser. Client-side scripts are written in languages such as JavaScript, which is commonly used to manipulate and modify the user interface and interact with server-side scripts. In contrast, server-side scripting refers to code that runs on the server, which receives client requests, processes them, and returns a response to the client. Server-side scripts are typically written in languages like PHP, Python, Ruby, or Java.&lt;/p&gt;

&lt;p&gt;The primary difference between client-side and server-side scripting is the location where the code runs. Client-side scripts are executed on the user’s computer, while server-side scripts are executed on the server. This fundamental difference affects how each type of script handles tasks such as data processing, user interaction, and security.&lt;/p&gt;

&lt;h2 id=&quot;client-side-scripting&quot;&gt;Client-side scripting&lt;/h2&gt;

&lt;p&gt;Client-side scripting is used to improve the user experience by providing dynamic and interactive web pages. Some common examples of client-side scripting include form validation, AJAX, and dynamic page updates.&lt;/p&gt;

&lt;h3 id=&quot;form-validation&quot;&gt;Form validation&lt;/h3&gt;

&lt;p&gt;Form validation is a process where user inputs are checked for accuracy and completeness before they are submitted to the server. Client-side scripting is commonly used for form validation because it provides immediate feedback to the user, without requiring a round-trip to the server. The following example uses JavaScript to validate a form field for a valid email address:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validateEmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+@&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.\S&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ajax&quot;&gt;AJAX&lt;/h3&gt;

&lt;p&gt;AJAX stands for Asynchronous JavaScript and XML and is a technique used to load content into a web page without refreshing the entire page. This method improves the user experience and reduces server load by making small requests for data as needed. The following example shows how to load content using AJAX:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;data.php&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#content&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dynamic-page-updates&quot;&gt;Dynamic page updates&lt;/h2&gt;

&lt;p&gt;Dynamic page updates allow web pages to change content without requiring a full page reload. This feature improves the user experience by providing fast and smooth transitions between different states of a web page. The following example shows how to use jQuery to update content dynamically:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#button&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#content&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;New content&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;server-side-scripting&quot;&gt;Server-side scripting&lt;/h2&gt;

&lt;p&gt;Server-side scripting is used to perform tasks that require data processing, database access, and user authentication. Server-side scripts can interact with the file system, databases, and other system resources that are not available to client-side scripts.&lt;/p&gt;

&lt;h3 id=&quot;data-processing&quot;&gt;Data processing&lt;/h3&gt;

&lt;p&gt;Server-side scripts are commonly used to process and manipulate data before returning it to the client. For example, a server-side script might process data from a form, validate it, and insert it into a database. The following example shows how to use PHP to process a form and insert the data into a database:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Insert data into the database&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO users (name, email) VALUES ('&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;', '&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$email&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;')&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysqli_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;database-access&quot;&gt;Database access&lt;/h3&gt;

&lt;p&gt;Server-side scripts are also used to interact with databases, retrieving data and performing queries. Database queries can be complex and require a lot of processing power, making it more efficient to handle them on the server side. The following example shows how to use Python to access a MySQL database:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mysql.connector&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;connect-to-the-database&quot;&gt;Connect to the database&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mydb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yourusername&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yourpassword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mydatabase&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Execute a query
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mycursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mydb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mycursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM customers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mycursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;user-authentication&quot;&gt;User authentication&lt;/h3&gt;

&lt;p&gt;Server-side scripts are also used to perform user authentication, ensuring that only authorized users can access restricted areas of a web application. User authentication is a critical security feature that helps protect sensitive data and resources. The following example shows how to use Ruby on Rails to implement user authentication:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SessionsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;log_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:danger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Invalid email/password combination'&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'new'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log_out&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_url&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In conclusion, client-side scripting and server-side scripting are two fundamental approaches to web development that have distinct advantages and limitations. Client-side scripting is used to enhance the user experience, providing dynamic and interactive web pages that respond to user input in real-time. Server-side scripting is used to perform data processing, interact with databases, and implement security features such as user authentication. Understanding the difference between client-side and server-side scripting is crucial for creating efficient and effective web applications.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Feb 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/client-v-server-scripting/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/client-v-server-scripting/</guid>
      </item>
    
      <item>
        <title>Creating a Gemfile for a Jekyll Plugin</title>
        <description>&lt;p&gt;If you are new to Jekyll, it is a popular static site generator that is used to build websites. Jekyll is built on Ruby, which means that you can write plugins for Jekyll using the Ruby programming language.&lt;/p&gt;

&lt;p&gt;Before we dive into creating a Gemfile for a Jekyll plugin, let’s first talk about what a Gemfile is. A Gemfile is a file that lists the gems, or Ruby packages, that your application or plugin depends on. Gems are packages of Ruby code that can be installed on your computer and used in your Ruby projects. A Gemfile makes it easy to manage your project’s dependencies, so you don’t have to worry about installing and updating each gem manually.
&lt;!--more--&gt;
Now that we have a basic understanding of what a Gemfile is, let’s talk about how to create one for a Jekyll plugin.&lt;/p&gt;

&lt;h3 id=&quot;step-1-create-a-new-directory-for-your-jekyll-plugin&quot;&gt;Step 1: Create a new directory for your Jekyll plugin&lt;/h3&gt;

&lt;p&gt;The first step in creating a Gemfile for a Jekyll plugin is to create a new directory for your plugin. You can name this directory whatever you like, but it’s a good idea to name it something descriptive of your plugin.&lt;/p&gt;

&lt;p&gt;For example, if you are creating a plugin that adds social media sharing buttons to your Jekyll site, you might name your directory “jekyll-social-sharing”. To create a new directory in your terminal, navigate to the directory where you want to create the new directory, and type the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;jekyll-social-sharing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;step-2-initialize-a-new-git-repository&quot;&gt;Step 2: Initialize a new Git repository&lt;/h3&gt;

&lt;p&gt;Next, you will want to initialize a new Git repository in your plugin directory. This will allow you to easily track changes to your code and collaborate with other developers.&lt;/p&gt;

&lt;p&gt;To initialize a new Git repository, navigate to your plugin directory in your terminal and type the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;step-3-create-a-new-gemfile&quot;&gt;Step 3: Create a new Gemfile&lt;/h3&gt;

&lt;p&gt;Now that you have a directory for your plugin and a Git repository initialized, you can create a new Gemfile for your plugin. To do this, navigate to your plugin directory in your terminal and type the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;Gemfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will create a new file called “Gemfile” in your plugin directory.&lt;/p&gt;

&lt;h3 id=&quot;step-4-add-dependencies-to-your-gemfile&quot;&gt;Step 4: Add dependencies to your Gemfile&lt;/h3&gt;

&lt;p&gt;Once you have created a Gemfile for your plugin, you can start adding dependencies to it. Dependencies are gems that your plugin relies on to function correctly. You can add dependencies to your Gemfile by specifying the gem name and version number, like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://rubygems.org&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sass&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, we are adding two dependencies to our Gemfile: “jekyll” and “sass”. The “source” line specifies where to download the gems from (in this case, the official RubyGems repository), and the “gem” lines specify the names and versions of the gems to install.&lt;/p&gt;

&lt;h3 id=&quot;step-5-install-dependencies&quot;&gt;Step 5: Install dependencies&lt;/h3&gt;

&lt;p&gt;Once you have added dependencies to your Gemfile, you need to install them. To do this, navigate to your plugin directory in your terminal and type the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will install all of the gems specified in your Gemfile, as well as any dependencies that those gems rely on. If this is the first time you have run “bundle install” in your plugin directory, it may take a few minutes to download and install all of the necessary gems.&lt;/p&gt;

&lt;h3 id=&quot;step-6-use-dependencies-in-your-plugin-code&quot;&gt;Step 6: Use dependencies in your plugin code&lt;/h3&gt;

&lt;p&gt;Now that you have installed your plugin’s dependencies, you can start using them in your plugin code. For example, if your plugin relies on the “jekyll”&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will allow you to use the functionality provided by the “jekyll” gem in your plugin code.&lt;/p&gt;

&lt;p&gt;Here is an example of a simple Jekyll plugin that uses the “jekyll” and “sass” gems:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# jekyll-social-sharing.rb&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sass&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SocialSharing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tag&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;div class='social-sharing'&amp;gt;
        &amp;lt;a href='https://twitter.com/share' class='twitter-share-button'&amp;gt;Tweet&amp;lt;/a&amp;gt;
        &amp;lt;a href='https://www.facebook.com/sharer/sharer.php?u=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'page'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'url'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' class='facebook-share-button'&amp;gt;Share on Facebook&amp;lt;/a&amp;gt;
      &amp;lt;/div&amp;gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Liquid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_tag&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;social_sharing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, we are creating a new Liquid tag called “social_sharing” that generates social media sharing buttons for Twitter and Facebook. We are using the “jekyll” gem to access the Liquid template engine and the “sass” gem to style the buttons.&lt;/p&gt;

&lt;h3 id=&quot;step-7-test-your-plugin&quot;&gt;Step 7: Test your plugin&lt;/h3&gt;

&lt;p&gt;Once you have written your plugin code and installed all of the necessary gems, it’s a good idea to test your plugin to make sure it works as expected. To do this, you can run your Jekyll site with the “jekyll serve” command and check that your plugin is working correctly.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If everything is working correctly, you should be able to see the social media sharing buttons on your Jekyll site.&lt;/p&gt;

&lt;h3 id=&quot;step-8-publish-your-plugin&quot;&gt;Step 8: Publish your plugin&lt;/h3&gt;

&lt;p&gt;Once you have tested your plugin and made sure it works correctly, you may want to publish it so that others can use it. You can publish your plugin to the official RubyGems repository by creating a new account on https://rubygems.org and following the instructions for publishing a gem.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Congratulations! You have now learned how to create a Gemfile for a Jekyll plugin. By following these steps, you can easily manage your plugin’s dependencies and ensure that your plugin works correctly. Remember to test your plugin thoroughly before publishing it, and to follow best practices for writing and publishing Ruby gems. Good luck!&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Feb 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/creating-a-gemfile/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/creating-a-gemfile/</guid>
      </item>
    
      <item>
        <title>Creating a new API using Hoppscotch</title>
        <description>&lt;p&gt;Creating a new API can be a complex process, involving many different steps and technologies. However, with the right platform, this process can be made much simpler. Hoppscotch is an open-source API development platform that simplifies the entire API development process, allowing developers to create, test, and document APIs quickly and easily.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;getting-started-with-hoppscotch&quot;&gt;Getting started with Hoppscotch&lt;/h2&gt;

&lt;p&gt;To get started with Hoppscotch, the first step is to sign up for an account. Once you have signed up, you will be taken to the Hoppscotch dashboard, where you can create a new project.&lt;/p&gt;

&lt;p&gt;To create a new project, click on the “New Project” button on the dashboard. You will be prompted to enter a name for your project and a description. Once you have entered this information, click on the “Create Project” button.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-new-api-endpoint&quot;&gt;Creating a new API endpoint&lt;/h2&gt;

&lt;p&gt;With your project created, you can now create a new API endpoint. To do this, click on the “New API” button on the project dashboard. You will be prompted to enter a name for your API and a description.&lt;/p&gt;

&lt;p&gt;Once you have entered this information, you will be taken to the API editor, where you can start building your API endpoint. The editor is divided into three sections: Headers, Body, and Tests.&lt;/p&gt;

&lt;h2 id=&quot;headers&quot;&gt;Headers&lt;/h2&gt;

&lt;p&gt;In the Headers section, you can add any headers that you want to include in your API request. Headers are used to provide additional information about the request, such as the content type or authorization credentials.&lt;/p&gt;

&lt;p&gt;Here is an example of how to add a header to an API request using Hoppscotch:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /api HTTP/1.1
Host: example.com
Authorization: Basic YWRtaW46cGFzc3dvcmQ=
Content-Type: application/json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To add a new header in Hoppscotch, click on the “Add Header” button. You will be prompted to enter the name and value of the header. Once you have entered this information, click on the “Add” button to add the header to your API request.&lt;/p&gt;

&lt;h2 id=&quot;body&quot;&gt;Body&lt;/h2&gt;

&lt;p&gt;In the Body section, you can add the data that you want to send with your API request. This can include JSON data, form data, or any other type of data that your API endpoint requires.&lt;/p&gt;

&lt;p&gt;Here is an example of how to add JSON data to an API request using Hoppscotch:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /api HTTP/1.1
Host: example.com
Content-Type: application/json

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;John Smith&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;age&quot;&lt;/span&gt;: 30,
    &lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;john.smith@example.com&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To add a new data field in Hoppscotch, click on the “Add Field” button. You will be prompted to enter the name and value of the data field. Once you have entered this information, click on the “Add” button to add the data field to your API request.&lt;/p&gt;

&lt;h2 id=&quot;tests&quot;&gt;Tests&lt;/h2&gt;

&lt;p&gt;In the Tests section, you can write tests that will be run after your API request has been sent. These tests can be used to verify that your API endpoint is working correctly.&lt;/p&gt;

&lt;p&gt;Here is an example of how to write a test using Hoppscotch:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tests[&quot;Status code is 200&quot;] = responseCode.code === 200;
tests[&quot;Response time is less than 500ms&quot;] = responseTime &amp;lt; 500;
tests[&quot;Response contains expected data&quot;] = responseBody.has(&quot;Hello, World!&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To add a new test in Hoppscotch, click on the “Add Test” button. You will be prompted to enter a name for the test and the test code. Once you have entered this information, click on the “Add” button to add the test to your API request.&lt;/p&gt;

&lt;h2 id=&quot;testing-your-api-endpoint&quot;&gt;Testing your API endpoint&lt;/h2&gt;

&lt;p&gt;Once you have created your API endpoint, you can test it using Hoppscotch’s built-in testing tools. To do this, simply click on the “Send” button in the API editor.&lt;/p&gt;

&lt;p&gt;Hoppscotch will then send your API request and display the response in the “Response” section of the editor. If there are any errors or issues with your API request, Hoppscotch will display an error message.&lt;/p&gt;

&lt;p&gt;If your API request was successful, you can use the response data to further develop and refine your API endpoint.&lt;/p&gt;

&lt;h2 id=&quot;documenting-your-api-endpoint&quot;&gt;Documenting your API endpoint&lt;/h2&gt;

&lt;p&gt;Finally, once you have created and tested your API endpoint, you can document it using Hoppscotch’s documentation tools. To do this, click on the “Docs” button on the project dashboard.&lt;/p&gt;

&lt;p&gt;In the documentation editor, you can enter information about your API endpoint, such as its purpose, expected inputs and outputs, and any other relevant information.&lt;/p&gt;

&lt;p&gt;Here is an example of how to document an API endpoint using Hoppscotch:&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;## API Endpoint: /api&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;### Purpose&lt;/span&gt;

This API endpoint is used to retrieve data from the server.

&lt;span class=&quot;gu&quot;&gt;### Inputs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; None

&lt;span class=&quot;gu&quot;&gt;### Outputs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; Data (JSON)

&lt;span class=&quot;gu&quot;&gt;### Example&lt;/span&gt;

Request:

GET /api HTTP/1.1
Host: example.com

Response:

HTTP/1.1 200 OK
Content-Type: application/json

{
    &quot;name&quot;: &quot;John Smith&quot;,
    &quot;age&quot;: 30,
    &quot;email&quot;: &quot;john.smith@example.com&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you have entered this information, click on the “Save” button to save your API endpoint documentation.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With Hoppscotch, creating a new API endpoint is a simple and straightforward process. By using Hoppscotch’s API development, testing, and documentation tools, you can quickly and easily create a robust and reliable API endpoint that meets your organization’s needs.&lt;/p&gt;

&lt;p&gt;With its intuitive user interface, powerful testing tools, and comprehensive documentation features, Hoppscotch is an essential tool for any developer looking to create high-quality APIs. So why not give it a try today and see how easy it can be to create a new API endpoint using Hoppscotch!&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Feb 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/creating-an-api-using-hoppscotch/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/creating-an-api-using-hoppscotch/</guid>
      </item>
    
      <item>
        <title>Mastering Object-Oriented Programming in JavaScript</title>
        <description>&lt;p&gt;Object-Oriented Programming (OOP) is a popular programming paradigm that allows developers to create modular, maintainable, and reusable code. JavaScript, a programming language that has become ubiquitous in web development, also supports OOP. In this blog post, we will explore OOP in JavaScript and how it can be used to write more organized, efficient, and scalable code.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-is-object-oriented-programming&quot;&gt;What is Object-Oriented Programming?&lt;/h2&gt;

&lt;p&gt;Object-Oriented Programming is a programming paradigm that is based on the concept of objects. An object is a collection of data and behaviors that are defined by a set of properties and methods. OOP is centered around the idea that software systems are composed of objects that interact with each other to achieve a common goal.&lt;/p&gt;

&lt;p&gt;OOP has four fundamental concepts that make it a powerful tool for software development: Encapsulation, Abstraction, Inheritance, and Polymorphism.&lt;/p&gt;

&lt;p&gt;Encapsulation: Encapsulation is the process of hiding the internal details of an object and exposing only the necessary information to the outside world. This is achieved by defining the properties and methods of an object as public or private. Private members are only accessible within the object, while public members can be accessed from outside the object.&lt;/p&gt;

&lt;p&gt;Abstraction: Abstraction is the process of simplifying complex systems by creating models that capture the essential features of the system while hiding unnecessary details. In OOP, this is achieved by defining abstract classes and interfaces that define the common properties and behaviors of a group of objects.&lt;/p&gt;

&lt;p&gt;Inheritance: Inheritance is the process of creating new classes from existing classes. The new class inherits the properties and behaviors of the parent class, and can add new properties and behaviors or override existing ones.&lt;/p&gt;

&lt;p&gt;Polymorphism: Polymorphism is the ability of objects to take on multiple forms or behaviors. In OOP, this is achieved by using interfaces and abstract classes to define the common properties and behaviors of a group of objects, while allowing each object to implement them in its own way.&lt;/p&gt;

&lt;h2 id=&quot;javascript-and-oop&quot;&gt;JavaScript and OOP&lt;/h2&gt;

&lt;p&gt;JavaScript was originally designed as a scripting language for web pages. However, with the advent of Node.js, JavaScript has become a full-fledged programming language that can be used to create complex systems.&lt;/p&gt;

&lt;p&gt;JavaScript supports OOP, but in a different way than other programming languages like Java or C++. In JavaScript, objects are created using a constructor function or an object literal.&lt;/p&gt;

&lt;h2 id=&quot;constructor-functions&quot;&gt;Constructor Functions&lt;/h2&gt;

&lt;p&gt;A constructor function is a special function that is used to create new objects. It is called using the “new” keyword, which creates a new object and assigns it to the “this” keyword. The constructor function can define properties and methods on the object using the “this” keyword.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello, my name is &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and I am &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; years old.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;John&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &quot;Hello, my name is John and I am 30 years old.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the above example, we define a constructor function called “Person” that takes two parameters, “name” and “age”. We define two properties, “name” and “age”, and a method called “greet” that logs a message to the console.&lt;/p&gt;

&lt;p&gt;We create a new object called “john” using the “new” keyword and pass in the arguments “John” and 30. We then call the “greet” method on the “john” object.&lt;/p&gt;

&lt;h2 id=&quot;object-literals&quot;&gt;Object Literals&lt;/h2&gt;

&lt;p&gt;Object literals are a shorthand notation for creating new objects. They are created using curly braces and can define properties and methods on the object.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;John&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello, my name is &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and I am &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; years old.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &quot;Hello, my name is John and I am 30 years old.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, we define an object called “john” using object literal notation. We define two properties, “name” and “age”, and a method called “greet” that logs a message to the console.&lt;/p&gt;

&lt;p&gt;We then call the “greet” method on the “john” object.&lt;/p&gt;

&lt;h2 id=&quot;classes-in-javascript&quot;&gt;Classes in JavaScript&lt;/h2&gt;

&lt;p&gt;In ES6, JavaScript introduced the class syntax, which provides a simpler and more structured way of defining objects and their behavior. Classes in JavaScript are still based on the prototype inheritance model, but they provide a more familiar syntax for developers who are used to classes in other programming languages.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello, my name is &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and I am &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; years old.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;John&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &quot;Hello, my name is John and I am 30 years old.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, we define a class called “Person” that has a constructor function that takes two parameters, “name” and “age”. We define two properties, “name” and “age”, and a method called “greet” that logs a message to the console.&lt;/p&gt;

&lt;p&gt;We create a new object called “john” using the “new” keyword and pass in the arguments “John” and 30. We then call the “greet” method on the “john” object.&lt;/p&gt;

&lt;h2 id=&quot;inheritance-in-javascript&quot;&gt;Inheritance in JavaScript&lt;/h2&gt;

&lt;p&gt;Inheritance in JavaScript is achieved using the prototype chain. Each object in JavaScript has a prototype object, which it inherits properties and methods from. The prototype object, in turn, has a prototype object, and so on, until the top of the chain is reached, which is the Object prototype.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello, my name is &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and I am &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; years old.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;displaySalary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;My salary is &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;John&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &quot;Hello, my name is John and I am 30 years old.&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;displaySalary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs &quot;My salary is 50000&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, we define a class called &lt;strong&gt;“Person”&lt;/strong&gt; that has a constructor function that takes two parameters, “name” and “age”. We define two properties, “name” and “age”, and a method called “greet” that logs a message to the console.&lt;/p&gt;

&lt;p&gt;We then define a class called &lt;strong&gt;“Employee”&lt;/strong&gt; that extends the “Person” class. We add a new property called “salary” and a method called “displaySalary”.&lt;/p&gt;

&lt;p&gt;We create a new object called &lt;strong&gt;“john”&lt;/strong&gt; using the “new” keyword and pass in the arguments “John”, 30, and 50000. We then call the &lt;strong&gt;“greet()”&lt;/strong&gt; method and the &lt;strong&gt;“displaySalary()”&lt;/strong&gt; method on the “john” object.&lt;/p&gt;

&lt;p&gt;The “Employee” class inherits the properties and methods of the “Person” class using the “extends” keyword. The “super” keyword is used to call the constructor of the parent class and initialize the “name” and “age” properties of the “Employee” object.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Object-oriented programming is an important paradigm in software development, and JavaScript provides various ways to implement OOP concepts. In this blog post, we covered the basics of OOP in JavaScript, including object literals, classes, and inheritance.&lt;/p&gt;

&lt;p&gt;It’s important to note that OOP is just one approach to programming, and there are other paradigms such as functional programming and procedural programming. Developers should choose the appropriate approach based on the problem they’re trying to solve and the requirements of the project.&lt;/p&gt;

&lt;p&gt;By understanding OOP concepts in JavaScript, developers can write code that is more organized, modular, and reusable. This can result in more maintainable code that is easier to debug and extend over time.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Feb 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/mastering-oop-in-javascript/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/mastering-oop-in-javascript/</guid>
      </item>
    
      <item>
        <title>JavaScript Classes 101</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;JavaScript is one of the most popular programming languages in use today. It is a versatile language that is used for a variety of purposes, including web development, game development, and server-side scripting. One of the most important features of JavaScript is its support for object-oriented programming (OOP), which allows developers to create classes that represent real-world objects and encapsulate their behavior and data.
&lt;!--more--&gt;
In this blog post, we will explore the concept of classes in JavaScript, and how they can be used to create reusable and maintainable code. We will cover the syntax and semantics of classes, as well as their relationship with objects and inheritance. We will also discuss some best practices for using classes in your code.&lt;/p&gt;

&lt;h2 id=&quot;what-are-classes-in-javascript&quot;&gt;What are classes in JavaScript?&lt;/h2&gt;

&lt;p&gt;A class in JavaScript is a blueprint for creating objects. It defines the properties and methods that an object will have, as well as any behavior that the object should exhibit. Classes can be thought of as templates or prototypes for objects, which are instantiated (i.e. created) based on their class definition.&lt;/p&gt;

&lt;p&gt;Classes were introduced in ECMAScript 6, the latest version of the JavaScript language, as a way to make OOP in JavaScript more intuitive and easier to use. Prior to ECMAScript 6, developers used a combination of constructor functions and prototype chains to achieve OOP in JavaScript. Classes provide a more structured and organized way to define objects, and are designed to be more familiar to developers who are used to OOP in other programming languages.&lt;/p&gt;

&lt;h2 id=&quot;the-syntax-of-a-javascript-class&quot;&gt;The syntax of a JavaScript class&lt;/h2&gt;

&lt;p&gt;The syntax of a JavaScript class is relatively simple. Here is an example of a class definition:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello, my name is &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; and I am &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; years old.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This class is called Person and has two properties, name and age, as well as one method, sayHello(). The constructor() method is a special method that is called when an object is created based on the class. It sets the initial values of the object’s properties. The sayHello() method is a regular method that can be called on an instance of the class.&lt;/p&gt;

&lt;p&gt;To create an object based on a class, you use the new keyword, like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;John&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Jane&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;person1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Output: &quot;Hello, my name is John and I am 30 years old.&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;person2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Output: &quot;Hello, my name is Jane and I am 25 years old.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, we create two objects based on the Person class, and call the sayHello() method on each object.&lt;/p&gt;

&lt;h2 id=&quot;the-relationship-between-classes-and-objects&quot;&gt;The relationship between classes and objects&lt;/h2&gt;

&lt;p&gt;In JavaScript, classes and objects are closely related. A class defines the properties and methods that an object will have, but an object is an instance of a class that has its own unique values for those properties. When you create an object based on a class, you are creating an instance of that class, which inherits all the properties and methods of the class.&lt;/p&gt;

&lt;p&gt;For example, if we create a class called Car:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;The &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is starting.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;The &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;is stopping.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;inheritance-in-javascript-classes&quot;&gt;Inheritance in JavaScript classes&lt;/h2&gt;

&lt;p&gt;Inheritance is an important concept in OOP, and JavaScript classes support inheritance. Inheritance allows you to create a new class based on an existing class, which inherits all the properties and methods of the parent class. The new class can then add its own properties and methods, or override the properties and methods of the parent class.&lt;/p&gt;

&lt;p&gt;To create a subclass, you use the extends keyword, like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; makes a noise.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; barks.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Fido&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Output: &quot;Fido barks.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, we create a class called Animal that has a name property and a speak() method. We then create a subclass called Dog that extends the Animal class using the extends keyword. The Dog class overrides the speak() method of the Animal class, so that it now outputs “barks” instead of “makes a noise”.&lt;/p&gt;

&lt;p&gt;When we create an instance of the Dog class, it inherits the properties and methods of the Animal class, and we can call the speak() method on the Dog object.&lt;/p&gt;

&lt;h2 id=&quot;best-practices-for-using-classes-in-javascript&quot;&gt;Best practices for using classes in JavaScript&lt;/h2&gt;

&lt;p&gt;Here are some best practices for using classes in your JavaScript code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use classes for creating complex objects with multiple properties and methods. If you only need a simple object with a few properties, a plain object literal may be sufficient.&lt;/li&gt;
  &lt;li&gt;Use meaningful names for your classes, that describe the objects they represent. For example, if you’re creating a class for a car, use the name Car.&lt;/li&gt;
  &lt;li&gt;Use proper indentation and formatting to make your code more readable. This is especially important when working with classes, which can have many properties and methods.&lt;/li&gt;
  &lt;li&gt;Keep your class definitions short and focused. If a class has too many properties and methods, it may be a sign that it needs to be refactored into multiple smaller classes.&lt;/li&gt;
  &lt;li&gt;Use inheritance sparingly, and only when it makes sense for your use case. Overusing inheritance can lead to complex and difficult-to-maintain code.&lt;/li&gt;
  &lt;li&gt;Use access modifiers such as public, private, and protected to control access to the properties and methods of your class. This can help prevent unintended changes to the state of your objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;JavaScript classes are a powerful feature that allow developers to create reusable and maintainable code. Classes provide a structured and organized way to define objects, and make it easier to implement OOP in JavaScript. With their support for inheritance and access modifiers, classes in JavaScript provide a flexible and powerful way to create complex and extensible code.&lt;/p&gt;

&lt;p&gt;By following best practices and using classes in a thoughtful and intentional way, you can create code that is easy to read, understand, and maintain, even as your codebase grows in complexity.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Feb 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/javascript-classes-101/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/javascript-classes-101/</guid>
      </item>
    
      <item>
        <title>React States</title>
        <description>&lt;p&gt;React is a popular JavaScript library used for building user interfaces. One of the key concepts in React is state, which is used to manage data and make components interactive. In this blog post, we’ll dive into what React states are, how they work, and how they can be used to build powerful and dynamic applications.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-is-a-react-state&quot;&gt;What is a React state?&lt;/h2&gt;

&lt;p&gt;In simple terms, a state is an object that holds data and determines how a component should behave and render. It is like a memory that keeps track of the changes in a component’s properties and allows it to be responsive to user interactions. A state is mutable and can be updated using the setState method, triggering a re-render of the component and its children.&lt;/p&gt;

&lt;h2 id=&quot;how-do-react-states-work&quot;&gt;How do React states work?&lt;/h2&gt;

&lt;p&gt;To create a state in React, we need to first define an initial state value in the constructor of our component class. The state can be a primitive data type, such as a string or number, or an object that contains multiple key-value pairs.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello, world!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above code, we’ve defined an initial state for a component called &lt;strong&gt;MyComponent&lt;/strong&gt;. It has two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt;, with initial values of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'Hello, world!'&lt;/code&gt; respectively. To update the state, we can call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setState&lt;/code&gt; method, passing in an object that contains the updated key-value pairs. For example, to increment the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt; property by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, we can do:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setState&lt;/code&gt; is called, React will compare the new state with the previous state and make necessary updates to the component and its children. This includes updating the virtual DOM, diffing the changes, and rendering the updated component to the real DOM.&lt;/p&gt;

&lt;h2 id=&quot;why-use-react-states&quot;&gt;Why use React states?&lt;/h2&gt;

&lt;p&gt;React states are useful for building dynamic, interactive UIs that respond to user inputs and events. They provide a way to manage and update data within a component without requiring a full page refresh or server call. States can be used to create controlled components, which are components that have their values controlled by React, rather than the user. This allows for better data validation and error handling. For example, if we have an input field that only accepts numbers, we can use a state to validate the input and prevent the user from submitting invalid data.&lt;/p&gt;

&lt;p&gt;States can also be used to create unidirectional data flow, where the data flows in a single direction from parent to child components. This makes it easier to reason about the data and reduces the likelihood of bugs caused by conflicting state changes.&lt;/p&gt;

&lt;h2 id=&quot;best-practices-for-using-react-states&quot;&gt;Best practices for using React states&lt;/h2&gt;
&lt;p&gt;To use React states effectively, it’s important to follow some best practices that will ensure optimal performance and maintainability of your code.&lt;/p&gt;

&lt;h3 id=&quot;keep-states-minimal&quot;&gt;Keep states minimal&lt;/h3&gt;
&lt;p&gt;States should only contain data that is essential for rendering the component. It’s important to avoid putting too much data into a state, as this can cause performance issues and make the code harder to maintain.&lt;/p&gt;

&lt;h3 id=&quot;avoid-cascading-states&quot;&gt;Avoid cascading states&lt;/h3&gt;
&lt;p&gt;Cascading states occur when a state is passed down through multiple levels of components, resulting in the need for multiple props and setState calls. This can lead to code that is hard to read and maintain. To avoid cascading states, consider using a state management library like Redux or MobX.&lt;/p&gt;

&lt;h3 id=&quot;use-functional-components&quot;&gt;Use functional components&lt;/h3&gt;

&lt;p&gt;Functional components are simpler and easier to read than class components, and they provide better performance. Since functional components don’t have a state, they rely on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;props&lt;/code&gt; to render. This makes it easier to reason about the data and ensures that the data flows in a unidirectional way, from parent to child components. Functional components are also easier to test, since they are pure functions that only take in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;props&lt;/code&gt; and return a JSX element. This makes it easier to write unit tests and ensure that the component behaves as expected.&lt;/p&gt;

&lt;p&gt;Functional components can also use hooks, which are a powerful mechanism for managing state and other side effects in React. Hooks allow us to use state and other React features without the need for a class component. They provide a simple and intuitive way to manage state, handle effects, and perform other common tasks in React. Overall, functional components are a great choice for building simple, reusable, and performant components in React. They provide a simpler and more intuitive way to build components and help ensure that our code is maintainable, scalable, and easy to test&lt;/p&gt;

&lt;h3 id=&quot;use-immutability&quot;&gt;Use immutability&lt;/h3&gt;
&lt;p&gt;When updating a state, it’s important to do so immutably. This means creating a new object with the updated data, rather than directly modifying the existing state. This ensures that React can detect the changes and re-render the component and its children as needed.&lt;/p&gt;

&lt;h3 id=&quot;optimize-re-renders&quot;&gt;Optimize re-renders&lt;/h3&gt;
&lt;p&gt;Since re-rendering a component can be a performance-intensive operation, it’s important to optimize the re-renders as much as possible. One way to do this is to use the shouldComponentUpdate lifecycle method, which allows us to determine if a component should re-render or not. By implementing this method, we can skip unnecessary re-renders and improve the overall performance of the application.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;React states are an essential part of building dynamic, interactive user interfaces. By managing data and allowing components to respond to user interactions, states provide a powerful mechanism for building robust and responsive applications. By following best practices and optimizing our code, we can ensure that our React applications are performant, maintainable, and scalable.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Feb 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/react-states/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/react-states/</guid>
      </item>
    
      <item>
        <title>What Is A Dynamic Website</title>
        <description>&lt;p&gt;In today’s digital world, a website is no longer just an online brochure or an information repository. It has become a medium for businesses and individuals to interact with their customers, showcase their products and services, and create an online presence that can help them reach a wider audience. With the advent of dynamic websites, the way websites are created and managed has changed significantly. In this blog post, we will explore what a dynamic website is, how it works, and what are its benefits.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;A dynamic website is a type of website that is created using dynamic web pages. In simple terms, dynamic web pages are those that are generated in real-time, based on the user’s interaction with the website. Unlike static web pages, which remain the same for every user and are pre-designed, dynamic web pages are designed to adapt to the user’s needs, preferences, and actions.&lt;/p&gt;

&lt;p&gt;Dynamic web pages are created using programming languages such as PHP, ASP.NET, Ruby on Rails, and many others. These languages allow developers to create web pages that can interact with databases, generate content on the fly, and provide a personalized experience for the user.&lt;/p&gt;

&lt;h2 id=&quot;how-does-a-dynamic-website-work&quot;&gt;How Does a Dynamic Website Work?&lt;/h2&gt;

&lt;p&gt;A dynamic website works by using a combination of server-side scripting, client-side scripting, and a database. When a user visits a dynamic website, the server-side scripting engine processes the request, interacts with the database to retrieve the necessary information, and generates the dynamic content. The content is then sent to the user’s web browser, which uses client-side scripting to render the web page.&lt;/p&gt;

&lt;p&gt;Server-side scripting refers to the process of running code on the web server, as opposed to running it on the user’s computer. This allows the website to generate dynamic content that is customized to the user’s needs. The server-side scripting engine can also interact with databases, which allows the website to store and retrieve information such as user profiles, product catalogs, and customer orders.&lt;/p&gt;

&lt;p&gt;Client-side scripting, on the other hand, refers to the process of running code on the user’s web browser. This allows the website to provide interactive features such as drop-down menus, pop-up windows, and dynamic forms. Client-side scripting is typically done using JavaScript, which is supported by all modern web browsers.&lt;/p&gt;

&lt;p&gt;The database is a crucial component of a dynamic website. It is used to store and retrieve information such as user profiles, product catalogs, customer orders, and other data that is necessary for the website to function. The database is typically managed using a database management system (DBMS), such as MySQL, Oracle, or Microsoft SQL Server.&lt;/p&gt;

&lt;h2 id=&quot;benefits-of-dynamic-websites&quot;&gt;Benefits of Dynamic Websites&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Personalized Experience:&lt;/strong&gt; One of the biggest benefits of a dynamic website is that it can provide a personalized experience for the user. By using server-side scripting and a database, the website can generate dynamic content that is customized to the user’s needs. For example, an e-commerce website can recommend products based on the user’s previous purchases or browsing history.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interactive Features:&lt;/strong&gt; Another benefit of dynamic websites is that they can provide interactive features that are not possible with static websites. Client-side scripting allows the website to provide features such as drop-down menus, pop-up windows, and dynamic forms, which can make the user’s experience more engaging and intuitive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content Management:&lt;/strong&gt; Dynamic websites also make it easier to manage content. With a static website, every change to the content requires editing the HTML code manually. With a dynamic website, the content can be stored in a database and edited through a content management system (CMS), which makes it easier to update the website and keep it up-to-date.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scalability:&lt;/strong&gt; Dynamic websites are also more scalable than static websites. As the website grows and more users visit the site, the server-side scripting engine can handle the increased traffic by generating dynamic content on the fly, without the need for additional coding. This makes it easier to add new features, functionality, and content to the website as the need arises.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search Engine Optimization:&lt;/strong&gt; Dynamic websites are also more search engine-friendly than static websites. Since dynamic web pages are generated in real-time, the content can be optimized for search engines, which can help the website rank higher in search engine results pages (SERPs). Dynamic websites can also use a variety of tools and techniques, such as XML sitemaps and meta tags, to improve their visibility and search engine rankings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Analytics:&lt;/strong&gt; Dynamic websites are also easier to track and analyze. By using analytics tools such as Google Analytics, website owners can track user behavior, identify popular pages, and monitor key metrics such as bounce rate and conversion rate. This data can be used to improve the website’s performance and optimize its content and features for maximum effectiveness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Integration:&lt;/strong&gt; Dynamic websites can also be integrated with other systems and applications. For example, an e-commerce website can integrate with a payment gateway to process customer orders, or with a shipping provider to manage delivery and tracking. By integrating with other systems, dynamic websites can streamline business processes, improve efficiency, and provide a more seamless user experience.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In conclusion, a dynamic website is a type of website that is created using dynamic web pages. Dynamic web pages are generated in real-time, based on the user’s interaction with the website. Dynamic websites use a combination of server-side scripting, client-side scripting, and a database to provide a personalized experience, interactive features, content management, scalability, search engine optimization, analytics, and integration.&lt;/p&gt;

&lt;p&gt;Dynamic websites offer a number of benefits over static websites, including the ability to provide a more engaging and interactive user experience, easier content management, scalability, search engine optimization, analytics, and integration with other systems and applications. As such, dynamic websites have become an essential tool for businesses and individuals looking to create a powerful online presence and engage with their customers in new and exciting ways.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Feb 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/what-is-a-dynamic-website/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/what-is-a-dynamic-website/</guid>
      </item>
    
      <item>
        <title>Using React States</title>
        <description>&lt;p&gt;React states are a fundamental concept in React programming. They are used to store and manage data that changes over time, such as user input, API responses, or component updates. In this article, we’ll explore what React states are, how they work, and how to use them in your React projects.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-are-react-states&quot;&gt;What are React States?&lt;/h2&gt;

&lt;p&gt;React states are JavaScript objects that hold information about a component’s state. They are used to store and update data that can change over time, such as a component’s user interface or its data model. States are essential for building interactive and responsive user interfaces in React, and they allow developers to manage complex application logic with ease.&lt;/p&gt;

&lt;h2 id=&quot;how-do-react-states-work&quot;&gt;How do React States Work?&lt;/h2&gt;

&lt;p&gt;When a component’s state changes, React automatically re-renders the component and its child components. This ensures that the user interface reflects the current state of the application. States are typically initialized in the component’s constructor, and they are updated using the setState method. The setState method is used to update the component’s state, and it takes an object as an argument. The object can contain one or more key-value pairs, where the key represents the state property, and the value represents its new value. When setState is called, React updates the component’s state and re-renders the component.&lt;/p&gt;

&lt;p&gt;Here’s an example of a simple React state:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jsx&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;Increment&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the Counter component has a state property count, which is initialized to 0 in the constructor. The render method displays the current count value, and the onClick event handler updates the count state by calling the setState method.&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-react-states-in-your-projects&quot;&gt;How to Use React States in Your Projects&lt;/h2&gt;

&lt;p&gt;To use React states in your projects, you’ll need to follow these steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new React component and import the React and Component modules.&lt;/li&gt;
  &lt;li&gt;Define the component’s state properties in the constructor method.&lt;/li&gt;
  &lt;li&gt;Render the component’s user interface using the state properties.&lt;/li&gt;
  &lt;li&gt;Add event handlers to update the component’s state when necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s an example of a more complex React state:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jsx&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LoginForm&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;rememberMe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;handleInputChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;checkbox&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;handleSubmit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Call API to submit form data&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;submitLoginForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Handle success response&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onSubmit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleSubmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;Username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleInputChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/label&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;br&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To see a working example of React states go over to my &lt;a href=&quot;https://github.com/yosileyid/CodeFolio&quot;&gt;“CodeFolio”&lt;/a&gt; repo and browse the react apps folder, in there you will find an app called &lt;a href=&quot;https://github.com/yosileyid/CodeFolio/tree/main/apps/tic-tac-toe&quot;&gt;“tic-tac-toe”&lt;/a&gt; which is using react states in a very simple way to run a tic tac toe game.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Feb 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/using-react-states/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/using-react-states/</guid>
      </item>
    
      <item>
        <title>Introducing PolygonDB</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/JewishLewish/PolygonDB&quot;&gt;PolygonDB&lt;/a&gt; is an open-source database management system that is designed to be a modern alternative to MongoDB. It’s built in Rust, a programming language known for its speed and reliability, and it boasts a number of features that make it a compelling choice for developers who need to store and manage data.
&lt;!--more--&gt;
One of the key features of PolygonDB is its support for complex data types. Let’s say, for example, that you’re building an e-commerce site and you need to store information about each product. In MongoDB, you might create a collection for products and store each product as a document, like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ObjectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;612f4a4d9a4ce4d4a3a0e3fe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;iPhone 13 Pro&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;The latest and greatest iPhone&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;999.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Graphite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;128GB&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This works fine, but what if you need to store additional information about each product, such as customer reviews or a list of related products? In MongoDB, you would have to store this information as nested documents or arrays, which can get messy and difficult to work with.&lt;/p&gt;

&lt;p&gt;With PolygonDB, you can store each product as a YAML or TOML file, like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;name = &quot;iPhone 13 Pro&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;description = &quot;The latest and greatest iPhone&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;price = &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;999.99&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;color = &quot;Graphite&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;storage = &quot;128GB&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;reviews = [&quot;612f4ad69a4ce4d4a3a0e4ff&quot;, &quot;612f4ae69a4ce4d4a3a0e54c&quot;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;related_products = [&quot;612f4b099a4ce4d4a3a0e5c4&quot;, &quot;612f4b209a4ce4d4a3a0e60f&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This makes it much easier to work with complex data types, since you can use familiar file-based operations to read, write, and manipulate data.&lt;/p&gt;

&lt;p&gt;Another key feature of PolygonDB is its support for transactions. Let’s say, for example, that you’re building a banking app and you need to ensure that transfers between accounts are atomic and consistent. With PolygonDB, you can use transactions to ensure that all changes are committed or rolled back together, so that you don’t end up with inconsistent or corrupted data.&lt;/p&gt;

&lt;p&gt;Here’s an example of how you might use transactions in PolygonDB:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accounts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;account_123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accounts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;account_456&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;balance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transfer_amount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_balance_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;balance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transfer_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_balance_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;balance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transfer_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.update_document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accounts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;account_123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;balance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_balance_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.update_document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accounts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;account_456&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;balance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_balance_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.rollback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This code retrieves two documents from the “accounts” collection, checks that there is enough money in one account to make a transfer, and then updates both documents atomically. If there is not enough money, the transaction is rolled back.&lt;/p&gt;

&lt;p&gt;Finally, PolygonDB has built-in support for indexing, which makes it easy to perform complex queries and sort data. You can create indexes on one or more fields, and PolygonDB will automatically maintain the index as you add, remove, or modify documents. This can greatly improve the performance of your queries, especially for large collections.&lt;/p&gt;

&lt;p&gt;Here’s an example of how you might create an index in PolygonDB:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.create_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;products&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This code creates an index on the “name” field in the “products” collection. Now, when you perform a query that includes the “name” field, PolygonDB will use the index to quickly find matching documents.&lt;/p&gt;

&lt;p&gt;In summary, PolygonDB is a modern and flexible database management system that offers a number of features that make it a compelling alternative to MongoDB. Its support for complex data types, transactions, and indexing make it a powerful tool for developers who need to store and manage data. If you’re interested in learning more, I encourage you to check out the PolygonDB code base and documentation on GitHub.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Jan 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/polygondb-modern-and-flexible/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/polygondb-modern-and-flexible/</guid>
      </item>
    
      <item>
        <title>Publish Your Own NPM Package</title>
        <description>&lt;p&gt;Npm is a popular package manager for Node.js, which provides a vast range of libraries and packages that can be installed and used to enhance your projects. Creating and publishing a package on Npm is a straightforward process, and this guide will walk you through the steps to successfully publish your package on Npm.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-1-create-your-package&quot;&gt;Step 1: Create your package&lt;/h2&gt;

&lt;p&gt;To begin, create your package using your preferred programming language. Your package should include a package.json file, which contains essential information about your package, such as its name, version, and dependencies. To create a package.json file, run the following command in your terminal:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command will prompt you to provide all the necessary details about your package. It’s essential to ensure that the package name is unique and descriptive to help users find your package.&lt;/p&gt;

&lt;h2 id=&quot;step-2-add-your-files-to-git&quot;&gt;Step 2: Add your files to Git&lt;/h2&gt;

&lt;p&gt;The next step is to add your files to Git. Ensure that your package files are in a Git repository, and you have committed all the changes.&lt;/p&gt;

&lt;h2 id=&quot;step-3-create-an-npm-account&quot;&gt;Step 3: Create an Npm account&lt;/h2&gt;

&lt;p&gt;To publish your package, you must first create an Npm account. If you already have an account, skip this step. You can create an account by running the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm adduser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-4-publish-your-package&quot;&gt;Step 4: Publish your package&lt;/h2&gt;

&lt;p&gt;Once you’ve created an Npm account, it’s time to publish your package. Use the following command to publish your package:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Npm will then prompt you to log in with your Npm credentials. Once you’ve logged in, Npm will publish your package to the registry. If everything is successful, you should see a success message, indicating that your package has been published.&lt;/p&gt;

&lt;h2 id=&quot;step-5-manage-your-package&quot;&gt;Step 5: Manage your package&lt;/h2&gt;

&lt;p&gt;Congratulations, your package is now published on Npm. You can view your package and manage its details by visiting the Npm registry. You can also update your package by making changes to your package.json file and re-publishing your package using the npm publish command.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Publishing a package on Npm is a simple and straightforward process that anyone can do. By following the steps outlined in this guide, you can publish your package and share it with the community. Remember to keep your package up-to-date and always respond to issues and queries from your users. Good luck and happy publishing! Please leave a comment below and give me your npm account so I can use your packages :-)&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Jan 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/publish-to-npm/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/publish-to-npm/</guid>
      </item>
    
      <item>
        <title>FreeCodeCamp Current Course Curriculem</title>
        <description>&lt;p&gt;These are the projects needed to complete the @FreeCodeCamp coursework. Starting with the Responsive Web course. I decided to use the github to host my projects so people can see them. Some of them need to be runnable, so I had to use other services to host those on. The sections that are empty are not started yet, I will update these as I earn them. If you would like access to the certificates, reach out to me via email or on discord, both are listed on the front page of my profile. &lt;!--more--&gt;You need to have a github account to access them. I am currently working through the sections on FCC and the information for the projects needed to pass the sections isn’t fully informative I just wanted to have something in those sections. I will update it as I get to them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/14003326/216845732-8a284edb-b2ad-4206-9012-6a56755541d4.png&quot; alt=&quot;freecodecamp-head&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#responsive-web-design-certification-projects&quot;&gt;Responsive Web Development&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-structures--algorithms-certification-projects&quot;&gt;JavaScript Data Structures &amp;amp; Algorithms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#front-end-development-libraries&quot;&gt;Front End Development&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-visualization&quot;&gt;Data Visualization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#relational-databases&quot;&gt;Relational Databases&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#back-end-development--apis&quot;&gt;Back End Development &amp;amp; APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#quality-assurance&quot;&gt;Quality Assurance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scientific-computing-w-python&quot;&gt;Scientific Computing - [Python]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-analysis-w-python&quot;&gt;Data Analysis - [Python]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#information-security&quot;&gt;Information Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#machine-learning-w-python&quot;&gt;Machine Learning - [Python]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#coding-interview-prep&quot;&gt;Coding Interview Prep&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;responsive-web-design-certification-projects&quot;&gt;Responsive Web Design Certification Projects&lt;/h2&gt;

&lt;p&gt;These are essentially just teaching &lt;strong&gt;NEW&lt;/strong&gt; development students &lt;strong&gt;BASIC&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; elements and how the “page” acts. They don’t really include everything, but that is in part intentional. The final projects are minimal CSS and HTML and don’t really look all that bad imho for being “only” HTML / CSS. It takes about 300 hours of working on the course to get these all done.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Survey Form: &lt;a href=&quot;https://Survey-Form.hasidicdev.repl.co&quot;&gt;Hosted On ReplIt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tribute Page: &lt;a href=&quot;https://Tribute-Page.hasidicdev.repl.co&quot;&gt;Hosted On ReplIt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tech Docs: &lt;a href=&quot;https://Tech-Docs.hasidicdev.repl.co&quot;&gt;Hosted On ReplIt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Product Landing Site: &lt;a href=&quot;https://Products.hasidicdev.repl.co&quot;&gt;Hosted On ReplIt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Portfolio Project: &lt;a href=&quot;https://Portfolio.hasidicdev.repl.co&quot;&gt;Hosted On ReplIt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certificates/ResponsiveWebDesign: [Private - Available On Request]&lt;/p&gt;

&lt;h2 id=&quot;data-structures--algorithms-certification-projects&quot;&gt;Data Structures &amp;amp; Algorithms Certification Projects&lt;/h2&gt;

&lt;p&gt;Mainly this course begins by teaching you basic JavaScript types, classes, and variables and then goes onto teaching you how to think about things like looping, and recursion. In the end you will use all of those concepts to builf the final projects needed to pass certification.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Palindrome Checker: &lt;a href=&quot;https://replit.com/@hasidicdev/Palindrome-Checker&quot;&gt;Hosted On ReplIt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Roman Numeral Converter: &lt;a href=&quot;https://replit.com/@hasidicdev/Roman-Numeral-Conversion&quot;&gt;Hosted On ReplIt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Caesers Cipher: &lt;a href=&quot;https://replit.com/@hasidicdev/Caesars-Cipher&quot;&gt;Hosted On ReplIt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Telephone Number Validator: &lt;a href=&quot;https://replit.com/@hasidicdev/Telephone-Number-Validator&quot;&gt;Hosted On ReplIt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Cash Register: &lt;a href=&quot;https://replit.com/@hasidicdev/Cash-Register&quot;&gt;Hosted On ReplIt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certificates/Algorithms: [Private - Available On Request]&lt;/p&gt;

&lt;h2 id=&quot;front-end-development-libraries&quot;&gt;Front End Development Libraries&lt;/h2&gt;

&lt;p&gt;I am currently working on this section so I will update this as I complete them. This is mainly teaching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bootstrap&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jQuery&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SaSS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React.js&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Redux&lt;/code&gt;. In the end you will use all of these principles to build the final projects needed to earn the certificate.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Build a Random Quote Machine&lt;/li&gt;
  &lt;li&gt;Build a Markdown Previewer&lt;/li&gt;
  &lt;li&gt;Build a Drum Machine&lt;/li&gt;
  &lt;li&gt;Build a JavaScript Calculator&lt;/li&gt;
  &lt;li&gt;Build a Pomodoro Clock&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certificates/Frontend - [Private - Available On Request]&lt;/p&gt;

&lt;h2 id=&quot;data-visualization&quot;&gt;Data Visualization&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Visualize Data with a Bar Chart.&lt;/li&gt;
  &lt;li&gt;Visualize Data with a Scatterplot Graph.&lt;/li&gt;
  &lt;li&gt;Visualize Data with a Heat Map.&lt;/li&gt;
  &lt;li&gt;Visualize Data with a Choropleth Map.&lt;/li&gt;
  &lt;li&gt;Visualize Data with a Treemap Diagram.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certificates/DataViz - [Private: Available On Request]&lt;/p&gt;

&lt;h2 id=&quot;relational-databases&quot;&gt;Relational Databases:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Learn Bash by Building a Boilerplate&lt;/li&gt;
  &lt;li&gt;Learn Relational Databases by Building a Mario Database&lt;/li&gt;
  &lt;li&gt;Celestial Bodies Database&lt;/li&gt;
  &lt;li&gt;Learn Bash Scripting by Building Five Programs&lt;/li&gt;
  &lt;li&gt;Learn SQL by Building a Student Database: Part 1&lt;/li&gt;
  &lt;li&gt;Learn SQL by Building a Student Database: Part 2&lt;/li&gt;
  &lt;li&gt;World Cup Database&lt;/li&gt;
  &lt;li&gt;Learn Advanced Bash by Building a Kitty Ipsum Translator&lt;/li&gt;
  &lt;li&gt;Learn Bash and SQL by Building a Bike Rental Shop&lt;/li&gt;
  &lt;li&gt;Salon Appointment Scheduler&lt;/li&gt;
  &lt;li&gt;Learn Nano by Building a Castle&lt;/li&gt;
  &lt;li&gt;Learn Git by Building an SQL Reference Object&lt;/li&gt;
  &lt;li&gt;Periodic Table Database&lt;/li&gt;
  &lt;li&gt;Number Guessing Game&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certificates/Databases - [Private: Available On Request]&lt;/p&gt;

&lt;h2 id=&quot;back-end-development--apis&quot;&gt;Back End Development &amp;amp; APIs:&lt;/h2&gt;

&lt;p&gt;The projects on this certificate are all about making APIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Timestamp Microservice&lt;/li&gt;
  &lt;li&gt;Request Header Parser Microservice&lt;/li&gt;
  &lt;li&gt;URL Shortener Microservice&lt;/li&gt;
  &lt;li&gt;Exercise Tracker&lt;/li&gt;
  &lt;li&gt;File Metadata Microservice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certificates/Backend - [Private: Available On Request]&lt;/p&gt;

&lt;h2 id=&quot;quality-assurance&quot;&gt;Quality Assurance:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Metric-Imperial Converter&lt;/li&gt;
  &lt;li&gt;Issue Tracker&lt;/li&gt;
  &lt;li&gt;Personal Library&lt;/li&gt;
  &lt;li&gt;Sudoku Solver&lt;/li&gt;
  &lt;li&gt;American British Translator&lt;/li&gt;
  &lt;li&gt;Stock Price Checker&lt;/li&gt;
  &lt;li&gt;Anonymous Message Board&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certificates/Quality - [Private: Available On Request]&lt;/p&gt;

&lt;h2 id=&quot;scientific-computing-w-python&quot;&gt;Scientific Computing w/ Python:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Arithmetic Formatter&lt;/li&gt;
  &lt;li&gt;Time Calculator&lt;/li&gt;
  &lt;li&gt;Budget App&lt;/li&gt;
  &lt;li&gt;Polygon Area Calculator&lt;/li&gt;
  &lt;li&gt;Probability Calculator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certificates/Scientific - [Private: Available On Request]&lt;/p&gt;

&lt;h2 id=&quot;data-analysis-w-python&quot;&gt;Data Analysis w/ Python:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Mean-Variance-Standard Deviation Calculator&lt;/li&gt;
  &lt;li&gt;Demographic Data Analyzer&lt;/li&gt;
  &lt;li&gt;Medical Data Visualizer&lt;/li&gt;
  &lt;li&gt;Page View Time Series Visualizer&lt;/li&gt;
  &lt;li&gt;Sea Level Predictor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certificates/DataAnalysis - [Private: Available On Request]&lt;/p&gt;

&lt;h2 id=&quot;information-security&quot;&gt;Information Security:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Stock Price Checker&lt;/li&gt;
  &lt;li&gt;Anonymous Message Board&lt;/li&gt;
  &lt;li&gt;Port Scanner&lt;/li&gt;
  &lt;li&gt;SHA-1 Password Cracker&lt;/li&gt;
  &lt;li&gt;Secure Real Time Multiplayer Game&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certificates/InfoSec - [Private: Available On Request]&lt;/p&gt;

&lt;h2 id=&quot;machine-learning-w-python&quot;&gt;Machine Learning w/ Python:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Rock Paper Scissors&lt;/li&gt;
  &lt;li&gt;Cat and Dog Image Classifier&lt;/li&gt;
  &lt;li&gt;Book Recommendation Engine using KNN&lt;/li&gt;
  &lt;li&gt;Linear Regression Health Costs Calculator&lt;/li&gt;
  &lt;li&gt;Neural Network SMS Text Classifier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Certificates/Machine - [Private: Available On Request]&lt;/p&gt;

&lt;h2 id=&quot;coding-interview-prep&quot;&gt;Coding Interview Prep:&lt;/h2&gt;

&lt;p&gt;In this section they assume you already know how to code, and are looking to get some exercises and projects you can discplay on your profile. There are links to various sites like ProjectEuler, Rosetta Code, as well as sections named &lt;a href=&quot;#take-home-projects&quot;&gt;Take Home Projects&lt;/a&gt; where you build projects for your portfolio, and Algorithms that has a list of common programming interview algorithm questions. Other good sites are &lt;a href=&quot;https://leetcode.com&quot;&gt;LeetCode&lt;/a&gt; where you put your programming skills to the test to solve mathmatical problems.&lt;/p&gt;

&lt;h3 id=&quot;take-home-projects&quot;&gt;“Take Home Projects”&lt;/h3&gt;

&lt;p&gt;This is a list of projects in the “Coding Interview Prep” section to build up your portfolio.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Show the Local Weather&lt;/li&gt;
  &lt;li&gt;Build a Wikipedia Viewer&lt;/li&gt;
  &lt;li&gt;Use the Twitch JSON API&lt;/li&gt;
  &lt;li&gt;Build an Image Search Abstraction Layer&lt;/li&gt;
  &lt;li&gt;Build a Tic Tac Toe Game&lt;/li&gt;
  &lt;li&gt;Build a Simon Game&lt;/li&gt;
  &lt;li&gt;Build a freeCodeCamp Forum Homepage&lt;/li&gt;
  &lt;li&gt;Build a Recipe Box&lt;/li&gt;
  &lt;li&gt;Build the Game of Life&lt;/li&gt;
  &lt;li&gt;Build a Roguelike Dungeon Crawler Game&lt;/li&gt;
  &lt;li&gt;P2P Video Chat Application&lt;/li&gt;
  &lt;li&gt;Show National Contiguity with a Force Directed Graph&lt;/li&gt;
  &lt;li&gt;Map Data Across the Globe&lt;/li&gt;
  &lt;li&gt;Manage a Book Trading Club&lt;/li&gt;
  &lt;li&gt;Build a Pinterest Clone&lt;/li&gt;
  &lt;li&gt;Build a Nightlife Coordination App&lt;/li&gt;
  &lt;li&gt;Chart the Stock Market&lt;/li&gt;
  &lt;li&gt;Build a Voting App&lt;/li&gt;
  &lt;li&gt;Build a Pong Game&lt;/li&gt;
  &lt;li&gt;Build a Light-Bright App&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 18 Jan 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/freecodecamp-current-course/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/freecodecamp-current-course/</guid>
      </item>
    
      <item>
        <title>Discord Bot Base Files And Setup</title>
        <description>&lt;p&gt;This is just a simple post to help you get your Discord bot setup and running in a matter of seconds. If you run into any issues feel free to raise an “Issue” and I can assist you. This is current as of February 1, 2023. Your first step is to create a new directory and name it whatever you want your repo to be called on GitHub. Open your favorite code editor and create a new file named “index.js” and create a “.env”, and “package.json” file. Once you have those set up go ahead and copy the contents of those two files from here and paste them into your local files. 
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;create-your-application&quot;&gt;Create Your Application&lt;/h2&gt;

&lt;p&gt;Go over to the Discord Developer Hub and create a new application. You will need your Client_ID (Also called the “Application ID” on the first page). Click on “Bot” and click Add Bot. “A wild bot has appeared” on this screen is your token, click reset token and copy that. Paste it in your .env file along with your Client ID. On this page click “Send messages” and “Slash Commands” and save. Go to Oauth and Generate a new URL. Click on “bot” on the left, and click “send messages”, and “slash commands” on the bottom of the page. Copy the URL it gives you there and paste it into a new tab in your browser. Authorize the bot to join your server and wait a few seconds and it will appear.&lt;/p&gt;

&lt;h2 id=&quot;editing-files&quot;&gt;Editing Files&lt;/h2&gt;

&lt;h3 id=&quot;env-file&quot;&gt;.env file&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CLIENT_TOKEN = &quot;your_token&quot;
CLIENT_ID = &quot;your_ID&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;packagejson&quot;&gt;package.json&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Bot Name or ID&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Short description of your bot and how to use it.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;index.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scripts&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;echo &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Error: no test specified&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;amp;&amp;amp; exit 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;node .&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;discord.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;^14.7.1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dotenv&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;^16.0.3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
		&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;bot&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Your Name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;license&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;LICENSE-TYPE&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;indexjs&quot;&gt;index.js&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//IMPORT modules needed for Discord Bot Base&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;REST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GatewayIntentBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Routes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;discord.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dotenv&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;intents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GatewayIntentBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Guilds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;REST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CLIENT_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Registering Commands, new commands go here...&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ping&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Replies with Pong!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;


&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Started refreshing application (/) commands.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applicationCommands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CLIENT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commands&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Successfully reloaded application (/) commands.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Logged in as &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Control what the commands will do...&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;interactionCreate&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isChatInputCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commandName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ping&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Pong!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// DO LOGIN&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CLIENT_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 12 Jan 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/discord-bot-base/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/discord-bot-base/</guid>
      </item>
    
      <item>
        <title>Using A Github Pages Website For Beginners</title>
        <description>&lt;p&gt;This is truly such a simple process you should have no issues. Just click “New Repo” on your profile and start the process. Then name it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{username}.github.io&lt;/code&gt; set it to public and click the checkbox to initialize this repository with a README. It will set up an empty repo with a simple readme file in it. Just put whatever index.html file you want in there and push the changes and you will have a website up and running at https://{username}.github.io. &lt;!--more--&gt;Once you have done that you can head over to the &lt;a href=&quot;&quot;&gt;“Using A Custom Domain With Github Pages”&lt;/a&gt; post and go through that one. Github pages has many “Actions” enabled and you can choose from a few different environments to have your site running on. Jekyll is a common choice and is really simple to set up. As always, reach out if you need help.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/14003326/216832796-c90b8607-edee-40c1-b4ec-9882fae9ca8e.jpg&quot; alt=&quot;maxresdefault&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Feb 2022 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/using-a-github-pages-website/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/using-a-github-pages-website/</guid>
      </item>
    
      <item>
        <title>Projects That Are Good For Beginners</title>
        <description>&lt;p&gt;When you first start contributing on GitHub it can be overwhelming, I found a list of good beginner projects which was quite long. I decided to make this one much shorter with some of the easiest languages to work on. I will be trimming this file into two. A longer one with more projects and this shorter one. Bookmark it and come back later as I update.
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#markdown&quot;&gt;Markdown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#javascript&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#python&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;markdown&quot;&gt;Markdown&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tldr-pages/tldr&quot;&gt;tldr-pages&lt;/a&gt; &lt;em&gt;(label: help-wanted)&lt;/em&gt; &lt;br /&gt; Collaborative cheatsheets for console commands.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/imolorhe/altair&quot;&gt;altair&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A beautiful feature-rich GraphQL Client for all platforms.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/FreezingMoon/AncientBeast&quot;&gt;Ancient Beast&lt;/a&gt; &lt;em&gt;(label: easy)&lt;/em&gt; &lt;br /&gt; Turn based strategy game where you 3d print a squad of creatures with unique abilities in order to defeat your enemies.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/appsmithorg/appsmith&quot;&gt;appsmith&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Drag &amp;amp; Drop internal tool builder&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/ava&quot;&gt;AVA&lt;/a&gt; &lt;em&gt;(label: good-for-beginner)&lt;/em&gt; &lt;br /&gt; Futuristic test runner.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A compiler for writing next generation JavaScript.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/BrandonArmand/Binari&quot;&gt;Binari&lt;/a&gt; &lt;em&gt;(label: up-for-grabs)&lt;/em&gt; &lt;br /&gt; Interactive code editor with a live binary tree visual designed to teach new developers the fundementals of dynamic programming.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/botpress/botpress&quot;&gt;Botpress&lt;/a&gt; &lt;em&gt;(label: contributor-friendly)&lt;/em&gt; &lt;br /&gt; The only sane way to build great bots.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/brave/brave-browser&quot;&gt;Brave Browser&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Desktop browser for macOS, Windows, and Linux.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cdnjs/cdnjs&quot;&gt;cdnjs&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; The best FOSS web front-end resource CDN&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jwu910/check-it-out&quot;&gt;Check It Out&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Check It Out is an ncurses-like CLI to let the user interactively navigate and select a git branch to check out.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;Create React App&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Create React apps with no build configuration.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cypress-io/cypress&quot;&gt;cypress&lt;/a&gt; &lt;em&gt;(label: good first issue)&lt;/em&gt; &lt;br /&gt; Fast, easy and reliable testing for anything that runs in a browser.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/electron/electron&quot;&gt;electron&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Build cross platform desktop apps with JavaScript, HTML, and CSS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/emberjs/ember.js&quot;&gt;Ember.js&lt;/a&gt; &lt;em&gt;(label: Good-for-New-Contributors)&lt;/em&gt; &lt;br /&gt; A JavaScript framework for creating ambitious web applications.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/emberjs/data&quot;&gt;Ember.js Data&lt;/a&gt; &lt;em&gt;(label: Good-for-New-Contributors)&lt;/em&gt; &lt;br /&gt; A data persistence library for Ember.js.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eslint/eslint&quot;&gt;ESLint&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A fully pluggable tool for identifying and reporting on patterns in JavaScript.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sindresorhus/eslint-plugin-unicorn&quot;&gt;eslint-plugin-unicorn&lt;/a&gt; &lt;em&gt;(label: good-for-beginner)&lt;/em&gt; &lt;br /&gt; Awesome ESLint rules.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fastify/fastify&quot;&gt;Fastify&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Fast and low overhead web framework, for Node.js.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/freeCodeCamp/freeCodeCamp&quot;&gt;freeCodeCamp&lt;/a&gt; &lt;em&gt;(label: first-timers-only)&lt;/em&gt; &lt;br /&gt; Open source codebase and curriculum. Learn to code and help nonprofits.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gatsbyjs/gatsby&quot;&gt;Gatsby.js&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Build blazing fast, modern apps and websites with React.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/TryGhost/Ghost&quot;&gt;Ghost&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Just a blogging platform&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/HabitRPG/habitica&quot;&gt;Habitica&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Habitica is a gamified task manager, webapp and android/ios app, really wonderful atmosphere. Guidance for contributing here (mongo, express, vue, node stack for webapp)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hoppscotch/hoppscotch&quot;&gt;Hoppscotch&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A free, fast and beautiful API request builder.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zeit/hyper&quot;&gt;Hyper&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; JS/HTML/CSS Terminal&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/openstreetmap/iD&quot;&gt;iD&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; The easy-to-use OpenStreetMap editor in JavaScript.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/jest&quot;&gt;Jest&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A complete and easy to set up JavaScript testing solution.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/json-editor/json-editor&quot;&gt;json-editor&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; JSON Schema Based Editor. JSON Editor takes a JSON Schema and uses it to generate an HTML form. It has full support for JSON Schema version 3 and 4 and can integrate with several popular CSS frameworks (bootstrap, spectre, tailwind).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wulkano/kap&quot;&gt;Kap&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; An open-source screen recorder built with web technology&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Kinto/kinto.js&quot;&gt;Kinto.js&lt;/a&gt; &lt;em&gt;(label: easy-pick)&lt;/em&gt; &lt;br /&gt; An offline-first JavaScript client leveraging the Kinto API for remote data synchronization.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Leaflet/Leaflet&quot;&gt;Leaflet&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; JavaScript library for mobile-friendly interactive maps.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jayehernandez/letra-extension&quot;&gt;Letra Extension&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Passively learn a new language every time you open a new tab.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mui-org/material-ui&quot;&gt;material-ui&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; React components for faster and easier web development. Build your own design system, or start with Material Design.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mattermost/mattermost-server/issues?utf8=✓&amp;amp;q=is:open+label:&amp;quot;Up+For+Grabs&amp;quot;+label:&amp;quot;Difficulty/1:Easy&amp;quot;+label:&amp;quot;Tech/Go&amp;quot;&quot;&gt;Mattermost&lt;/a&gt; &lt;em&gt;(label: n/a)&lt;/em&gt; &lt;br /&gt; Open source Slack-alternative in Golang and React&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oscarmorrison/md-page&quot;&gt;md-page&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Create a webpage with just markdown.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/meteor/meteor&quot;&gt;Meteor&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Meteor is an ultra-simple environment for building modern web applications.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mochajs/mocha&quot;&gt;Mocha&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Javascript test framework for Node.js and the browser.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/moment/moment&quot;&gt;Moment.js&lt;/a&gt; &lt;em&gt;(label: Up-For-Grabs)&lt;/em&gt; &lt;br /&gt; A lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/osmlab/name-suggestion-index&quot;&gt;name-suggestion-index&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Canonical common brand names for OpenStreetMap&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/NativeScript/NativeScript&quot;&gt;NativeScript&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; NativeScript is an open source framework for building truly native mobile apps with JavaScript. Use web skills, like Angular and Vue.js, FlexBox and CSS, and get native UI and performance on iOS and Android.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/netlify/netlify-cms&quot;&gt;netlify-cms&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Open source content management for your git workflow.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zeit/next.js&quot;&gt;Next.js&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A minimalistic framework for universal server-rendered React applications&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nodejs/node&quot;&gt;Node.js core&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; JavaScript runtime built on Chrome’s V8 JavaScript engine&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nukeop/nuclear&quot;&gt;nuclear&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Multiplatform music player that streams from free sources.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/processing/p5.js&quot;&gt;p5.js&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; p5.js is a client-side JS platform that empowers artists, designers, students, and anyone to learn to code and express themselves creatively on the web.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pixijs/pixi.js&quot;&gt;pixi.js&lt;/a&gt; &lt;em&gt;(label: 🤩 Good First PR)&lt;/em&gt; &lt;br /&gt; A 2D JavaScript Renderer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pouchdb/pouchdb&quot;&gt;PouchDB&lt;/a&gt; &lt;em&gt;(label: help-wanted)&lt;/em&gt; &lt;br /&gt; PouchDB is a pocket-sized database.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Zooz/predator&quot;&gt;Predator&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A powerful open-source platform for load testing APIs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/char0n/ramda-adjunct&quot;&gt;ramda-adjunct&lt;/a&gt; &lt;em&gt;(label: help-wanted)&lt;/em&gt; &lt;br /&gt; Ramda Adjunct is the most popular and most comprehensive set of functional utilities for use with Ramda, providing a variety of useful, well tested functions with excellent documentation.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react&quot;&gt;React&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A declarative, efficient, and flexible JavaScript library for building user interfaces.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Omar-Belghaouti/react-help-create&quot;&gt;React Help Create&lt;/a&gt; &lt;em&gt;(label: first-timers-only)&lt;/em&gt; &lt;br /&gt; This command line helps you create components, pages and even redux implementation for your react project.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;React Native&lt;/a&gt; &lt;em&gt;(label: Good-first-issue)&lt;/em&gt; &lt;br /&gt; A framework for building native apps with React.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/redfin/react-server&quot;&gt;React server&lt;/a&gt; &lt;em&gt;(label: good-first-contribution)&lt;/em&gt; &lt;br /&gt; React framework with server render for blazing fast page load and seamless transitions between pages in the browser.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/danilowoz/create-content-loader&quot;&gt;React-content-loader&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Tool to create your own react-content-loader easily.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/appbaseio/reactivesearch&quot;&gt;ReactiveSearch&lt;/a&gt; &lt;em&gt;(label: good-first-issue-:wave:)&lt;/em&gt; &lt;br /&gt; A UI components library for Elasticsearch: Available for React, Vue and React Native.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/reactjs/reactjs.org&quot;&gt;reactjs.org&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; The documenation website for reactjs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/honestbleeps/Reddit-Enhancement-Suite&quot;&gt;Reddit Enhancement Suite&lt;/a&gt; &lt;em&gt;(label: help-wanted)&lt;/em&gt; &lt;br /&gt; A browser extension to enhance the Reddit browsing experience.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Semantic-Org/Semantic-UI-React&quot;&gt;Semantic-UI-React&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; The official React integration for Semantic UI.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/serverless/serverless&quot;&gt;serverless&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; The Serverless Framework&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/SimplQ/simplQ-frontend&quot;&gt;SimplQ&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Free online queue manager for easy and instant crowd control.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sirixdb/sirix-svelte-front-end&quot;&gt;SirixDB&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A Svelte/Sapper based web front-end for SirixDB, which is a versioned NoSQL document store (XML and JSON) written in Java.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/stryker-mutator/stryker&quot;&gt;stryker&lt;/a&gt; &lt;em&gt;(label: 👶 Good first issue)&lt;/em&gt; &lt;br /&gt; The JavaScript mutation testing framework&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Superalgos/Superalgos&quot;&gt;Superalgos&lt;/a&gt; &lt;em&gt;(label: good first issue)&lt;/em&gt; &lt;br /&gt; A completely Open Source crypto trading bot rewarding good contributions with the SA(Superalgos)-Token.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sveltejs/svelte&quot;&gt;Svelte&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Component framework that runs at build time, converting your components into highly efficient imperative code that surgically updates the DOM.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swapagarwal/swag-for-dev&quot;&gt;swag-for-dev&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Swag opportunities for developers.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tessel/t2-cli&quot;&gt;Tessel 2 CLI&lt;/a&gt; &lt;em&gt;(label: contribution-starter)&lt;/em&gt; &lt;br /&gt; Command line interface to Tessel 2.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thamara/time-to-leave&quot;&gt;Time to Leave&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Working hours time tracker app based on Electron and Javascript.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ealush/vest&quot;&gt;Vest&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Validations framework inspired by unit testing frameworks.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/whyboris/Video-Hub-App&quot;&gt;Video Hub App&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Angular &amp;amp; Electron app for browsing and searching videos on your PC.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/videojs/video.js&quot;&gt;Video.js&lt;/a&gt; &lt;em&gt;(label: good first issue)&lt;/em&gt; &lt;br /&gt; The player framework&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;Vue CLI&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Standard Tooling for Vue.js Development&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vuejs/vue-router&quot;&gt;Vue Router&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; The official router for Vue.js.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vuejs/vue&quot;&gt;Vue.js&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; The Progressive JavaScript Framework.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vuejs/vuepress&quot;&gt;VuePress&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Minimalistic Vue-powered static site generator&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/webdriverio/webdriverio&quot;&gt;webdriver.io&lt;/a&gt; &lt;em&gt;(label: first-timers-only)&lt;/em&gt; &lt;br /&gt; Next-gen browser and mobile automation test framework for Node.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yarnpkg/yarn&quot;&gt;Yarn&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Fast, reliable, and secure dependency management.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ansible/ansible&quot;&gt;Ansible&lt;/a&gt; &lt;em&gt;(label: easyfix)&lt;/em&gt; &lt;br /&gt; A simple IT automation platform&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/arviz-devs/arviz&quot;&gt;ArviZ&lt;/a&gt; &lt;em&gt;(label: Beginner)&lt;/em&gt; &lt;br /&gt; Exploratory Anaylsis of Bayesian Models.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bokeh/bokeh&quot;&gt;Bokeh&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Bokeh is an interactive visualization library for modern web browsers.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/borgbackup/borg&quot;&gt;BorgBackup&lt;/a&gt; &lt;em&gt;(label: easy)&lt;/em&gt; &lt;br /&gt; Deduplicating backup program with compression and authenticated encryption.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/CiviWiki/OpenCiviWiki&quot;&gt;CiviWiki&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Building a Better Democracy for the Internet Age&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/issues?utf8=✓&amp;amp;q=is:open+is:issue+user:coala+label:difficulty/newcomer++no:assignee&quot;&gt;coala&lt;/a&gt; &lt;em&gt;(label: n/a)&lt;/em&gt; &lt;br /&gt; A unified command-line interface for linting and fixing all your code, regardless of the programming languages you use.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hpcaitech/ColossalAI&quot;&gt;Colossal-AI&lt;/a&gt; &lt;em&gt;(label: good first issue)&lt;/em&gt; &lt;br /&gt; An open-source deep learning system for large-scale model training and inference with high efficiency and low cost.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cookiecutter/cookiecutter&quot;&gt;cookiecutter&lt;/a&gt; &lt;em&gt;(label: good first issue)&lt;/em&gt; &lt;br /&gt; A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aio-libs/create-aio-app&quot;&gt;Create aio app&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A command line utility that creates the aiohttp template with the best practices.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/data-8/datascience&quot;&gt;datascience&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A Jupyter notebook Python library for introductory data science.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pydanny/cookiecutter-django&quot;&gt;django cookiecutter&lt;/a&gt; &lt;em&gt;(label: hacktoberfest)&lt;/em&gt; &lt;br /&gt; An implementation of Python for backend web development.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fabric/fabric&quot;&gt;Fabric&lt;/a&gt; &lt;em&gt;(label: Low-hanging-fruit)&lt;/em&gt; &lt;br /&gt; Pythonic remote execution and deployment.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/h2oai/wave&quot;&gt;H2O Wave&lt;/a&gt; &lt;em&gt;(label: good first issue)&lt;/em&gt; &lt;br /&gt; Realtime Web Apps and Dashboards framework for Python and R. Suited (not only) for AI audience.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sukeesh/Jarvis&quot;&gt;jarvis&lt;/a&gt; &lt;em&gt;(label: difficulty/newcomer)&lt;/em&gt; &lt;br /&gt; A personal assistant for Linux, MacOs and Windows based on Command line Interface.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swapagarwal/JARVIS-on-Messenger&quot;&gt;JARVIS-on-Messenger&lt;/a&gt; &lt;em&gt;(label: Low-Hanging-Fruit)&lt;/em&gt; &lt;br /&gt; 💬 A community-driven python bot that aims to be as simple as possible to serve humans with their everyday tasks http://m.me/J.A.R.V.I.S.on.Messenger&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jupyter/notebook&quot;&gt;Jupyter notebook&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Jupyter interactive notebook.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Kinto/kinto&quot;&gt;Kinto&lt;/a&gt; &lt;em&gt;(label: easy-pick)&lt;/em&gt; &lt;br /&gt; A lightweight JSON storage service with synchronisation and sharing abilities.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rbreaves/kinto&quot;&gt;Kinto.sh&lt;/a&gt; &lt;em&gt;(label: first-timers-only)&lt;/em&gt; &lt;br /&gt; Make Linux &amp;amp; Windows type like a mac.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mailpile/Mailpile&quot;&gt;Mailpile&lt;/a&gt; &lt;em&gt;(label: Low-Hanging-Fruit)&lt;/em&gt; &lt;br /&gt; A free &amp;amp; open modern, fast email client with user-friendly encryption and privacy features&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/matplotlib/matplotlib&quot;&gt;matplotlib&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mindsdb/mindsdb&quot;&gt;MindsDB&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; MindsDB is an open source AI layer for existing databases.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mitmproxy/mitmproxy&quot;&gt;mitmproxy&lt;/a&gt; &lt;em&gt;(label: help-wanted)&lt;/em&gt; &lt;br /&gt; An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gpodder/mygpo&quot;&gt;mygpo&lt;/a&gt; &lt;em&gt;(label: starter-issue)&lt;/em&gt; &lt;br /&gt; The webservice for gpodder.net, a libre web service that allows users to manage their podcast subscriptions and discover new content.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/python/mypy&quot;&gt;mypy&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; An optional static typing for python.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/open-metadata/OpenMetadata&quot;&gt;OpenMetadata&lt;/a&gt; &lt;em&gt;(label: good first issue)&lt;/em&gt; &lt;br /&gt; OpenMetadata is an all-in-one platform for data discovery, data quality, observability, governance, data lineage, and team collaboration.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/opsdroid/opsdroid&quot;&gt;opsdroid&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; An open source chat-ops bot framework.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pandas-dev/pandas&quot;&gt;pandas&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Flexible and powerful data analysis / manipulation library for Python, providing labeled data structures similar to R data.frame objects, statistical functions, and much more&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pytest-dev/pytest&quot;&gt;Pytest&lt;/a&gt; &lt;em&gt;(label: status:-easy)&lt;/em&gt; &lt;br /&gt; The pytest framework makes it easy to write small tests, yet scales to support complex functional testing.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/python-babel/babel&quot;&gt;Python Babel&lt;/a&gt; &lt;em&gt;(label: difficulty/low)&lt;/em&gt; &lt;br /&gt; The Python Internationalization Library.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alessandromaggio/pythonping&quot;&gt;pythonping&lt;/a&gt; &lt;em&gt;(label: good first issue)&lt;/em&gt; &lt;br /&gt; PythonPing is a simple library to execute ICMP pings natively in Python without resorting to spawning a shell.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pytorch/pytorch&quot;&gt;Pytorch&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; PyTorch is an open source machine learning library based on the Torch library, used for applications such as computer vision and natural language processing.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/saltstack/salt&quot;&gt;SaltStack&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Software to automate the management and configuration of any infrastructure or application at scale.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scikit-learn/scikit-learn&quot;&gt;scikit-learn&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Scikit-learn is a machine learning library for Python.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scrapy/scrapy&quot;&gt;scrapy&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A fast high-level web crawling &amp;amp; scraping framework for Python.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/LucasPilla/Sorting-Algorithms-Visualizer&quot;&gt;Sorting-Algorithms-Visualizer&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; A tool for visualizing sorting algorithms with a educational Wiki Page.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy&quot;&gt;SymPy&lt;/a&gt; &lt;em&gt;(label: Easy-to-Fix)&lt;/em&gt; &lt;br /&gt; A Python library for symbolic mathematics.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/legesher/tree-sitter-legesher-python&quot;&gt;tree-sitter-legesher-python&lt;/a&gt; &lt;em&gt;(label: Good-First-Issue)&lt;/em&gt; &lt;br /&gt; Learn and code in Python using your native language.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wemake-services/wemake-python-styleguide&quot;&gt;wemake-python-styleguide&lt;/a&gt; &lt;em&gt;(label: level:starter)&lt;/em&gt; &lt;br /&gt; The strictest and most opinionated python linter ever!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zulip/zulip&quot;&gt;Zulip&lt;/a&gt; &lt;em&gt;(label: good-first-issue)&lt;/em&gt; &lt;br /&gt; Powerful open source group chat.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 15 Feb 2022 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/good-for-beginners/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/good-for-beginners/</guid>
      </item>
    
      <item>
        <title>Using A Custom Domain With Github Pages</title>
        <description>&lt;p&gt;I use &lt;a href=&quot;https://domains.google.com/&quot;&gt;Google Domains&lt;/a&gt; for my own domains so I will be using that in my example. The process is pretty simple if you are comfortable with configuring things like DNS Records, A Names, CNAME records etc. Nothing more complicated that that. The first step is to purchase your domain name. After that is done navigave to the DNS section on your account. 
&lt;!--more--&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/14003326/216833078-a52954cd-9c18-4f32-8ea1-79ff02775d4d.jpg&quot; alt=&quot;custom-domain-names&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#custom-cname-records&quot;&gt;Custom CNAME Records&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#custom-a-records&quot;&gt;Custom A Records&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#head-over-to-github&quot;&gt;Head Over To Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#potential-errors&quot;&gt;Potential Errors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;custom-cname-records&quot;&gt;Custom CNAME Records&lt;/h2&gt;

&lt;p&gt;Now we are going to add a CNAME, during the process of setting up your custom domain in Github settings it will create a CNAME file in the root directory of your github pages site to compare to the CNAME here. For the CNAME we will add it like the image below. Set up both your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apex&lt;/code&gt; domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sitename.domain&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt; subdomain. Set them both for your username &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;your-domain-name&amp;gt;.com&lt;/code&gt;.&lt;/p&gt;

&lt;!-- Configure CNAME records image --&gt;

&lt;h2 id=&quot;custom-a-records&quot;&gt;Custom A Records&lt;/h2&gt;

&lt;p&gt;Then we will add 4 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; records in the same panel.&lt;/p&gt;

&lt;!-- Configure A NAME records image --&gt;

&lt;h2 id=&quot;head-over-to-github&quot;&gt;Head Over To Github&lt;/h2&gt;

&lt;p&gt;Once you have all of that set up you will head over to GitHub and go to the repository you want to serve up. It is common for most github users to have a repo named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{username}.github.io&lt;/code&gt; which will be served up on github.io as a subdomain using your username. Once you have made that repo (&lt;a href=&quot;https://gist.github.com/yosileyid/6716c82e95be5fb57fd0bc17fb2ad0b9&quot;&gt;follow this tutorial&lt;/a&gt; to accomplish that if you don’t have one) click on settings and head down to “Pages”. In there scroll down to custom domain name settings and add your domain name. After it passes the checks click on “Enforce HTTPS” and you should be all set. If you run into any issues feel free to reach out to me. My contact info can be found in my GitHub profile.&lt;/p&gt;

&lt;h2 id=&quot;potential-errors&quot;&gt;Potential Errors&lt;/h2&gt;

&lt;p&gt;If you do not have everything set up exactly as it should be Github will throw you an error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Both &amp;lt;your-domain-name&amp;gt;.com and its alternate name are improperly configured

Domain does not resolve to the GitHub Pages server. For more information, see Learn more (NotServedByPagesError). We recommend you add an A record pointed to our IP addresses, or an ALIAS record pointing to &amp;lt;your-username&amp;gt;.github.io.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you run into this, check your DNS settings over where you manage those settings and make sure everything is set correctly.&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Feb 2022 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/using-a-custom-domain/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/using-a-custom-domain/</guid>
      </item>
    
      <item>
        <title>How To Name Your Branches - The Method I Use</title>
        <description>&lt;p&gt;A branching strategy is a convention or a set of rules that specify when branches get created. It helps teams and developers by describing the naming guidelines of branches and elaborates on what use the branches should have, and so on. With a lack of appropriate naming conventions, the code maintenance team suffers numerous confusions and complications. Git branching naming convention supports the organic growth of a codebase in a systematic way. It helps in separating the work strategically. Here we will go over the two main categories of Git branches and we will go over them below.&lt;/p&gt;

&lt;h2 id=&quot;the-two-categories-of-git-branches&quot;&gt;The Two Categories of Git branches&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Regular Branches
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#main&quot;&gt;“main”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#development-dev&quot;&gt;“dev”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#qa-or-test-branch&quot;&gt;“test”&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Temporary Branches
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#fix&quot;&gt;“fix”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#wip&quot;&gt;“wip”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bug&quot;&gt;“bug”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#feat&quot;&gt;“feat”&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;regular-branches&quot;&gt;Regular Branches&lt;/h2&gt;

&lt;p&gt;Regular branches are branches that are available permanently in the repository, the naming convention of regular branches is easy and straightforward. They are usually named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; when you initialize the repository. If you are going to be making a large project it is a good idea to go ahead and name the other branches for the purposes of development. These are usually named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;, (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qa&lt;/code&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fix&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feat&lt;/code&gt;. We will go over each of these below and explain their uses.&lt;/p&gt;

&lt;h3 id=&quot;main&quot;&gt;Main&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch is the default branch available in the Git repository. Team members need to keep the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch stable and updated. It usually is stable and doesn’t allow direct check-in. Merging is possible only after code review.&lt;/p&gt;

&lt;h3 id=&quot;development-dev&quot;&gt;Development (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;, this is the main development branch, it restricts developers from adding any changes in the master branch directly. Before merging to the master, changes made in the dev branch undergo reviews and tests. Some large companies will require developers to add their name to the branch so they are easily tracked such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yosileyid-dev-audio.plugin&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;qa-or-test-branch&quot;&gt;QA or test branch&lt;/h3&gt;

&lt;p&gt;This branch holds the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qa&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; codes and automation testing of the implemented changes. It ensures a stable codebase for the production environment through the testing process.&lt;/p&gt;

&lt;h2 id=&quot;temporary-git-branches&quot;&gt;Temporary Git branches&lt;/h2&gt;

&lt;p&gt;Team members can create and delete these branches whenever it is required. They are not meant to stay in production. If they address the “Issue” then push them upstream to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; and delete the branch. Below are the most common names used for temp branches. There are a large number of recommended conventions and formats, following which could be a challenging task. The best practices of the Git branch naming convention are up to you and your company as to how to best use these. The methods I have used before as detailed below. One of the best methods to improve efficiency is by adding a word that categorizes the branch.&lt;/p&gt;

&lt;p&gt;The general idea is to use short words. The word selection could be anything that suits your working system. With the help of the category word, it is effortless to identify the purpose of the Git branch and attend to it. Prefixes such as; hotfix, feature, chore, or any other variant to categorize a task, increase the work requiring more decision-making while naming. With unique issue tracker IDs, you are essentially marking the task’s category in the tracker and adding many useful contexts.&lt;/p&gt;

&lt;h3 id=&quot;wip&quot;&gt;WIP&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wip-{feature.name}&lt;/code&gt;: Work in progress and needs your attention. Developers mostly work on several issues at a given time, and an issue tracker helps to connect the working branch with relevant tasks. It makes tracking team progress very easy.&lt;/p&gt;

&lt;h3 id=&quot;fix&quot;&gt;FIX&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fix-#{bug.number}&lt;/code&gt;: This usually fixes something that broke and doesnt require an entire rewrite of the code base.&lt;/p&gt;

&lt;h3 id=&quot;bug&quot;&gt;BUG&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bug-#{bug.number}&lt;/code&gt;: A bug or an error that needs fixing promptly. Using an external issue tracking ID in the branch name can facilitate tracking the progress from external systems.&lt;/p&gt;

&lt;h3 id=&quot;feat&quot;&gt;FEAT&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feat-name&lt;/code&gt;: A new feature to be implemented. This is usually something to merge into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; as it is added. It will be buggy and require testing from various devices and users before it can be pushed into production.&lt;/p&gt;

&lt;h3 id=&quot;using-hyphen-or-slash-separators&quot;&gt;Using hyphen or slash separators&lt;/h3&gt;

&lt;p&gt;The preference between a hyphen, slash, or underscore separator is based on you and your team’s choice. The idea is to keep it tightly consistent. Without the separators, the names become more challenging to read, creating confusion for the team. Using separators such as underscores, you can improve the readability and make the name more comfortable to manage. Separators are especially more significant if you are dealing with a vast number of branches. Many companies use the technique of adding the author’s name to the branch names such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yosileyid-#11457-bug&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yosileyid-#5562-feat&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yosileyid_#5562_feat&lt;/code&gt; and so on. This method helps to track the work of different developers. With further requirements, progressive additions are also possible. Using only numbers in the branch name’s issue ID can lead to more confusion for the team. Such confusion during the merging process of Git branches may lead to a lot of mistakes.&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Feb 2021 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/how-to-name-your-branches/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/how-to-name-your-branches/</guid>
      </item>
    
      <item>
        <title>Adding Multiple Categories in Posts</title>
        <description>&lt;h2 id=&quot;adding-multiple-categories-in-posts&quot;&gt;Adding Multiple Categories in Posts&lt;/h2&gt;

&lt;p&gt;To add categories in blog posts all you have to do is add a &lt;strong&gt;category&lt;/strong&gt; key with category values in frontmatter of the post :&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;jekyll'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;guides'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sample_category'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then to render this category using link and pages. All we need to do is,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a new file with [your_category_name].md inside categories folder.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy categories/sample_category.md file and replace the content in [your_category_name].md in that. (Please don’t copy the code below its just sample, since it renders the jekyll syntax dynamically)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Guides&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;your_category_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; Posts by Category : Adding Multiple Categories in Posts &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;card&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using the category, all the posts associated with the category will be listed on
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:4000/blog/categories/your_category_name&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Feb 2021 15:05:23 -0500</pubDate>
        <link>http://localhost:4000/blog/adding-categories-tags-in-posts/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/adding-categories-tags-in-posts/</guid>
      </item>
    
      <item>
        <title>Added Multi Author Support</title>
        <description>&lt;h2 id=&quot;now-multiple-authors-can-create-articles&quot;&gt;Now Multiple Authors Can Create Articles:&lt;/h2&gt;

&lt;p&gt;You can now create or collaborate with multiple authors,Especially when you are working with teams. Each author will have a unique page of her written articles also her profile widget in Articles written by his/her.&lt;/p&gt;

&lt;p&gt;For this every Author needs to have a unique username (without space) For eg. If Author is John Doe - the username should be &lt;strong&gt;johndoe&lt;/strong&gt; or &lt;strong&gt;john-doe&lt;/strong&gt; (without space).This key will be used by devlopr, to fetch individual author’s profile pages internally.&lt;/p&gt;

&lt;h3 id=&quot;configuring-authors-&quot;&gt;Configuring Authors :&lt;/h3&gt;

&lt;p&gt;Under _authors folder create a author details file (username.md) with his/her username (as described above). For eg. &lt;strong&gt;johndoe.md&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then add this frontmatter to describe the author in &lt;strong&gt;johndoe.md&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;John Doe&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Name of the Author&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;johndoe&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Username of the Author&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;bio&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Hi&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;John,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Developer&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Designer.&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Author Bio&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://johndoe.com&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Author Website URL&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;johndoe.png&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Profile Image (img path will be /assets/img/authors/johndoe.png)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mail@johndoe.com&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Author Email address&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;social&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Author Social profile links&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;github&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://github.com/johndoe&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;linkedin&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://www.linkedin.com/in/johndoe&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;youtube&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://www.youtube.com/channel/UCSfLBFFfNU9r6ihfei6VeJw&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;facebook&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://www.facebook.com/johndoe&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;twitter&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://www.twitter.com/johndoe&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;behance&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://behance.com/johndoe&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;instagram&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://instagram.com/johndoe&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;medium&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://medium.com/johndoe&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;telegram&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://telegram.com/johndoe&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dribbble&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://dribbble.com/johndoe&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;flickr&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://flickr.com/johndoe&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can create multiple authors similarly under _authors&lt;/p&gt;

&lt;p&gt;Next, copy the same frontmatter in _data/authors.yml (under individual author usernames) like this :&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Author 1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;johndoe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;John Doe&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;johndoe&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://johndoe.com&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;johndoe.png&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;bio&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Hi&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;John,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Developer&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Designer.&quot;&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mail@johndoe.com&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;social&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;github&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://github.com/johndoe&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;linkedin&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://www.linkedin.com/in/johndoe&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;youtube&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://www.youtube.com/channel/UCSfLBFFfNU9r6ihfei6VeJw&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;facebook&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://www.facebook.com/johndoe&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;twitter&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://www.twitter.com/johndoe&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;behance&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://behance.com/johndoe&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;instagram&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://instagram.com/johndoe&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;medium&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://medium.com/johndoe&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;telegram&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://telegram.com/johndoe&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dribbble&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://dribbble.com/johndoe&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;flickr&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://flickr.com/johndoe&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Author 2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;janedoe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Jane Doe&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;janedoe&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://janedoe.com&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jane.png&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;bio&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Designer&quot;&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mail@janedoe.com&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;social&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;github&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://github.com/janedoe&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;linkedin&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://www.linkedin.com/janedoe&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;youtube&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://www.youtube.com/channel/UCSfLBFFfNU9r6ihfei6VeJw&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;facebook&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://www.facebook.com/janedoe&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Likewise ! This will be helpful for the widgets. (About Author, Recent Articles).&lt;/p&gt;

&lt;h3 id=&quot;adding-author-to-post&quot;&gt;Adding Author to Post&lt;/h3&gt;

&lt;p&gt;When creating a new post, just add the author in frontmatter using the username of the author&lt;/p&gt;

&lt;p&gt;For eg, In 2020-10-24-demo-article.md&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Demo&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Article&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;janedoe&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;This is Jane Doe's Article&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now there will be Authors widget in Blog Sidebar, showing all authors like this :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/sujaykundu/image/upload/c_scale,fl_progressive,w_400/v1603700133/3_tiuar0.png&quot; alt=&quot;Author Sidebar Widget&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also a Author Profile Page will be created for Jane Doe to showcase her written articles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/sujaykundu/image/upload/c_scale,fl_progressive,w_400/v1603643237/1_ee3yke.png&quot; alt=&quot;Author Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also, below this article you can see the Author Profile Card , who has written the article too ! ;)&lt;/p&gt;

&lt;p&gt;Cheers ! Hope You enjoy this new feature. :D&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Oct 2020 16:05:23 -0400</pubDate>
        <link>http://localhost:4000/blog/added-multi-author-support/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/added-multi-author-support/</guid>
      </item>
    
      <item>
        <title>Added Latex Support</title>
        <description>&lt;h2 id=&quot;you-can-now-use-latex-to-write-equations-&quot;&gt;You can now use LaTex to write equations :&lt;/h2&gt;

&lt;p&gt;In the frontmatter of the article add this :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;usemathjax: true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After that, simply wrap the math symbols of your article with two double-dollar sign $$:&lt;/p&gt;

&lt;p&gt;For Example :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$$E=mc^2$$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should be able to see it in your post as: \(E=mc^2\)&lt;/p&gt;

&lt;p&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$$mean = \frac{\displaystyle\sum_{i=1}^{n} x_{i}}{n}$$&lt;/code&gt; to write :&lt;/p&gt;

\[mean = \frac{\displaystyle\sum_{i=1}^{n} x_{i}}{n}\]

&lt;ul&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k_{n+1} = n^2 + k_n^2 - k_{n-1}&lt;/code&gt; to write&lt;/li&gt;
&lt;/ul&gt;

\[k_{n+1} = n^2 + k_n^2 - k_{n-1}\]
</description>
        <pubDate>Sat, 24 Oct 2020 01:05:23 -0400</pubDate>
        <link>http://localhost:4000/blog/added-latex-equations-support/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/added-latex-equations-support/</guid>
      </item>
    
      <item>
        <title>Netlify CMS created this Article</title>
        <description>&lt;h2 id=&quot;hello-world&quot;&gt;Hello World&lt;/h2&gt;

&lt;p&gt;This page is a demo that shows everything you can do inside blog posts. Hi !&lt;/p&gt;

&lt;p&gt;We’ve included everything you need to create engaging posts about your work, and show off your case studies in a beautiful way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Obviously,&lt;/strong&gt;we’ve styled up &lt;em&gt;all the basic&lt;/em&gt; text formatting options available in &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;markdown&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can create lists:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simple bulleted lists&lt;/li&gt;
  &lt;li&gt;Like this one&lt;/li&gt;
  &lt;li&gt;Are cool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Numbered lists&lt;/li&gt;
  &lt;li&gt;Like this other one&lt;/li&gt;
  &lt;li&gt;Are great too&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can also add &lt;strong&gt;blockquotes&lt;/strong&gt;, which are shown at a larger width to help break up the layout and draw attention to key parts of your content:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Simple can be harder than complex: You have to work hard to get your thinking clean to make it simple. But it’s worth it in the end because once you get there, you can move mountains.”&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 23 May 2020 05:52:20 -0400</pubDate>
        <link>http://localhost:4000/blog/using-netlify-cms/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/using-netlify-cms/</guid>
      </item>
    
      <item>
        <title>Welcome to devlopr-jekyll !</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 22 May 2019 05:05:23 -0400</pubDate>
        <link>http://localhost:4000/blog/welcome-to-devlopr-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/welcome-to-devlopr-jekyll/</guid>
      </item>
    

    
      
        
      
    
      
    
      
        
          <item>
            <title></title>
            <description>&lt;h3&gt;   &lt;/h3&gt;

&lt;div id=&quot;categories&quot;&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#jekyll&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/jekyll&quot;&gt;jekyll&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;jekyll&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/adding-categories-tags-in-posts/&quot;&gt;Adding Multiple Categories in Posts&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/added-multi-author-support/&quot;&gt;Added Multi Author Support&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/added-latex-equations-support/&quot;&gt;Added Latex Support&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/using-netlify-cms/&quot;&gt;Netlify CMS created this Article&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/welcome-to-devlopr-jekyll/&quot;&gt;Welcome to devlopr-jekyll !&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#guides&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/guides&quot;&gt;guides&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;guides&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/adding-categories-tags-in-posts/&quot;&gt;Adding Multiple Categories in Posts&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#github&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/github&quot;&gt;github&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;github&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/using-a-github-pages-website/&quot;&gt;Using A Github Pages Website For Beginners&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/good-for-beginners/&quot;&gt;Projects That Are Good For Beginners&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/using-a-custom-domain/&quot;&gt;Using A Custom Domain With Github Pages&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/how-to-name-your-branches/&quot;&gt;How To Name Your Branches - The Method I Use&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#gh-pages&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/gh-pages&quot;&gt;gh-pages&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;gh-pages&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/using-a-github-pages-website/&quot;&gt;Using A Github Pages Website For Beginners&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/using-a-custom-domain/&quot;&gt;Using A Custom Domain With Github Pages&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#discord&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/discord&quot;&gt;discord&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;discord&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/discord-bot-base/&quot;&gt;Discord Bot Base Files And Setup&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#bot&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/bot&quot;&gt;bot&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;bot&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/discord-bot-base/&quot;&gt;Discord Bot Base Files And Setup&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#education&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/education&quot;&gt;education&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;education&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/freecodecamp-current-course/&quot;&gt;FreeCodeCamp Current Course Curriculem&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#npm&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/npm&quot;&gt;npm&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;npm&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/publish-to-npm/&quot;&gt;Publish Your Own NPM Package&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#nodejs&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/nodejs&quot;&gt;nodejs&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;nodejs&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/publish-to-npm/&quot;&gt;Publish Your Own NPM Package&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#javascript&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/javascript&quot;&gt;javascript&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;javascript&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/creating-an-api-using-hoppscotch/&quot;&gt;Creating a new API using Hoppscotch&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/mastering-oop-in-javascript/&quot;&gt;Mastering Object-Oriented Programming in JavaScript&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/javascript-classes-101/&quot;&gt;JavaScript Classes 101&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/react-states/&quot;&gt;React States&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/using-react-states/&quot;&gt;Using React States&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/polygondb-modern-and-flexible/&quot;&gt;Introducing PolygonDB&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#react&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/react&quot;&gt;react&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;react&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/react-states/&quot;&gt;React States&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/using-react-states/&quot;&gt;Using React States&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#web&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/web&quot;&gt;web&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;web&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/client-v-server-scripting/&quot;&gt;Client-Side vs. Server-Side Scripting&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/what-is-a-dynamic-website/&quot;&gt;What Is A Dynamic Website&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#ruby&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/ruby&quot;&gt;ruby&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;ruby&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/creating-a-gemfile/&quot;&gt;Creating a Gemfile for a Jekyll Plugin&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

&lt;/div&gt;

</description>
            <link>http://localhost:4000/blog/categories/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : Guides &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;12 Jan 2023&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/discord-bot-base/&quot;&gt;Discord Bot Base Files And Setup&lt;/a&gt;&lt;/li&gt;

&lt;/div&gt;
</description>
            <link>http://localhost:4000/blog/categories/bot/</link>
          </item>
        
      
    
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : Guides &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;12 Jan 2023&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/discord-bot-base/&quot;&gt;Discord Bot Base Files And Setup&lt;/a&gt;&lt;/li&gt;

&lt;/div&gt;
</description>
            <link>http://localhost:4000/blog/categories/discord/</link>
          </item>
        
      
    
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : Guides &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;

 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;18 Jan 2023&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;/blog/freecodecamp-current-course/&quot;&gt;FreeCodeCamp Current Course Curriculem&lt;/a&gt;&lt;/li&gt;

&lt;/div&gt;
</description>
            <link>http://localhost:4000/blog/categories/education/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Embed</title>
            <description>&lt;h1 id=&quot;embed&quot;&gt;Embed&lt;/h1&gt;

&lt;iframe src=&quot;https://discord.com/widget?id=1067868449826685060&amp;amp;theme=dark&quot; width=&quot;100%&quot; height=&quot;555&quot; allowtransparency=&quot;true&quot; frameborder=&quot;0&quot; sandbox=&quot;allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;
</description>
            <link>http://localhost:4000/embed/</link>
          </item>
        
      
    
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.gh-pages %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/gh-pages/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.github %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/github/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.guides %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/guides/</link>
          </item>
        
      
    
      
    
      
    
      
    
      
        
          <item>
            <title>Get Started</title>
            <description>## Getting Started - How to use “devlopr-jekyll” theme

## What's Jekyll ?

If you aren’t familiar with Jekyll yet, you should know that it is a static site generator. It will transform your plain text into static websites and blogs. No more databases, slow loading websites, risk of being hacked…just your content. And not only that, with Jekyll you get free hosting with GitHub Pages! If you are a beginner we recommend you start with [Jekyll’s Docs](https://jekyllrb.com/docs/installation/). Now, if you know how to use Jekyll, let’s move on to using this theme in Jekyll:

## Watch Tutorial

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/cXBEfpn0qrg?rel=0&amp;amp;controls=0&amp;amp;showinfo=0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;


### Steps to create your blog using devlopr-jekyll and Host using Github Pages :

&gt;  **Step 1.**  Fork the repo - [click here](https://github.com/sujaykundu777/devlopr-jekyll/fork)

![Devlopr Jekyll Repo](/assets/img/posts/fork1.PNG){:class=&quot;img-fluid&quot;}

&gt; **Step 2.** Use **your-github-username.github.io** as the new repo  ( Replace your-github-username with yours). Remember if you use the name other than your-github-username.github.io , your blog will be built using gh-pages branch.

![Devlopr Jekyll Repo](/assets/img/posts/fork2.PNG){:class=&quot;img-fluid&quot;}

![Devlopr Jekyll Repo](/assets/img/posts/fork3.PNG){:class=&quot;img-fluid&quot;}

&gt; **Step 3.** Clone the new repo locally to make changes :

![Devlopr Jekyll Repo](/assets/img/posts/fork31.PNG){:class=&quot;img-fluid&quot;}

![Devlopr Jekyll Repo](/assets/img/posts/fork32.PNG){:class=&quot;img-fluid&quot;}

![Devlopr Jekyll Repo](/assets/img/posts/fork33.PNG){:class=&quot;img-fluid&quot;}

```bash
 $ git clone https://github.com/yourusername/yourusername.github.io
 $ cd yourusername.github.io
 $ code .
```

&gt; **Step 4.** Open the files using VSCode and edit _config.yml and edit with your details:

- _config.yml file - replace with your own details
- _posts - Add your blog posts here
- _includes - You can replace the contents of the files with your data. (contains widgets)
- _assets/img - Add all your images here

![Devlopr Jekyll Repo](/assets/img/posts/fork34.PNG){:class=&quot;img-fluid&quot;}

&gt; **Step 5** - Install the development requirements:

### Set up local development environment

1. [Git](https://git-scm.com/)
2. [Ruby](https://www.ruby-lang.org/) and [Bundler](https://bundler.io/)
3. [VSCode](https://code.visualstudio.com/download)

We need ruby and bundler to build our site locally. After installation check if its working:

For ruby :

```bash
$ ruby -v
ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux-gnu]
```
For bundler :

```bash
$ gem install bundler
$ bundler -v
Bundler version 2.2.29
```
Add jekyll :

```bash
$ bundle update
$ bundle add jekyll
```
 This command will add the Jekyll gem to our Gemfile and install it to the ./vendor/bundle/ folder.

You can check the jekyll version

```
$ bundle exec jekyll -v
jekyll 4.2.0
```

&gt; **Step 6.** Install the gem dependencies by running the following command

```bash
$ bundle update
$ bundle install
```

&gt; **Step 7.** Serve the site locally by running the following command below:

```bash
$ bundle exec jekyll serve --watch
```
or you can also serve using :

```bash
$ jekyll serve
```

Visit [http://localhost:4000](http://localhost:4000) for development server

![Devlopr Jekyll Repo](/assets/img/posts/fork41.PNG){:class=&quot;img-fluid&quot;}


### Adding Content

Start populating your blog by adding your .md files in _posts. devlopr-jekyll already has a few examples.

#### YAML Post Example:

```yml
---
layout: post
title: Sample Post
author: Sujay Kundu
date: '2019-05-21 14:35:23 +0530'
category:
        - jekyll
summary: This is the summary for the sample post
thumbnail: sample.png
---

Hi ! This is sample post.

```

#### YAML Page Example:

```yml
---
layout: page
title: Sample Page
permalink: /sample-page/
---

Hi ! This is sample page.
```

#### Editing stylesheet

You’ll only work with a single file to edit/add theme style: assets/css/main.scss.

### Deploy your Changes

Once happy with your blog changes. Push your changes to master branch.

&gt; **Step 8.** Push Your Local Changes

```bash
 $ git add .
 $ git commit -m &quot;my new blog using devlopr-jekyll&quot;
 $ git push origin master
```

Visit your Github Repo settings ! Enable master branch as Github Pages Branch :

![Devlopr Jekyll Repo](/assets/img/posts/fork6.PNG){:class=&quot;img-fluid&quot;}

&gt; **Step 9.** Deploy your Blog :

![Devlopr Jekyll Repo](/assets/img/posts/fork7.PNG){:class=&quot;img-fluid&quot;}

&gt; Congrats ! On your new shining Blog !

You can visit the blog using [http://your-github-username.github.io](http://your-github-username.github.io).

</description>
            <link>http://localhost:4000/get-started/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.javascript %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/javascript/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Jekyll</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.jekyll %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/jekyll/</link>
          </item>
        
      
    
      
    
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.nodejs %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/nodejs/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.npm %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/npm/</link>
          </item>
        
      
    
      
        
          <item>
            <title>HDG Portfolio</title>
            <description># Group Development Portfolio

We work as a team to design beautiful websites and graphics. It doesn't work for everyone, but it is how we decided to work. We have done work in the past for the previous sites. Testimonials coming in the future. Each of these projects was headed by a member of our [team](/staff) please send an email if you need help finding anything. 

&lt;img class=&quot;img-fluid&quot; src=&quot;https://user-images.githubusercontent.com/14003326/218277127-c7dfffd7-b514-4d90-9498-e6d3b654fbce.png&quot; /&gt;

&lt;h2&gt;Websites&lt;/h2&gt;

&lt;p&gt;We create websites for various clients across many different fields, even game and hobby websites like for your roblox groups, or a tiktok fan page, we do it all. Send us an email today to get started with your web design package or visit our sales page&lt;!-- LINK /sale/ --&gt; and click through the process there.&lt;/p&gt;

&lt;dl&gt;

  &lt;dt&gt;
    &lt;a name=&quot;[hasidicdevs/website]&quot; href=&quot;https://hasidic.dev&quot;&gt;
      [hasidicdevs/website]
    &lt;/a&gt;
  &lt;/dt&gt;
  &lt;dd&gt;Website for the hasidic development group&lt;/dd&gt;
  &lt;dd&gt;Tags: &lt;strong&gt;#Ruby, #Jekyll, #Bundler&lt;/strong&gt;&lt;/dd&gt;

  &lt;dt&gt;
    &lt;a name=&quot;[fcc/Tribute Page]&quot; href=&quot;https://tribute-page.hasidicdev.repl.co/&quot; target=&quot;_blank&quot;&gt;
      [fcc/Tribute Page]
    &lt;/a&gt;
  &lt;/dt&gt;
  &lt;dd&gt;A tribute to Ryan Dahl, lead creator of Node.js and Deno.js frameworks&lt;/dd&gt;
  &lt;dd&gt;Tags: &lt;strong&gt;#React.js, #JavaScript&lt;/strong&gt;&lt;/dd&gt;

  &lt;dt&gt;
    &lt;a name=&quot;[yosileyid/Portfolio]&quot; href=&quot;https://portfolio.hasidicdev.repl.co/&quot; target=&quot;_blank&quot;&gt;
      [yosileyid/Portfolio]
    &lt;/a&gt;
  &lt;/dt&gt;
  &lt;dd&gt;A simple portfolio site for Yosi&lt;/dd&gt;
  &lt;dd&gt;Tags: &lt;strong&gt;#HTML5, #CSS3&lt;/strong&gt;&lt;/dd&gt;


  &lt;dt&gt;
    &lt;a name=&quot;[ocebots/website]&quot; href=&quot;https://Ocebots-Robotics.hasidicdev.repl.co&quot; target=&quot;_blank&quot;&gt;
      [ocebots/website]
    &lt;/a&gt;
  &lt;/dt&gt;
  &lt;dd&gt;A website for a local HS robotics group who participate in competitions and pair programming&lt;/dd&gt;
  &lt;dd&gt;Tags: &lt;strong&gt;#React.js, #Typescript&lt;/strong&gt;&lt;/dd&gt;

&lt;dl&gt;

&lt;p&gt;&lt;/p&gt;
&lt;img class=&quot;img-fluid&quot; src=&quot;https://user-images.githubusercontent.com/14003326/218279866-e04c9250-2bba-48fa-8ed7-b0581ceca369.png&quot; /&gt;

&lt;h2&gt;Applications&lt;/h2&gt;

&lt;p&gt;
We create rich web applications and websites so they are listed separately. We use a few tools to create our apps including React.js, Vue.js, Next.js and more. Projects are tagged with their corresponding framework. These all links to either the github repo or to a runable website. If you are interested in one of our bots listed below simply invite it to your server using the Oauth link provided.
&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;
    &lt;a name=&quot;[hasidicdevs/hdg-bot]&quot; href=&quot;https://github.com/hasidicdevs/hdg-bot&quot; target=&quot;_blank&quot; &gt;
      [hasidicdevs/hdg-bot]
    &lt;/a&gt;
  &lt;/dt&gt;
  &lt;dd&gt;Discord bot written in Node.js to be used in multiple servers for basic support help and quoting Torah and more from the sefaria API we built&lt;/dd&gt;
  &lt;dd&gt;Tags: &lt;strong&gt;#Node.js, #JavaScript&lt;/strong&gt;&lt;/dd&gt;

  &lt;dt&gt;
    &lt;a name=&quot;[hasidicdevs/hdg-dsb]&quot; href=&quot;https://github.com/yosileyid/dsb&quot; target=&quot;_blank&quot; &gt;
      [hasidicdevs/hdg-dsb]
    &lt;/a&gt;
  &lt;/dt&gt;
  &lt;dd&gt;Discord bot written in Node.js to be used in multiple servers to access documentation&lt;/dd&gt;
  &lt;dd&gt;Tags: &lt;strong&gt;#Node.js, #JavaScript&lt;/strong&gt;&lt;/dd&gt;

  &lt;dt&gt;
    &lt;a name=&quot;[hasidicdevs/hdg-api]&quot; href=&quot;https://github.com/yosileyid/dsb&quot; target=&quot;_blank&quot; &gt;
      [hasidicdevs/hdg-api]
    &lt;/a&gt;
  &lt;/dt&gt;
  &lt;dd&gt;A better implementation of the sefaria API project.&lt;/dd&gt;
  &lt;dd&gt;Tags: &lt;strong&gt;#Node.js, #JavaScript&lt;/strong&gt;&lt;/dd&gt;
&lt;dl&gt;
</description>
            <link>http://localhost:4000/portfolio/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Pros &amp; Cons</title>
            <description># Pros &amp; Cons 
## Hiring A Professional

**PROS:**

- No need to spend hours, days or weeks trying to learn the technology required to build and operate a website.
- You’ll get a modern, professional website you’re proud of … one that accurately represents your company and your brand.
- Visitors will have a good experience on all devices — desktop, tablet &amp; mobile.
- They can help you manage your site once it’s launched.
- They can develop your site’s content and overcome the curse of knowledge. The curse of knowledge is when you can’t remember what it’s like to not know everything you know. Thus, you omit critical information from your site because you assume everyone already knows what you know — when they really don’t.
- They can recommend ideas and help you avoid pitfalls you probably wouldn’t have thought of yourself

**CONS:**

- Will require an investment of several thousand dollars (most likely in the $5k-10k range) to create a new site from scratch or redesign an existing site.
- If you don’t understand web technology, you will be somewhat dependent on your website designer/developer to manage your site after it launches.</description>
            <link>http://localhost:4000/proscons/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.react %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/react/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.ruby %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/ruby/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Web Design Services</title>
            <description># {{page.title}}

&lt;img class=&quot;img-fluid&quot; src=&quot;https://user-images.githubusercontent.com/14003326/218242012-71a0dd3f-768f-43fa-a774-5e05aed21428.png&quot; /&gt;

When it comes time to design a website for your group, business, online shop or whatever your need is there are multiple factors to consider. Let us help walk you through the process of buying the domain name, designing the site and launching it. We have tried to include all the information we need to design you a robust user experience on your own website. When you are ready to go through the process of describing what you need for your site, send us an email to [github@hasidic.dev](mailto:github@hasidic.dev)

## Pricing

### Website Design

Pricing your website begins with deciding on what type of site you need. Whether it be a SPA (like an **extension** for a browser, a **bot** for your website or discord server, or a **web app**), a static website, or a dynamic one, we want to keep the cost to a minimum and also provide you with an amazing website that will turn into profit for you and your business. It is too difficult to really determine the pricing of your site on a web page, but in general it will cost somewhere between $500 (for a simple static 5 page website with media) up to $5,000 and sometimes even more depending on the amount of work involved. 

- [Types Of Websites](/types)
- [Pros &amp; Cons: Hiring A Professional](/proscons)

**Design Flow:** Along with your design package you will recieve a link to the developers dashboard tracker that will show you in real time how much work has been done on your site. We will also email you daily with an update and screenshots of how it is going. To start the process get in touch with us today by filling out our [contact form](/contact)

&lt;img class=&quot;img-fluid&quot; src=&quot;https://user-images.githubusercontent.com/14003326/220485683-16f10d7a-1096-400b-be96-e9424ebc13fc.jpg&quot; /&gt;

## Add-On Packages
After you have designed and launched your website you may need additional services. We offer the following packages conveniently for you.

### Website Maintenance
**$20/month**

Occasionally in the world of owning a website your site will crash for some reason or another, it happens and we are here to fix it. With our simple web maintenance package you can be assured we are always available for you if anything goes wrong on your site.

### Web Hosting:
**$10/month**

With HDG hosting your website it takes the pressure off of you about uptime and maintenance. We use Linux `nginx` servers running Node, Ruby and http services. We also handle all of your email and security issues. We used shared hosting to offer great prices for great services.

### Email Services
**$10/month** 

Organization email addresses to go with your domain. 

### Social Media Marketing: 
**$50/hr - $5000/project**

We have a few really good accounts on twitter who will promote your brand and company. No matter whether your goal is more followers or more business, we can help you out. $50/hr may seem much, but you need to understand it only takes a couple seconds to send out a tweet and your monthly rate is probably going to be something more like $10

- Hourly rate: **$50 - $150 / hr**
- Project-based rate: **$500 - $5,000**

### Website Optimization: 
**$100/hr**

Is your site running slow? Dow you want to speed up page load times? Send us an email. We will assess your site and what is causing it to run slow, we will then offer to fix it for you.

### Blog Posting
**$200/month**

We will create 20 top quality blog posts for your site per month, these will be 1500 words at a minimum and include at least 6 images and 4 code examples. We will custom craft it with SEO descriptions and keywords to reach the right audience for your business.

### [Portfolio of Past Work](/portfolio)</description>
            <link>http://localhost:4000/services/</link>
          </item>
        
      
    
      
    
      
        
          <item>
            <title>Our Sponsors</title>
            <description>Thanks to all the amazing contributors and our Backers for the support.</description>
            <link>http://localhost:4000/sponsors/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Hasidic Development Group Staff</title>
            <description># HDG (חד&quot;ג)

## Hasidic Development Group

We are (*as the name suggests*) a group of hasidic developers, although some of the members of our group are not hasidic or even jewish.... Currently we have five members and we work as a team to help contribute to open source projects on github, we all work together to create websites, applications and do graphic designs for those who need them. We welcome new programmers to [join our team](/careers) and grow with us into a robust web company. 

Membership begins with joining our discord server and getting to know us, then if you decide you would like to join and work with us you simply submit an application in the #joining-hdg channel. One of the members of the @hdg/hr team will reach out to you and invite you into a #interview room where you go through the process. If you are selected to be a member of our company we will assign you roles in discord and invite you to the repo and teams on github.

&lt;img class=&quot;img-fluid&quot; src=&quot;https://user-images.githubusercontent.com/14003326/220189844-c2f20b25-25ac-4672-a831-ebf8fcec4da2.png&quot; /&gt;

## Team Members
{% for author in site.authors %}

### [{{ author.name }}](/blog/authors/{{ author.username  }})

#### **{{ author.position }}**

{{ author.bio }}

{% endfor %}

&lt;img class=&quot;img-fluid&quot; src=&quot;https://user-images.githubusercontent.com/14003326/220488657-6c08a7be-5490-498f-ba7c-8138cf2cd22b.jpeg&quot; /&gt;  

## GitHub Teams

We love to contribute on GitHub and we designed our teams to be able to do that. If you own a repo and are stuck on some element of your program or website, Simply create a new issue in your repo and tag whatever team below applies to your situation and we will jump right in and help if we are able.

&lt;dl&gt;
  &lt;dt&gt;&lt;a href=&quot;https://github.com/orgs/hasidicdevs/teams/web&quot; target=&quot;_blank&quot;&gt;@hasidicdevs/web&lt;/a&gt;&lt;/dt&gt;  
    &lt;dd&gt;Whether this be with a web application {JavaScript || Python} or an extension / app that is installed in a browser like @ChromeOS or @mozilla, we want to help.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;https://github.com/orgs/hasidicdevs/teams/bots&quot; target=&quot;_blank&quot;&gt;@hasidicdevs/bots&lt;/a&gt;&lt;/dt&gt;  
    &lt;dd&gt;If you are using one of our prebuilt bot packages from npm and are having an issue, or if you are in one of our servers and are having an issue, just tag this team and raise the issue and we will come right in.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;https://github.com/orgs/hasidicdevs/teams/api&quot; target=&quot;_blank&quot;&gt;@hasidicdevs/api&lt;/a&gt;&lt;/dt&gt;  
    &lt;dd&gt;We are in the process of building a better API to use with sefaria.org if you have access to that and are running into an error please tag us and we will help resolve it.&lt;/dd&gt;
  &lt;dt&gt;&lt;a href=&quot;https://github.com/orgs/hasidicdevs/teams/graphics&quot; target=&quot;_blank&quot;&gt;@hasidicdevs/graphics&lt;/a&gt;&lt;/dt&gt;  
    &lt;dd&gt;If you need a new logo designed or some video editing done for tiktok, facebook, twitter or anything else Liam is amazing and he is available daily to assist you.&lt;/dd&gt;
&lt;/dl&gt;</description>
            <link>http://localhost:4000/staff/</link>
          </item>
        
      
    
      
        
          <item>
            <title>HDG Startup &amp; Launch</title>
            <description># {{page.title}}

## About Us

Thank you for stopping by our site, we are a small business startup. We are in the soft launch phase, we are still acquiring employees and partners. While we are in this phase we welcome you to join our server and learn more about us. We have decided to launch for a one year test period, from Erev Rosh Hashana 5784 - 5785. At that time we will hold our annual meeting of board members (Which can be viewed publicly in the [hdg-meetings](https://github.com/hasidicdevs/hdg-meetings) repo) and discuss our plans, whether we will incorporate, or dissolve.

We are unique in our business in that we keep **everything** public. All of our source code, all of our internals, all of our client code, everything. We brand this an &quot;[open source business](docs/business/model)&quot; we have no plans to change this in the future. We envision a business model where *&quot;many hands make light work&quot;*. Our client code is public because we do not know everything, so when a member of the GitHub community sees a flaw in our code they are free to fork that repo, change the code and push those changes to us. 

Of course we have an internal process to determine whether or not to accept that PR or not, but it reduces our workload significantly. For now we are an LLC licensed in the state of NY, but at our annual meeting in January we will decide to incorporate and file the appropriate papers needed for that. You can view all of our business papers in the [hdg-biz](https://github.com/hasidicdevs/hdg-biz) repo or right here on our site. They are listed below for ease of access.

## Business Papers

These are the founding forms for our business. We are remote workers from all over North America so our papers reflect that type of business model. We keep all of our work open source as well so we include that in our agreements and legal info. You can change any of these to fit your needs.

- [Articles of Organization:](docs/business/articles)
- [Partnership Agreement:](docs/business/partners)
- [Operating Agreement:](docs/business/operating)
- [Mission Statement](docs/business/mission)
- [Business Model](docs/business/model)
- [Business Plan](docs/business/plan)
- [By Laws](docs/business/bylaws)

If you are an investor looking for your next business to invest in we would seriously appreciate it and we will compensate you in time. If you are a developer looking to join an amazing company then search our [open positions](/careers) and please reach out.


## Yosi Leyid &lt;small&gt;President&lt;/small&gt;
[yosi@hasidic.dev](mailto:yosi@hasidic.dev)</description>
            <link>http://localhost:4000/startup/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Javascript Style Guide</title>
            <description># [hdg]: JavaScript Style Guide() {
&lt;p&gt;&lt;/p&gt;
&lt;img class=&quot;img-fluid&quot; src=&quot;https://user-images.githubusercontent.com/14003326/219082261-93f07dfe-1260-400a-8eff-b22c015a6cdc.jpeg&quot; /&gt;

You can download the bundled versions of it as a HTML file, or PDF this style guide was super long so we broke it up into smaller **“Chapters”** which you can view in the repo for this guide. We provide a copy on our site in the hopes it will help you as much as it has us. You can find a copy of the Javascript Header we use in conjunction with this guide on our site.

*A mostly reasonable approach to JavaScript*

&gt; **Note**: this guide assumes you are using [Babel](https://babeljs.io), and requires that you use [babel-preset-airbnb](https://npmjs.com/babel-preset-airbnb) or the equivalent. It also assumes you are installing shims/polyfills in your app, with [airbnb-browser-shims](https://npmjs.com/airbnb-browser-shims) or the equivalent.

## Table of Contents

  1. [Types](#types)
  1. [References](#references)
  1. [Objects](#objects)
  1. [Arrays](#arrays)
  1. [Destructuring](#destructuring)
  1. [Strings](#strings)
  1. [Functions](#functions)
  1. [Arrow Functions](#arrow-functions)
  1. [Classes &amp; Constructors](#classes--constructors)
  1. [Modules](#modules)
  1. [Iterators and Generators](#iterators-and-generators)
  1. [Properties](#properties)
  1. [Variables](#variables)
  1. [Hoisting](#hoisting)
  1. [Comparison Operators &amp; Equality](#comparison-operators--equality)
  1. [Blocks](#blocks)
  1. [Control Statements](#control-statements)
  1. [Comments](#comments)
  1. [Whitespace](#whitespace)
  1. [Commas](#commas)
  1. [Semicolons](#semicolons)
  1. [Type Casting &amp; Coercion](#type-casting--coercion)
  1. [Naming Conventions](#naming-conventions)
  1. [Accessors](#accessors)
  1. [Events](#events)
  1. [jQuery](#jquery)
  1. [ECMAScript 5 Compatibility](#ecmascript-5-compatibility)
  1. [ECMAScript 6+ (ES 2015+) Styles](#ecmascript-6-es-2015-styles)
  1. [Standard Library](#standard-library)
  1. [Testing](#testing)
  1. [Performance](#performance)
  1. [Resources](#resources)
  1. [In the Wild](#in-the-wild)
  1. [Translation](#translation)
  1. [The JavaScript Style Guide Guide](#the-javascript-style-guide-guide)
  1. [Chat With Us About JavaScript](#chat-with-us-about-javascript)
  1. [Contributors](#contributors)
  1. [License](#license)
  1. [Amendments](#amendments)
  1. [JavaScript Header Template](#javascript-header-template)

## Types

  &lt;a name=&quot;types--primitives&quot;&gt;&lt;/a&gt;&lt;a name=&quot;1.1&quot;&gt;&lt;/a&gt;
  - [1.1](#types--primitives) **Primitives**: When you access a primitive type you work directly on its value.

    - `string`
    - `number`
    - `boolean`
    - `null`
    - `undefined`
    - `symbol`
    - `bigint`

    &lt;br /&gt;

    ```javascript
    const foo = 1;
    let bar = foo;

    bar = 9;

    console.log(foo, bar); // =&gt; 1, 9
    ```

    - Symbols and BigInts cannot be faithfully polyfilled, so they should not be used when targeting browsers/environments that don’t support them natively.

  &lt;a name=&quot;types--complex&quot;&gt;&lt;/a&gt;&lt;a name=&quot;1.2&quot;&gt;&lt;/a&gt;
  - [1.2](#types--complex)  **Complex**: When you access a complex type you work on a reference to its value.

    - `object`
    - `array`
    - `function`

    &lt;br /&gt;

    ```javascript
    const foo = [1, 2];
    const bar = foo;

    bar[0] = 9;

    console.log(foo[0], bar[0]); // =&gt; 9, 9
    ```

**[⬆ back to top](#table-of-contents)**

## References

  &lt;a name=&quot;references--prefer-const&quot;&gt;&lt;/a&gt;&lt;a name=&quot;2.1&quot;&gt;&lt;/a&gt;
  - [2.1](#references--prefer-const) Use `const` for all of your references; avoid using `var`. eslint: [`prefer-const`](https://eslint.org/docs/rules/prefer-const), [`no-const-assign`](https://eslint.org/docs/rules/no-const-assign)

    &gt; Why? This ensures that you can’t reassign your references, which can lead to bugs and difficult to comprehend code.

    ```javascript
    // bad
    var a = 1;
    var b = 2;

    // good
    const a = 1;
    const b = 2;
    ```

  &lt;a name=&quot;references--disallow-var&quot;&gt;&lt;/a&gt;&lt;a name=&quot;2.2&quot;&gt;&lt;/a&gt;
  - [2.2](#references--disallow-var) If you must reassign references, use `let` instead of `var`. eslint: [`no-var`](https://eslint.org/docs/rules/no-var)

    &gt; Why? `let` is block-scoped rather than function-scoped like `var`.

    ```javascript
    // bad
    var count = 1;
    if (true) {
      count += 1;
    }

    // good, use the let.
    let count = 1;
    if (true) {
      count += 1;
    }
    ```

  &lt;a name=&quot;references--block-scope&quot;&gt;&lt;/a&gt;&lt;a name=&quot;2.3&quot;&gt;&lt;/a&gt;
  - [2.3](#references--block-scope) Note that both `let` and `const` are block-scoped, whereas `var` is function-scoped.

    ```javascript
    // const and let only exist in the blocks they are defined in.
    {
      let a = 1;
      const b = 1;
      var c = 1;
    }
    console.log(a); // ReferenceError
    console.log(b); // ReferenceError
    console.log(c); // Prints 1
    ```

    In the above code, you can see that referencing `a` and `b` will produce a ReferenceError, while `c` contains the number. This is because `a` and `b` are block scoped, while `c` is scoped to the containing function.

**[⬆ back to top](#table-of-contents)**

## Objects

  &lt;a name=&quot;objects--no-new&quot;&gt;&lt;/a&gt;&lt;a name=&quot;3.1&quot;&gt;&lt;/a&gt;
  - [3.1](#objects--no-new) Use the literal syntax for object creation. eslint: [`no-new-object`](https://eslint.org/docs/rules/no-new-object)

    ```javascript
    // bad
    const item = new Object();

    // good
    const item = {};
    ```

  &lt;a name=&quot;es6-computed-properties&quot;&gt;&lt;/a&gt;&lt;a name=&quot;3.4&quot;&gt;&lt;/a&gt;
  - [3.2](#es6-computed-properties) Use computed property names when creating objects with dynamic property names.

    &gt; Why? They allow you to define all the properties of an object in one place.

    ```javascript

    function getKey(k) {
      return `a key named ${k}`;
    }

    // bad
    const obj = {
      id: 5,
      name: 'San Francisco',
    };
    obj[getKey('enabled')] = true;

    // good
    const obj = {
      id: 5,
      name: 'San Francisco',
      [getKey('enabled')]: true,
    };
    ```

  &lt;a name=&quot;es6-object-shorthand&quot;&gt;&lt;/a&gt;&lt;a name=&quot;3.5&quot;&gt;&lt;/a&gt;
  - [3.3](#es6-object-shorthand) Use object method shorthand. eslint: [`object-shorthand`](https://eslint.org/docs/rules/object-shorthand)

    ```javascript
    // bad
    const atom = {
      value: 1,

      addValue: function (value) {
        return atom.value + value;
      },
    };

    // good
    const atom = {
      value: 1,

      addValue(value) {
        return atom.value + value;
      },
    };
    ```

  &lt;a name=&quot;es6-object-concise&quot;&gt;&lt;/a&gt;&lt;a name=&quot;3.6&quot;&gt;&lt;/a&gt;
  - [3.4](#es6-object-concise) Use property value shorthand. eslint: [`object-shorthand`](https://eslint.org/docs/rules/object-shorthand)

    &gt; Why? It is shorter and descriptive.

    ```javascript
    const lukeSkywalker = 'Luke Skywalker';

    // bad
    const obj = {
      lukeSkywalker: lukeSkywalker,
    };

    // good
    const obj = {
      lukeSkywalker,
    };
    ```

  &lt;a name=&quot;objects--grouped-shorthand&quot;&gt;&lt;/a&gt;&lt;a name=&quot;3.7&quot;&gt;&lt;/a&gt;
  - [3.5](#objects--grouped-shorthand) Group your shorthand properties at the beginning of your object declaration.

    &gt; Why? It’s easier to tell which properties are using the shorthand.

    ```javascript
    const anakinSkywalker = 'Anakin Skywalker';
    const lukeSkywalker = 'Luke Skywalker';

    // bad
    const obj = {
      episodeOne: 1,
      twoJediWalkIntoACantina: 2,
      lukeSkywalker,
      episodeThree: 3,
      mayTheFourth: 4,
      anakinSkywalker,
    };

    // good
    const obj = {
      lukeSkywalker,
      anakinSkywalker,
      episodeOne: 1,
      twoJediWalkIntoACantina: 2,
      episodeThree: 3,
      mayTheFourth: 4,
    };
    ```

  &lt;a name=&quot;objects--quoted-props&quot;&gt;&lt;/a&gt;&lt;a name=&quot;3.8&quot;&gt;&lt;/a&gt;
  - [3.6](#objects--quoted-props) Only quote properties that are invalid identifiers. eslint: [`quote-props`](https://eslint.org/docs/rules/quote-props)

    &gt; Why? In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.

    ```javascript
    // bad
    const bad = {
      'foo': 3,
      'bar': 4,
      'data-blah': 5,
    };

    // good
    const good = {
      foo: 3,
      bar: 4,
      'data-blah': 5,
    };
    ```

  &lt;a name=&quot;objects--prototype-builtins&quot;&gt;&lt;/a&gt;
  - [3.7](#objects--prototype-builtins) Do not call `Object.prototype` methods directly, such as `hasOwnProperty`, `propertyIsEnumerable`, and `isPrototypeOf`. eslint: [`no-prototype-builtins`](https://eslint.org/docs/rules/no-prototype-builtins)

    &gt; Why? These methods may be shadowed by properties on the object in question - consider `{ hasOwnProperty: false }` - or, the object may be a null object (`Object.create(null)`).

    ```javascript
    // bad
    console.log(object.hasOwnProperty(key));

    // good
    console.log(Object.prototype.hasOwnProperty.call(object, key));

    // best
    const has = Object.prototype.hasOwnProperty; // cache the lookup once, in module scope.
    console.log(has.call(object, key));
    /* or */
    import has from 'has'; // https://www.npmjs.com/package/has
    console.log(has(object, key));
    /* or */
    console.log(Object.hasOwn(object, key)); // https://www.npmjs.com/package/object.hasown
    ```

  &lt;a name=&quot;objects--rest-spread&quot;&gt;&lt;/a&gt;
  - [3.8](#objects--rest-spread) Prefer the object spread syntax over [`Object.assign`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) to shallow-copy objects. Use the object rest parameter syntax to get a new object with certain properties omitted. eslint: [`prefer-object-spread`](https://eslint.org/docs/rules/prefer-object-spread)

    ```javascript
    // very bad
    const original = { a: 1, b: 2 };
    const copy = Object.assign(original, { c: 3 }); // this mutates `original` ಠ_ಠ
    delete copy.a; // so does this

    // bad
    const original = { a: 1, b: 2 };
    const copy = Object.assign({}, original, { c: 3 }); // copy =&gt; { a: 1, b: 2, c: 3 }

    // good
    const original = { a: 1, b: 2 };
    const copy = { ...original, c: 3 }; // copy =&gt; { a: 1, b: 2, c: 3 }

    const { a, ...noA } = copy; // noA =&gt; { b: 2, c: 3 }
    ```

**[⬆ back to top](#table-of-contents)**

## Arrays

  &lt;a name=&quot;arrays--literals&quot;&gt;&lt;/a&gt;&lt;a name=&quot;4.1&quot;&gt;&lt;/a&gt;
  - [4.1](#arrays--literals) Use the literal syntax for array creation. eslint: [`no-array-constructor`](https://eslint.org/docs/rules/no-array-constructor)

    ```javascript
    // bad
    const items = new Array();

    // good
    const items = [];
    ```

  &lt;a name=&quot;arrays--push&quot;&gt;&lt;/a&gt;&lt;a name=&quot;4.2&quot;&gt;&lt;/a&gt;
  - [4.2](#arrays--push) Use [Array#push](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push) instead of direct assignment to add items to an array.

    ```javascript
    const someStack = [];

    // bad
    someStack[someStack.length] = 'abracadabra';

    // good
    someStack.push('abracadabra');
    ```

  &lt;a name=&quot;es6-array-spreads&quot;&gt;&lt;/a&gt;&lt;a name=&quot;4.3&quot;&gt;&lt;/a&gt;
  - [4.3](#es6-array-spreads) Use array spreads `...` to copy arrays.

    ```javascript
    // bad
    const len = items.length;
    const itemsCopy = [];
    let i;

    for (i = 0; i &lt; len; i += 1) {
      itemsCopy[i] = items[i];
    }

    // good
    const itemsCopy = [...items];
    ```

  &lt;a name=&quot;arrays--from&quot;&gt;&lt;/a&gt;
  &lt;a name=&quot;arrays--from-iterable&quot;&gt;&lt;/a&gt;&lt;a name=&quot;4.4&quot;&gt;&lt;/a&gt;
  - [4.4](#arrays--from-iterable) To convert an iterable object to an array, use spreads `...` instead of [`Array.from`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from)

    ```javascript
    const foo = document.querySelectorAll('.foo');

    // good
    const nodes = Array.from(foo);

    // best
    const nodes = [...foo];
    ```

  &lt;a name=&quot;arrays--from-array-like&quot;&gt;&lt;/a&gt;
  - [4.5](#arrays--from-array-like) Use [`Array.from`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from) for converting an array-like object to an array.

    ```javascript
    const arrLike = { 0: 'foo', 1: 'bar', 2: 'baz', length: 3 };

    // bad
    const arr = Array.prototype.slice.call(arrLike);

    // good
    const arr = Array.from(arrLike);
    ```

  &lt;a name=&quot;arrays--mapping&quot;&gt;&lt;/a&gt;
  - [4.6](#arrays--mapping) Use [`Array.from`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from) instead of spread `...` for mapping over iterables, because it avoids creating an intermediate array.

    ```javascript
    // bad
    const baz = [...foo].map(bar);

    // good
    const baz = Array.from(foo, bar);
    ```

  &lt;a name=&quot;arrays--callback-return&quot;&gt;&lt;/a&gt;&lt;a name=&quot;4.5&quot;&gt;&lt;/a&gt;
  - [4.7](#arrays--callback-return) Use return statements in array method callbacks. It’s ok to omit the return if the function body consists of a single statement returning an expression without side effects, following [8.2](#arrows--implicit-return). eslint: [`array-callback-return`](https://eslint.org/docs/rules/array-callback-return)

    ```javascript
    // good
    [1, 2, 3].map((x) =&gt; {
      const y = x + 1;
      return x * y;
    });

    // good
    [1, 2, 3].map((x) =&gt; x + 1);

    // bad - no returned value means `acc` becomes undefined after the first iteration
    [[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) =&gt; {
      const flatten = acc.concat(item);
    });

    // good
    [[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) =&gt; {
      const flatten = acc.concat(item);
      return flatten;
    });

    // bad
    inbox.filter((msg) =&gt; {
      const { subject, author } = msg;
      if (subject === 'Mockingbird') {
        return author === 'Harper Lee';
      } else {
        return false;
      }
    });

    // good
    inbox.filter((msg) =&gt; {
      const { subject, author } = msg;
      if (subject === 'Mockingbird') {
        return author === 'Harper Lee';
      }

      return false;
    });
    ```

  &lt;a name=&quot;arrays--bracket-newline&quot;&gt;&lt;/a&gt;
  - [4.8](#arrays--bracket-newline) Use line breaks after open and before close array brackets if an array has multiple lines

    ```javascript
    // bad
    const arr = [
      [0, 1], [2, 3], [4, 5],
    ];

    const objectInArray = [{
      id: 1,
    }, {
      id: 2,
    }];

    const numberInArray = [
      1, 2,
    ];

    // good
    const arr = [[0, 1], [2, 3], [4, 5]];

    const objectInArray = [
      {
        id: 1,
      },
      {
        id: 2,
      },
    ];

    const numberInArray = [
      1,
      2,
    ];
    ```

**[⬆ back to top](#table-of-contents)**

## Destructuring

  &lt;a name=&quot;destructuring--object&quot;&gt;&lt;/a&gt;&lt;a name=&quot;5.1&quot;&gt;&lt;/a&gt;
  - [5.1](#destructuring--object) Use object destructuring when accessing and using multiple properties of an object. eslint: [`prefer-destructuring`](https://eslint.org/docs/rules/prefer-destructuring)

    &gt; Why? Destructuring saves you from creating temporary references for those properties, and from repetitive access of the object. Repeating object access creates more repetitive code, requires more reading, and creates more opportunities for mistakes. Destructuring objects also provides a single site of definition of the object structure that is used in the block, rather than requiring reading the entire block to determine what is used.

    ```javascript
    // bad
    function getFullName(user) {
      const firstName = user.firstName;
      const lastName = user.lastName;

      return `${firstName} ${lastName}`;
    }

    // good
    function getFullName(user) {
      const { firstName, lastName } = user;
      return `${firstName} ${lastName}`;
    }

    // best
    function getFullName({ firstName, lastName }) {
      return `${firstName} ${lastName}`;
    }
    ```

  &lt;a name=&quot;destructuring--array&quot;&gt;&lt;/a&gt;&lt;a name=&quot;5.2&quot;&gt;&lt;/a&gt;
  - [5.2](#destructuring--array) Use array destructuring. eslint: [`prefer-destructuring`](https://eslint.org/docs/rules/prefer-destructuring)

    ```javascript
    const arr = [1, 2, 3, 4];

    // bad
    const first = arr[0];
    const second = arr[1];

    // good
    const [first, second] = arr;
    ```

  &lt;a name=&quot;destructuring--object-over-array&quot;&gt;&lt;/a&gt;&lt;a name=&quot;5.3&quot;&gt;&lt;/a&gt;
  - [5.3](#destructuring--object-over-array) Use object destructuring for multiple return values, not array destructuring.

    &gt; Why? You can add new properties over time or change the order of things without breaking call sites.

    ```javascript
    // bad
    function processInput(input) {
      // then a miracle occurs
      return [left, right, top, bottom];
    }

    // the caller needs to think about the order of return data
    const [left, __, top] = processInput(input);

    // good
    function processInput(input) {
      // then a miracle occurs
      return { left, right, top, bottom };
    }

    // the caller selects only the data they need
    const { left, top } = processInput(input);
    ```

**[⬆ back to top](#table-of-contents)**

## Strings

  &lt;a name=&quot;strings--quotes&quot;&gt;&lt;/a&gt;&lt;a name=&quot;6.1&quot;&gt;&lt;/a&gt;
  - [6.1](#strings--quotes) Use single quotes `''` for strings. eslint: [`quotes`](https://eslint.org/docs/rules/quotes)

    ```javascript
    // bad
    const name = &quot;Capt. Janeway&quot;;

    // bad - template literals should contain interpolation or newlines
    const name = `Capt. Janeway`;

    // good
    const name = 'Capt. Janeway';
    ```

  &lt;a name=&quot;strings--line-length&quot;&gt;&lt;/a&gt;&lt;a name=&quot;6.2&quot;&gt;&lt;/a&gt;
  - [6.2](#strings--line-length) Strings that cause the line to go over 100 characters should not be written across multiple lines using string concatenation.

    &gt; Why? Broken strings are painful to work with and make code less searchable.

    ```javascript
    // bad
    const errorMessage = 'This is a super long error that was thrown because \
    of Batman. When you stop to think about how Batman had anything to do \
    with this, you would get nowhere \
    fast.';

    // bad
    const errorMessage = 'This is a super long error that was thrown because ' +
      'of Batman. When you stop to think about how Batman had anything to do ' +
      'with this, you would get nowhere fast.';

    // good
    const errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';
    ```

  &lt;a name=&quot;es6-template-literals&quot;&gt;&lt;/a&gt;&lt;a name=&quot;6.4&quot;&gt;&lt;/a&gt;
  - [6.3](#es6-template-literals) When programmatically building up strings, use template strings instead of concatenation. eslint: [`prefer-template`](https://eslint.org/docs/rules/prefer-template) [`template-curly-spacing`](https://eslint.org/docs/rules/template-curly-spacing)

    &gt; Why? Template strings give you a readable, concise syntax with proper newlines and string interpolation features.

    ```javascript
    // bad
    function sayHi(name) {
      return 'How are you, ' + name + '?';
    }

    // bad
    function sayHi(name) {
      return ['How are you, ', name, '?'].join();
    }

    // bad
    function sayHi(name) {
      return `How are you, ${ name }?`;
    }

    // good
    function sayHi(name) {
      return `How are you, ${name}?`;
    }
    ```

  &lt;a name=&quot;strings--eval&quot;&gt;&lt;/a&gt;&lt;a name=&quot;6.5&quot;&gt;&lt;/a&gt;
  - [6.4](#strings--eval) Never use `eval()` on a string, it opens too many vulnerabilities. eslint: [`no-eval`](https://eslint.org/docs/rules/no-eval)

  &lt;a name=&quot;strings--escaping&quot;&gt;&lt;/a&gt;
  - [6.5](#strings--escaping) Do not unnecessarily escape characters in strings. eslint: [`no-useless-escape`](https://eslint.org/docs/rules/no-useless-escape)

    &gt; Why? Backslashes harm readability, thus they should only be present when necessary.

    ```javascript
    // bad
    const foo = '\'this\' \i\s \&quot;quoted\&quot;';

    // good
    const foo = '\'this\' is &quot;quoted&quot;';
    const foo = `my name is '${name}'`;
    ```

**[⬆ back to top](#table-of-contents)**

## Functions

  &lt;a name=&quot;functions--declarations&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.1&quot;&gt;&lt;/a&gt;
  - [7.1](#functions--declarations) Use named function expressions instead of function declarations. eslint: [`func-style`](https://eslint.org/docs/rules/func-style)

    &gt; Why? Function declarations are hoisted, which means that it’s easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability. If you find that a function’s definition is large or complex enough that it is interfering with understanding the rest of the file, then perhaps it’s time to extract it to its own module! Don’t forget to explicitly name the expression, regardless of whether or not the name is inferred from the containing variable (which is often the case in modern browsers or when using compilers such as Babel). This eliminates any assumptions made about the Error’s call stack. ([Discussion](https://github.com/airbnb/javascript/issues/794))

    ```javascript
    // bad
    function foo() {
      // ...
    }

    // bad
    const foo = function () {
      // ...
    };

    // good
    // lexical name distinguished from the variable-referenced invocation(s)
    const short = function longUniqueMoreDescriptiveLexicalFoo() {
      // ...
    };
    ```

  &lt;a name=&quot;functions--iife&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.2&quot;&gt;&lt;/a&gt;
  - [7.2](#functions--iife) Wrap immediately invoked function expressions in parentheses. eslint: [`wrap-iife`](https://eslint.org/docs/rules/wrap-iife)

    &gt; Why? An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.

    ```javascript
    // immediately-invoked function expression (IIFE)
    (function () {
      console.log('Welcome to the Internet. Please follow me.');
    }());
    ```

  &lt;a name=&quot;functions--in-blocks&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.3&quot;&gt;&lt;/a&gt;
  - [7.3](#functions--in-blocks) Never declare a function in a non-function block (`if`, `while`, etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears. eslint: [`no-loop-func`](https://eslint.org/docs/rules/no-loop-func)

  &lt;a name=&quot;functions--note-on-blocks&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.4&quot;&gt;&lt;/a&gt;
  - [7.4](#functions--note-on-blocks) **Note:** ECMA-262 defines a `block` as a list of statements. A function declaration is not a statement.

    ```javascript
    // bad
    if (currentUser) {
      function test() {
        console.log('Nope.');
      }
    }

    // good
    let test;
    if (currentUser) {
      test = () =&gt; {
        console.log('Yup.');
      };
    }
    ```

  &lt;a name=&quot;functions--arguments-shadow&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.5&quot;&gt;&lt;/a&gt;
  - [7.5](#functions--arguments-shadow) Never name a parameter `arguments`. This will take precedence over the `arguments` object that is given to every function scope.

    ```javascript
    // bad
    function foo(name, options, arguments) {
      // ...
    }

    // good
    function foo(name, options, args) {
      // ...
    }
    ```

  &lt;a name=&quot;es6-rest&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.6&quot;&gt;&lt;/a&gt;
  - [7.6](#es6-rest) Never use `arguments`, opt to use rest syntax `...` instead. eslint: [`prefer-rest-params`](https://eslint.org/docs/rules/prefer-rest-params)

    &gt; Why? `...` is explicit about which arguments you want pulled. Plus, rest arguments are a real Array, and not merely Array-like like `arguments`.

    ```javascript
    // bad
    function concatenateAll() {
      const args = Array.prototype.slice.call(arguments);
      return args.join('');
    }

    // good
    function concatenateAll(...args) {
      return args.join('');
    }
    ```

  &lt;a name=&quot;es6-default-parameters&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.7&quot;&gt;&lt;/a&gt;
  - [7.7](#es6-default-parameters) Use default parameter syntax rather than mutating function arguments.

    ```javascript
    // really bad
    function handleThings(opts) {
      // No! We shouldn’t mutate function arguments.
      // Double bad: if opts is falsy it'll be set to an object which may
      // be what you want but it can introduce subtle bugs.
      opts = opts || {};
      // ...
    }

    // still bad
    function handleThings(opts) {
      if (opts === void 0) {
        opts = {};
      }
      // ...
    }

    // good
    function handleThings(opts = {}) {
      // ...
    }
    ```

  &lt;a name=&quot;functions--default-side-effects&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.8&quot;&gt;&lt;/a&gt;
  - [7.8](#functions--default-side-effects) Avoid side effects with default parameters.

    &gt; Why? They are confusing to reason about.

    ```javascript
    let b = 1;
    // bad
    function count(a = b++) {
      console.log(a);
    }
    count();  // 1
    count();  // 2
    count(3); // 3
    count();  // 3
    ```

  &lt;a name=&quot;functions--defaults-last&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.9&quot;&gt;&lt;/a&gt;
  - [7.9](#functions--defaults-last) Always put default parameters last. eslint: [`default-param-last`](https://eslint.org/docs/rules/default-param-last)

    ```javascript
    // bad
    function handleThings(opts = {}, name) {
      // ...
    }

    // good
    function handleThings(name, opts = {}) {
      // ...
    }
    ```

  &lt;a name=&quot;functions--constructor&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.10&quot;&gt;&lt;/a&gt;
  - [7.10](#functions--constructor) Never use the Function constructor to create a new function. eslint: [`no-new-func`](https://eslint.org/docs/rules/no-new-func)

    &gt; Why? Creating a function in this way evaluates a string similarly to `eval()`, which opens vulnerabilities.

    ```javascript
    // bad
    const add = new Function('a', 'b', 'return a + b');

    // still bad
    const subtract = Function('a', 'b', 'return a - b');
    ```

  &lt;a name=&quot;functions--signature-spacing&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.11&quot;&gt;&lt;/a&gt;
  - [7.11](#functions--signature-spacing) Spacing in a function signature. eslint: [`space-before-function-paren`](https://eslint.org/docs/rules/space-before-function-paren) [`space-before-blocks`](https://eslint.org/docs/rules/space-before-blocks)

    &gt; Why? Consistency is good, and you shouldn’t have to add or remove a space when adding or removing a name.

    ```javascript
    // bad
    const f = function(){};
    const g = function (){};
    const h = function() {};

    // good
    const x = function () {};
    const y = function a() {};
    ```

  &lt;a name=&quot;functions--mutate-params&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.12&quot;&gt;&lt;/a&gt;
  - [7.12](#functions--mutate-params) Never mutate parameters. eslint: [`no-param-reassign`](https://eslint.org/docs/rules/no-param-reassign)

    &gt; Why? Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.

    ```javascript
    // bad
    function f1(obj) {
      obj.key = 1;
    }

    // good
    function f2(obj) {
      const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1;
    }
    ```

  &lt;a name=&quot;functions--reassign-params&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.13&quot;&gt;&lt;/a&gt;
  - [7.13](#functions--reassign-params) Never reassign parameters. eslint: [`no-param-reassign`](https://eslint.org/docs/rules/no-param-reassign)

    &gt; Why? Reassigning parameters can lead to unexpected behavior, especially when accessing the `arguments` object. It can also cause optimization issues, especially in V8.

    ```javascript
    // bad
    function f1(a) {
      a = 1;
      // ...
    }

    function f2(a) {
      if (!a) { a = 1; }
      // ...
    }

    // good
    function f3(a) {
      const b = a || 1;
      // ...
    }

    function f4(a = 1) {
      // ...
    }
    ```

  &lt;a name=&quot;functions--spread-vs-apply&quot;&gt;&lt;/a&gt;&lt;a name=&quot;7.14&quot;&gt;&lt;/a&gt;
  - [7.14](#functions--spread-vs-apply) Prefer the use of the spread syntax `...` to call variadic functions. eslint: [`prefer-spread`](https://eslint.org/docs/rules/prefer-spread)

    &gt; Why? It’s cleaner, you don’t need to supply a context, and you can not easily compose `new` with `apply`.

    ```javascript
    // bad
    const x = [1, 2, 3, 4, 5];
    console.log.apply(console, x);

    // good
    const x = [1, 2, 3, 4, 5];
    console.log(...x);

    // bad
    new (Function.prototype.bind.apply(Date, [null, 2016, 8, 5]));

    // good
    new Date(...[2016, 8, 5]);
    ```

  &lt;a name=&quot;functions--signature-invocation-indentation&quot;&gt;&lt;/a&gt;
  - [7.15](#functions--signature-invocation-indentation) Functions with multiline signatures, or invocations, should be indented just like every other multiline list in this guide: with each item on a line by itself, with a trailing comma on the last item. eslint: [`function-paren-newline`](https://eslint.org/docs/rules/function-paren-newline)

    ```javascript
    // bad
    function foo(bar,
                 baz,
                 quux) {
      // ...
    }

    // good
    function foo(
      bar,
      baz,
      quux,
    ) {
      // ...
    }

    // bad
    console.log(foo,
      bar,
      baz);

    // good
    console.log(
      foo,
      bar,
      baz,
    );
    ```

**[⬆ back to top](#table-of-contents)**

## Arrow Functions

  &lt;a name=&quot;arrows--use-them&quot;&gt;&lt;/a&gt;&lt;a name=&quot;8.1&quot;&gt;&lt;/a&gt;
  - [8.1](#arrows--use-them) When you must use an anonymous function (as when passing an inline callback), use arrow function notation. eslint: [`prefer-arrow-callback`](https://eslint.org/docs/rules/prefer-arrow-callback), [`arrow-spacing`](https://eslint.org/docs/rules/arrow-spacing)

    &gt; Why? It creates a version of the function that executes in the context of `this`, which is usually what you want, and is a more concise syntax.

    &gt; Why not? If you have a fairly complicated function, you might move that logic out into its own named function expression.

    ```javascript
    // bad
    [1, 2, 3].map(function (x) {
      const y = x + 1;
      return x * y;
    });

    // good
    [1, 2, 3].map((x) =&gt; {
      const y = x + 1;
      return x * y;
    });
    ```

  &lt;a name=&quot;arrows--implicit-return&quot;&gt;&lt;/a&gt;&lt;a name=&quot;8.2&quot;&gt;&lt;/a&gt;
  - [8.2](#arrows--implicit-return) If the function body consists of a single statement returning an [expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions) without side effects, omit the braces and use the implicit return. Otherwise, keep the braces and use a `return` statement. eslint: [`arrow-parens`](https://eslint.org/docs/rules/arrow-parens), [`arrow-body-style`](https://eslint.org/docs/rules/arrow-body-style)

    &gt; Why? Syntactic sugar. It reads well when multiple functions are chained together.

    ```javascript
    // bad
    [1, 2, 3].map((number) =&gt; {
      const nextNumber = number + 1;
      `A string containing the ${nextNumber}.`;
    });

    // good
    [1, 2, 3].map((number) =&gt; `A string containing the ${number + 1}.`);

    // good
    [1, 2, 3].map((number) =&gt; {
      const nextNumber = number + 1;
      return `A string containing the ${nextNumber}.`;
    });

    // good
    [1, 2, 3].map((number, index) =&gt; ({
      [index]: number,
    }));

    // No implicit return with side effects
    function foo(callback) {
      const val = callback();
      if (val === true) {
        // Do something if callback returns true
      }
    }

    let bool = false;

    // bad
    foo(() =&gt; bool = true);

    // good
    foo(() =&gt; {
      bool = true;
    });
    ```

  &lt;a name=&quot;arrows--paren-wrap&quot;&gt;&lt;/a&gt;&lt;a name=&quot;8.3&quot;&gt;&lt;/a&gt;
  - [8.3](#arrows--paren-wrap) In case the expression spans over multiple lines, wrap it in parentheses for better readability.

    &gt; Why? It shows clearly where the function starts and ends.

    ```javascript
    // bad
    ['get', 'post', 'put'].map((httpMethod) =&gt; Object.prototype.hasOwnProperty.call(
        httpMagicObjectWithAVeryLongName,
        httpMethod,
      )
    );

    // good
    ['get', 'post', 'put'].map((httpMethod) =&gt; (
      Object.prototype.hasOwnProperty.call(
        httpMagicObjectWithAVeryLongName,
        httpMethod,
      )
    ));
    ```

  &lt;a name=&quot;arrows--one-arg-parens&quot;&gt;&lt;/a&gt;&lt;a name=&quot;8.4&quot;&gt;&lt;/a&gt;
  - [8.4](#arrows--one-arg-parens) Always include parentheses around arguments for clarity and consistency. eslint: [`arrow-parens`](https://eslint.org/docs/rules/arrow-parens)

    &gt; Why? Minimizes diff churn when adding or removing arguments.

    ```javascript
    // bad
    [1, 2, 3].map(x =&gt; x * x);

    // good
    [1, 2, 3].map((x) =&gt; x * x);

    // bad
    [1, 2, 3].map(number =&gt; (
      `A long string with the ${number}. It’s so long that we don’t want it to take up space on the .map line!`
    ));

    // good
    [1, 2, 3].map((number) =&gt; (
      `A long string with the ${number}. It’s so long that we don’t want it to take up space on the .map line!`
    ));

    // bad
    [1, 2, 3].map(x =&gt; {
      const y = x + 1;
      return x * y;
    });

    // good
    [1, 2, 3].map((x) =&gt; {
      const y = x + 1;
      return x * y;
    });
    ```

  &lt;a name=&quot;arrows--confusing&quot;&gt;&lt;/a&gt;&lt;a name=&quot;8.5&quot;&gt;&lt;/a&gt;
  - [8.5](#arrows--confusing) Avoid confusing arrow function syntax (`=&gt;`) with comparison operators (`&lt;=`, `&gt;=`). eslint: [`no-confusing-arrow`](https://eslint.org/docs/rules/no-confusing-arrow)

    ```javascript
    // bad
    const itemHeight = (item) =&gt; item.height &lt;= 256 ? item.largeSize : item.smallSize;

    // bad
    const itemHeight = (item) =&gt; item.height &gt;= 256 ? item.largeSize : item.smallSize;

    // good
    const itemHeight = (item) =&gt; (item.height &lt;= 256 ? item.largeSize : item.smallSize);

    // good
    const itemHeight = (item) =&gt; {
      const { height, largeSize, smallSize } = item;
      return height &lt;= 256 ? largeSize : smallSize;
    };
    ```

  &lt;a name=&quot;whitespace--implicit-arrow-linebreak&quot;&gt;&lt;/a&gt;
  - [8.6](#whitespace--implicit-arrow-linebreak) Enforce the location of arrow function bodies with implicit returns. eslint: [`implicit-arrow-linebreak`](https://eslint.org/docs/rules/implicit-arrow-linebreak)

    ```javascript
    // bad
    (foo) =&gt;
      bar;

    (foo) =&gt;
      (bar);

    // good
    (foo) =&gt; bar;
    (foo) =&gt; (bar);
    (foo) =&gt; (
       bar
    )
    ```

**[⬆ back to top](#table-of-contents)**

## Classes &amp; Constructors

  &lt;a name=&quot;constructors--use-class&quot;&gt;&lt;/a&gt;&lt;a name=&quot;9.1&quot;&gt;&lt;/a&gt;
  - [9.1](#constructors--use-class) Always use `class`. Avoid manipulating `prototype` directly.

    &gt; Why? `class` syntax is more concise and easier to reason about.

    ```javascript
    // bad
    function Queue(contents = []) {
      this.queue = [...contents];
    }
    Queue.prototype.pop = function () {
      const value = this.queue[0];
      this.queue.splice(0, 1);
      return value;
    };

    // good
    class Queue {
      constructor(contents = []) {
        this.queue = [...contents];
      }
      pop() {
        const value = this.queue[0];
        this.queue.splice(0, 1);
        return value;
      }
    }
    ```

  &lt;a name=&quot;constructors--extends&quot;&gt;&lt;/a&gt;&lt;a name=&quot;9.2&quot;&gt;&lt;/a&gt;
  - [9.2](#constructors--extends) Use `extends` for inheritance.

    &gt; Why? It is a built-in way to inherit prototype functionality without breaking `instanceof`.

    ```javascript
    // bad
    const inherits = require('inherits');
    function PeekableQueue(contents) {
      Queue.apply(this, contents);
    }
    inherits(PeekableQueue, Queue);
    PeekableQueue.prototype.peek = function () {
      return this.queue[0];
    };

    // good
    class PeekableQueue extends Queue {
      peek() {
        return this.queue[0];
      }
    }
    ```

  &lt;a name=&quot;constructors--chaining&quot;&gt;&lt;/a&gt;&lt;a name=&quot;9.3&quot;&gt;&lt;/a&gt;
  - [9.3](#constructors--chaining) Methods can return `this` to help with method chaining.

    ```javascript
    // bad
    Jedi.prototype.jump = function () {
      this.jumping = true;
      return true;
    };

    Jedi.prototype.setHeight = function (height) {
      this.height = height;
    };

    const luke = new Jedi();
    luke.jump(); // =&gt; true
    luke.setHeight(20); // =&gt; undefined

    // good
    class Jedi {
      jump() {
        this.jumping = true;
        return this;
      }

      setHeight(height) {
        this.height = height;
        return this;
      }
    }

    const luke = new Jedi();

    luke.jump()
      .setHeight(20);
    ```

  &lt;a name=&quot;constructors--tostring&quot;&gt;&lt;/a&gt;&lt;a name=&quot;9.4&quot;&gt;&lt;/a&gt;
  - [9.4](#constructors--tostring) It’s okay to write a custom `toString()` method, just make sure it works successfully and causes no side effects.

    ```javascript
    class Jedi {
      constructor(options = {}) {
        this.name = options.name || 'no name';
      }

      getName() {
        return this.name;
      }

      toString() {
        return `Jedi - ${this.getName()}`;
      }
    }
    ```

  &lt;a name=&quot;constructors--no-useless&quot;&gt;&lt;/a&gt;&lt;a name=&quot;9.5&quot;&gt;&lt;/a&gt;
  - [9.5](#constructors--no-useless) Classes have a default constructor if one is not specified. An empty constructor function or one that just delegates to a parent class is unnecessary. eslint: [`no-useless-constructor`](https://eslint.org/docs/rules/no-useless-constructor)

    ```javascript
    // bad
    class Jedi {
      constructor() {}

      getName() {
        return this.name;
      }
    }

    // bad
    class Rey extends Jedi {
      constructor(...args) {
        super(...args);
      }
    }

    // good
    class Rey extends Jedi {
      constructor(...args) {
        super(...args);
        this.name = 'Rey';
      }
    }
    ```

  &lt;a name=&quot;classes--no-duplicate-members&quot;&gt;&lt;/a&gt;
  - [9.6](#classes--no-duplicate-members) Avoid duplicate class members. eslint: [`no-dupe-class-members`](https://eslint.org/docs/rules/no-dupe-class-members)

    &gt; Why? Duplicate class member declarations will silently prefer the last one - having duplicates is almost certainly a bug.

    ```javascript
    // bad
    class Foo {
      bar() { return 1; }
      bar() { return 2; }
    }

    // good
    class Foo {
      bar() { return 1; }
    }

    // good
    class Foo {
      bar() { return 2; }
    }
    ```

  &lt;a name=&quot;classes--methods-use-this&quot;&gt;&lt;/a&gt;
  - [9.7](#classes--methods-use-this) Class methods should use `this` or be made into a static method unless an external library or framework requires using specific non-static methods. Being an instance method should indicate that it behaves differently based on properties of the receiver. eslint: [`class-methods-use-this`](https://eslint.org/docs/rules/class-methods-use-this)

    ```javascript
    // bad
    class Foo {
      bar() {
        console.log('bar');
      }
    }

    // good - this is used
    class Foo {
      bar() {
        console.log(this.bar);
      }
    }

    // good - constructor is exempt
    class Foo {
      constructor() {
        // ...
      }
    }

    // good - static methods aren't expected to use this
    class Foo {
      static bar() {
        console.log('bar');
      }
    }
    ```

**[⬆ back to top](#table-of-contents)**

## Modules

  &lt;a name=&quot;modules--use-them&quot;&gt;&lt;/a&gt;&lt;a name=&quot;10.1&quot;&gt;&lt;/a&gt;
  - [10.1](#modules--use-them) Always use modules (`import`/`export`) over a non-standard module system. You can always transpile to your preferred module system.

    &gt; Why? Modules are the future, let’s start using the future now.

    ```javascript
    // bad
    const AirbnbStyleGuide = require('./AirbnbStyleGuide');
    module.exports = AirbnbStyleGuide.es6;

    // ok
    import AirbnbStyleGuide from './AirbnbStyleGuide';
    export default AirbnbStyleGuide.es6;

    // best
    import { es6 } from './AirbnbStyleGuide';
    export default es6;
    ```

  &lt;a name=&quot;modules--no-wildcard&quot;&gt;&lt;/a&gt;&lt;a name=&quot;10.2&quot;&gt;&lt;/a&gt;
  - [10.2](#modules--no-wildcard) Do not use wildcard imports.

    &gt; Why? This makes sure you have a single default export.

    ```javascript
    // bad
    import * as AirbnbStyleGuide from './AirbnbStyleGuide';

    // good
    import AirbnbStyleGuide from './AirbnbStyleGuide';
    ```

  &lt;a name=&quot;modules--no-export-from-import&quot;&gt;&lt;/a&gt;&lt;a name=&quot;10.3&quot;&gt;&lt;/a&gt;
  - [10.3](#modules--no-export-from-import) And do not export directly from an import.

    &gt; Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.

    ```javascript
    // bad
    // filename es6.js
    export { es6 as default } from './AirbnbStyleGuide';

    // good
    // filename es6.js
    import { es6 } from './AirbnbStyleGuide';
    export default es6;
    ```

  &lt;a name=&quot;modules--no-duplicate-imports&quot;&gt;&lt;/a&gt;
  - [10.4](#modules--no-duplicate-imports) Only import from a path in one place.
 eslint: [`no-duplicate-imports`](https://eslint.org/docs/rules/no-duplicate-imports)
    &gt; Why? Having multiple lines that import from the same path can make code harder to maintain.

    ```javascript
    // bad
    import foo from 'foo';
    // … some other imports … //
    import { named1, named2 } from 'foo';

    // good
    import foo, { named1, named2 } from 'foo';

    // good
    import foo, {
      named1,
      named2,
    } from 'foo';
    ```

  &lt;a name=&quot;modules--no-mutable-exports&quot;&gt;&lt;/a&gt;
  - [10.5](#modules--no-mutable-exports) Do not export mutable bindings.
 eslint: [`import/no-mutable-exports`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md)
    &gt; Why? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported.

    ```javascript
    // bad
    let foo = 3;
    export { foo };

    // good
    const foo = 3;
    export { foo };
    ```

  &lt;a name=&quot;modules--prefer-default-export&quot;&gt;&lt;/a&gt;
  - [10.6](#modules--prefer-default-export) In modules with a single export, prefer default export over named export.
 eslint: [`import/prefer-default-export`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md)
    &gt; Why? To encourage more files that only ever export one thing, which is better for readability and maintainability.

    ```javascript
    // bad
    export function foo() {}

    // good
    export default function foo() {}
    ```

  &lt;a name=&quot;modules--imports-first&quot;&gt;&lt;/a&gt;
  - [10.7](#modules--imports-first) Put all `import`s above non-import statements.
 eslint: [`import/first`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md)
    &gt; Why? Since `import`s are hoisted, keeping them all at the top prevents surprising behavior.

    ```javascript
    // bad
    import foo from 'foo';
    foo.init();

    import bar from 'bar';

    // good
    import foo from 'foo';
    import bar from 'bar';

    foo.init();
    ```

  &lt;a name=&quot;modules--multiline-imports-over-newlines&quot;&gt;&lt;/a&gt;
  - [10.8](#modules--multiline-imports-over-newlines) Multiline imports should be indented just like multiline array and object literals.
 eslint: [`object-curly-newline`](https://eslint.org/docs/rules/object-curly-newline)

    &gt; Why? The curly braces follow the same indentation rules as every other curly brace block in the style guide, as do the trailing commas.

    ```javascript
    // bad
    import {longNameA, longNameB, longNameC, longNameD, longNameE} from 'path';

    // good
    import {
      longNameA,
      longNameB,
      longNameC,
      longNameD,
      longNameE,
    } from 'path';
    ```

  &lt;a name=&quot;modules--no-webpack-loader-syntax&quot;&gt;&lt;/a&gt;
  - [10.9](#modules--no-webpack-loader-syntax) Disallow Webpack loader syntax in module import statements.
 eslint: [`import/no-webpack-loader-syntax`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md)
    &gt; Why? Since using Webpack syntax in the imports couples the code to a module bundler. Prefer using the loader syntax in `webpack.config.js`.

    ```javascript
    // bad
    import fooSass from 'css!sass!foo.scss';
    import barCss from 'style!css!bar.css';

    // good
    import fooSass from 'foo.scss';
    import barCss from 'bar.css';
    ```

  &lt;a name=&quot;modules--import-extensions&quot;&gt;&lt;/a&gt;
  - [10.10](#modules--import-extensions) Do not include JavaScript filename extensions
 eslint: [`import/extensions`](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/extensions.md)
    &gt; Why? Including extensions inhibits refactoring, and inappropriately hardcodes implementation details of the module you're importing in every consumer.

    ```javascript
    // bad
    import foo from './foo.js';
    import bar from './bar.jsx';
    import baz from './baz/index.jsx';

    // good
    import foo from './foo';
    import bar from './bar';
    import baz from './baz';
    ```

**[⬆ back to top](#table-of-contents)**

## Iterators and Generators

  &lt;a name=&quot;iterators--nope&quot;&gt;&lt;/a&gt;&lt;a name=&quot;11.1&quot;&gt;&lt;/a&gt;
  - [11.1](#iterators--nope) Don’t use iterators. Prefer JavaScript’s higher-order functions instead of loops like `for-in` or `for-of`. eslint: [`no-iterator`](https://eslint.org/docs/rules/no-iterator) [`no-restricted-syntax`](https://eslint.org/docs/rules/no-restricted-syntax)

    &gt; Why? This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.

    &gt; Use `map()` / `every()` / `filter()` / `find()` / `findIndex()` / `reduce()` / `some()` / ... to iterate over arrays, and `Object.keys()` / `Object.values()` / `Object.entries()` to produce arrays so you can iterate over objects.

    ```javascript
    const numbers = [1, 2, 3, 4, 5];

    // bad
    let sum = 0;
    for (let num of numbers) {
      sum += num;
    }
    sum === 15;

    // good
    let sum = 0;
    numbers.forEach((num) =&gt; {
      sum += num;
    });
    sum === 15;

    // best (use the functional force)
    const sum = numbers.reduce((total, num) =&gt; total + num, 0);
    sum === 15;

    // bad
    const increasedByOne = [];
    for (let i = 0; i &lt; numbers.length; i++) {
      increasedByOne.push(numbers[i] + 1);
    }

    // good
    const increasedByOne = [];
    numbers.forEach((num) =&gt; {
      increasedByOne.push(num + 1);
    });

    // best (keeping it functional)
    const increasedByOne = numbers.map((num) =&gt; num + 1);
    ```

  &lt;a name=&quot;generators--nope&quot;&gt;&lt;/a&gt;&lt;a name=&quot;11.2&quot;&gt;&lt;/a&gt;
  - [11.2](#generators--nope) Don’t use generators for now.

    &gt; Why? They don’t transpile well to ES5.

  &lt;a name=&quot;generators--spacing&quot;&gt;&lt;/a&gt;
  - [11.3](#generators--spacing) If you must use generators, or if you disregard [our advice](#generators--nope), make sure their function signature is spaced properly. eslint: [`generator-star-spacing`](https://eslint.org/docs/rules/generator-star-spacing)

    &gt; Why? `function` and `*` are part of the same conceptual keyword - `*` is not a modifier for `function`, `function*` is a unique construct, different from `function`.

    ```javascript
    // bad
    function * foo() {
      // ...
    }

    // bad
    const bar = function * () {
      // ...
    };

    // bad
    const baz = function *() {
      // ...
    };

    // bad
    const quux = function*() {
      // ...
    };

    // bad
    function*foo() {
      // ...
    }

    // bad
    function *foo() {
      // ...
    }

    // very bad
    function
    *
    foo() {
      // ...
    }

    // very bad
    const wat = function
    *
    () {
      // ...
    };

    // good
    function* foo() {
      // ...
    }

    // good
    const foo = function* () {
      // ...
    };
    ```

**[⬆ back to top](#table-of-contents)**

## Properties

  &lt;a name=&quot;properties--dot&quot;&gt;&lt;/a&gt;&lt;a name=&quot;12.1&quot;&gt;&lt;/a&gt;
  - [12.1](#properties--dot) Use dot notation when accessing properties. eslint: [`dot-notation`](https://eslint.org/docs/rules/dot-notation)

    ```javascript
    const luke = {
      jedi: true,
      age: 28,
    };

    // bad
    const isJedi = luke['jedi'];

    // good
    const isJedi = luke.jedi;
    ```

  &lt;a name=&quot;properties--bracket&quot;&gt;&lt;/a&gt;&lt;a name=&quot;12.2&quot;&gt;&lt;/a&gt;
  - [12.2](#properties--bracket) Use bracket notation `[]` when accessing properties with a variable.

    ```javascript
    const luke = {
      jedi: true,
      age: 28,
    };

    function getProp(prop) {
      return luke[prop];
    }

    const isJedi = getProp('jedi');
    ```

  &lt;a name=&quot;es2016-properties--exponentiation-operator&quot;&gt;&lt;/a&gt;
  - [12.3](#es2016-properties--exponentiation-operator) Use exponentiation operator `**` when calculating exponentiations. eslint: [`no-restricted-properties`](https://eslint.org/docs/rules/no-restricted-properties).

    ```javascript
    // bad
    const binary = Math.pow(2, 10);

    // good
    const binary = 2 ** 10;
    ```

**[⬆ back to top](#table-of-contents)**

## Variables

  &lt;a name=&quot;variables--const&quot;&gt;&lt;/a&gt;&lt;a name=&quot;13.1&quot;&gt;&lt;/a&gt;
  - [13.1](#variables--const) Always use `const` or `let` to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that. eslint: [`no-undef`](https://eslint.org/docs/rules/no-undef) [`prefer-const`](https://eslint.org/docs/rules/prefer-const)

    ```javascript
    // bad
    superPower = new SuperPower();

    // good
    const superPower = new SuperPower();
    ```

  &lt;a name=&quot;variables--one-const&quot;&gt;&lt;/a&gt;&lt;a name=&quot;13.2&quot;&gt;&lt;/a&gt;
  - [13.2](#variables--one-const) Use one `const` or `let` declaration per variable or assignment. eslint: [`one-var`](https://eslint.org/docs/rules/one-var)

    &gt; Why? It’s easier to add new variable declarations this way, and you never have to worry about swapping out a `;` for a `,` or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.

    ```javascript
    // bad
    const items = getItems(),
        goSportsTeam = true,
        dragonball = 'z';

    // bad
    // (compare to above, and try to spot the mistake)
    const items = getItems(),
        goSportsTeam = true;
        dragonball = 'z';

    // good
    const items = getItems();
    const goSportsTeam = true;
    const dragonball = 'z';
    ```

  &lt;a name=&quot;variables--const-let-group&quot;&gt;&lt;/a&gt;&lt;a name=&quot;13.3&quot;&gt;&lt;/a&gt;
  - [13.3](#variables--const-let-group) Group all your `const`s and then group all your `let`s.

    &gt; Why? This is helpful when later on you might need to assign a variable depending on one of the previously assigned variables.

    ```javascript
    // bad
    let i, len, dragonball,
        items = getItems(),
        goSportsTeam = true;

    // bad
    let i;
    const items = getItems();
    let dragonball;
    const goSportsTeam = true;
    let len;

    // good
    const goSportsTeam = true;
    const items = getItems();
    let dragonball;
    let i;
    let length;
    ```

  &lt;a name=&quot;variables--define-where-used&quot;&gt;&lt;/a&gt;&lt;a name=&quot;13.4&quot;&gt;&lt;/a&gt;
  - [13.4](#variables--define-where-used) Assign variables where you need them, but place them in a reasonable place.

    &gt; Why? `let` and `const` are block scoped and not function scoped.

    ```javascript
    // bad - unnecessary function call
    function checkName(hasName) {
      const name = getName();

      if (hasName === 'test') {
        return false;
      }

      if (name === 'test') {
        this.setName('');
        return false;
      }

      return name;
    }

    // good
    function checkName(hasName) {
      if (hasName === 'test') {
        return false;
      }

      const name = getName();

      if (name === 'test') {
        this.setName('');
        return false;
      }

      return name;
    }
    ```

  &lt;a name=&quot;variables--no-chain-assignment&quot;&gt;&lt;/a&gt;&lt;a name=&quot;13.5&quot;&gt;&lt;/a&gt;
  - [13.5](#variables--no-chain-assignment) Don’t chain variable assignments. eslint: [`no-multi-assign`](https://eslint.org/docs/rules/no-multi-assign)

    &gt; Why? Chaining variable assignments creates implicit global variables.

    ```javascript
    // bad
    (function example() {
      // JavaScript interprets this as
      // let a = ( b = ( c = 1 ) );
      // The let keyword only applies to variable a; variables b and c become
      // global variables.
      let a = b = c = 1;
    }());

    console.log(a); // throws ReferenceError
    console.log(b); // 1
    console.log(c); // 1

    // good
    (function example() {
      let a = 1;
      let b = a;
      let c = a;
    }());

    console.log(a); // throws ReferenceError
    console.log(b); // throws ReferenceError
    console.log(c); // throws ReferenceError

    // the same applies for `const`
    ```

  &lt;a name=&quot;variables--unary-increment-decrement&quot;&gt;&lt;/a&gt;&lt;a name=&quot;13.6&quot;&gt;&lt;/a&gt;
  - [13.6](#variables--unary-increment-decrement) Avoid using unary increments and decrements (`++`, `--`). eslint [`no-plusplus`](https://eslint.org/docs/rules/no-plusplus)

    &gt; Why? Per the eslint documentation, unary increment and decrement statements are subject to automatic semicolon insertion and can cause silent errors with incrementing or decrementing values within an application. It is also more expressive to mutate your values with statements like `num += 1` instead of `num++` or `num ++`. Disallowing unary increment and decrement statements also prevents you from pre-incrementing/pre-decrementing values unintentionally which can also cause unexpected behavior in your programs.

    ```javascript
    // bad

    const array = [1, 2, 3];
    let num = 1;
    num++;
    --num;

    let sum = 0;
    let truthyCount = 0;
    for (let i = 0; i &lt; array.length; i++) {
      let value = array[i];
      sum += value;
      if (value) {
        truthyCount++;
      }
    }

    // good

    const array = [1, 2, 3];
    let num = 1;
    num += 1;
    num -= 1;

    const sum = array.reduce((a, b) =&gt; a + b, 0);
    const truthyCount = array.filter(Boolean).length;
    ```

&lt;a name=&quot;variables--linebreak&quot;&gt;&lt;/a&gt;
  - [13.7](#variables--linebreak) Avoid linebreaks before or after `=` in an assignment. If your assignment violates [`max-len`](https://eslint.org/docs/rules/max-len), surround the value in parens. eslint [`operator-linebreak`](https://eslint.org/docs/rules/operator-linebreak).

    &gt; Why? Linebreaks surrounding `=` can obfuscate the value of an assignment.

    ```javascript
    // bad
    const foo =
      superLongLongLongLongLongLongLongLongFunctionName();

    // bad
    const foo
      = 'superLongLongLongLongLongLongLongLongString';

    // good
    const foo = (
      superLongLongLongLongLongLongLongLongFunctionName()
    );

    // good
    const foo = 'superLongLongLongLongLongLongLongLongString';
    ```

&lt;a name=&quot;variables--no-unused-vars&quot;&gt;&lt;/a&gt;
  - [13.8](#variables--no-unused-vars) Disallow unused variables. eslint: [`no-unused-vars`](https://eslint.org/docs/rules/no-unused-vars)

    &gt; Why? Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.

    ```javascript
    // bad

    const some_unused_var = 42;

    // Write-only variables are not considered as used.
    let y = 10;
    y = 5;

    // A read for a modification of itself is not considered as used.
    let z = 0;
    z = z + 1;

    // Unused function arguments.
    function getX(x, y) {
        return x;
    }

    // good

    function getXPlusY(x, y) {
      return x + y;
    }

    const x = 1;
    const y = a + 2;

    alert(getXPlusY(x, y));

    // 'type' is ignored even if unused because it has a rest property sibling.
    // This is a form of extracting an object that omits the specified keys.
    const { type, ...coords } = data;
    // 'coords' is now the 'data' object without its 'type' property.
    ```

**[⬆ back to top](#table-of-contents)**

## Hoisting

  &lt;a name=&quot;hoisting--about&quot;&gt;&lt;/a&gt;&lt;a name=&quot;14.1&quot;&gt;&lt;/a&gt;
  - [14.1](#hoisting--about) `var` declarations get hoisted to the top of their closest enclosing function scope, their assignment does not. `const` and `let` declarations are blessed with a new concept called [Temporal Dead Zones (TDZ)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz). It’s important to know why [typeof is no longer safe](https://web.archive.org/web/20200121061528/http://es-discourse.com/t/why-typeof-is-no-longer-safe/15).

    ```javascript
    // we know this wouldn’t work (assuming there
    // is no notDefined global variable)
    function example() {
      console.log(notDefined); // =&gt; throws a ReferenceError
    }

    // creating a variable declaration after you
    // reference the variable will work due to
    // variable hoisting. Note: the assignment
    // value of `true` is not hoisted.
    function example() {
      console.log(declaredButNotAssigned); // =&gt; undefined
      var declaredButNotAssigned = true;
    }

    // the interpreter is hoisting the variable
    // declaration to the top of the scope,
    // which means our example could be rewritten as:
    function example() {
      let declaredButNotAssigned;
      console.log(declaredButNotAssigned); // =&gt; undefined
      declaredButNotAssigned = true;
    }

    // using const and let
    function example() {
      console.log(declaredButNotAssigned); // =&gt; throws a ReferenceError
      console.log(typeof declaredButNotAssigned); // =&gt; throws a ReferenceError
      const declaredButNotAssigned = true;
    }
    ```

  &lt;a name=&quot;hoisting--anon-expressions&quot;&gt;&lt;/a&gt;&lt;a name=&quot;14.2&quot;&gt;&lt;/a&gt;
  - [14.2](#hoisting--anon-expressions) Anonymous function expressions hoist their variable name, but not the function assignment.

    ```javascript
    function example() {
      console.log(anonymous); // =&gt; undefined

      anonymous(); // =&gt; TypeError anonymous is not a function

      var anonymous = function () {
        console.log('anonymous function expression');
      };
    }
    ```

  &lt;a name=&quot;hoisting--named-expresions&quot;&gt;&lt;/a&gt;&lt;a name=&quot;hoisting--named-expressions&quot;&gt;&lt;/a&gt;&lt;a name=&quot;14.3&quot;&gt;&lt;/a&gt;
  - [14.3](#hoisting--named-expressions) Named function expressions hoist the variable name, not the function name or the function body.

    ```javascript
    function example() {
      console.log(named); // =&gt; undefined

      named(); // =&gt; TypeError named is not a function

      superPower(); // =&gt; ReferenceError superPower is not defined

      var named = function superPower() {
        console.log('Flying');
      };
    }

    // the same is true when the function name
    // is the same as the variable name.
    function example() {
      console.log(named); // =&gt; undefined

      named(); // =&gt; TypeError named is not a function

      var named = function named() {
        console.log('named');
      };
    }
    ```

  &lt;a name=&quot;hoisting--declarations&quot;&gt;&lt;/a&gt;&lt;a name=&quot;14.4&quot;&gt;&lt;/a&gt;
  - [14.4](#hoisting--declarations) Function declarations hoist their name and the function body.

    ```javascript
    function example() {
      superPower(); // =&gt; Flying

      function superPower() {
        console.log('Flying');
      }
    }
    ```

  - For more information refer to [JavaScript Scoping &amp; Hoisting](https://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/) by [Ben Cherry](https://www.adequatelygood.com/).

**[⬆ back to top](#table-of-contents)**

## Comparison Operators &amp; Equality

  &lt;a name=&quot;comparison--eqeqeq&quot;&gt;&lt;/a&gt;&lt;a name=&quot;15.1&quot;&gt;&lt;/a&gt;
  - [15.1](#comparison--eqeqeq) Use `===` and `!==` over `==` and `!=`. eslint: [`eqeqeq`](https://eslint.org/docs/rules/eqeqeq)

  &lt;a name=&quot;comparison--if&quot;&gt;&lt;/a&gt;&lt;a name=&quot;15.2&quot;&gt;&lt;/a&gt;
  - [15.2](#comparison--if) Conditional statements such as the `if` statement evaluate their expression using coercion with the `ToBoolean` abstract method and always follow these simple rules:

    - **Objects** evaluate to **true**
    - **Undefined** evaluates to **false**
    - **Null** evaluates to **false**
    - **Booleans** evaluate to **the value of the boolean**
    - **Numbers** evaluate to **false** if **+0, -0, or NaN**, otherwise **true**
    - **Strings** evaluate to **false** if an empty string `''`, otherwise **true**

    ```javascript
    if ([0] &amp;&amp; []) {
      // true
      // an array (even an empty one) is an object, objects will evaluate to true
    }
    ```

  &lt;a name=&quot;comparison--shortcuts&quot;&gt;&lt;/a&gt;&lt;a name=&quot;15.3&quot;&gt;&lt;/a&gt;
  - [15.3](#comparison--shortcuts) Use shortcuts for booleans, but explicit comparisons for strings and numbers.

    ```javascript
    // bad
    if (isValid === true) {
      // ...
    }

    // good
    if (isValid) {
      // ...
    }

    // bad
    if (name) {
      // ...
    }

    // good
    if (name !== '') {
      // ...
    }

    // bad
    if (collection.length) {
      // ...
    }

    // good
    if (collection.length &gt; 0) {
      // ...
    }
    ```

  &lt;a name=&quot;comparison--moreinfo&quot;&gt;&lt;/a&gt;&lt;a name=&quot;15.4&quot;&gt;&lt;/a&gt;
  - [15.4](#comparison--moreinfo) For more information see [Truth Equality and JavaScript](https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108) by Angus Croll.

  &lt;a name=&quot;comparison--switch-blocks&quot;&gt;&lt;/a&gt;&lt;a name=&quot;15.5&quot;&gt;&lt;/a&gt;
  - [15.5](#comparison--switch-blocks) Use braces to create blocks in `case` and `default` clauses that contain lexical declarations (e.g. `let`, `const`, `function`, and `class`). eslint: [`no-case-declarations`](https://eslint.org/docs/rules/no-case-declarations)

    &gt; Why? Lexical declarations are visible in the entire `switch` block but only get initialized when assigned, which only happens when its `case` is reached. This causes problems when multiple `case` clauses attempt to define the same thing.

    ```javascript
    // bad
    switch (foo) {
      case 1:
        let x = 1;
        break;
      case 2:
        const y = 2;
        break;
      case 3:
        function f() {
          // ...
        }
        break;
      default:
        class C {}
    }

    // good
    switch (foo) {
      case 1: {
        let x = 1;
        break;
      }
      case 2: {
        const y = 2;
        break;
      }
      case 3: {
        function f() {
          // ...
        }
        break;
      }
      case 4:
        bar();
        break;
      default: {
        class C {}
      }
    }
    ```

  &lt;a name=&quot;comparison--nested-ternaries&quot;&gt;&lt;/a&gt;&lt;a name=&quot;15.6&quot;&gt;&lt;/a&gt;
  - [15.6](#comparison--nested-ternaries) Ternaries should not be nested and generally be single line expressions. eslint: [`no-nested-ternary`](https://eslint.org/docs/rules/no-nested-ternary)

    ```javascript
    // bad
    const foo = maybe1 &gt; maybe2
      ? &quot;bar&quot;
      : value1 &gt; value2 ? &quot;baz&quot; : null;

    // split into 2 separated ternary expressions
    const maybeNull = value1 &gt; value2 ? 'baz' : null;

    // better
    const foo = maybe1 &gt; maybe2
      ? 'bar'
      : maybeNull;

    // best
    const foo = maybe1 &gt; maybe2 ? 'bar' : maybeNull;
    ```

  &lt;a name=&quot;comparison--unneeded-ternary&quot;&gt;&lt;/a&gt;&lt;a name=&quot;15.7&quot;&gt;&lt;/a&gt;
  - [15.7](#comparison--unneeded-ternary) Avoid unneeded ternary statements. eslint: [`no-unneeded-ternary`](https://eslint.org/docs/rules/no-unneeded-ternary)

    ```javascript
    // bad
    const foo = a ? a : b;
    const bar = c ? true : false;
    const baz = c ? false : true;
    const quux = a != null ? a : b;

    // good
    const foo = a || b;
    const bar = !!c;
    const baz = !c;
    const quux = a ?? b;
    ```

  &lt;a name=&quot;comparison--no-mixed-operators&quot;&gt;&lt;/a&gt;
  - [15.8](#comparison--no-mixed-operators) When mixing operators, enclose them in parentheses. The only exception is the standard arithmetic operators: `+`, `-`, and `**` since their precedence is broadly understood. We recommend enclosing `/` and `*` in parentheses because their precedence can be ambiguous when they are mixed.
  eslint: [`no-mixed-operators`](https://eslint.org/docs/rules/no-mixed-operators)

    &gt; Why? This improves readability and clarifies the developer’s intention.

    ```javascript
    // bad
    const foo = a &amp;&amp; b &lt; 0 || c &gt; 0 || d + 1 === 0;

    // bad
    const bar = a ** b - 5 % d;

    // bad
    // one may be confused into thinking (a || b) &amp;&amp; c
    if (a || b &amp;&amp; c) {
      return d;
    }

    // bad
    const bar = a + b / c * d;

    // good
    const foo = (a &amp;&amp; b &lt; 0) || c &gt; 0 || (d + 1 === 0);

    // good
    const bar = a ** b - (5 % d);

    // good
    if (a || (b &amp;&amp; c)) {
      return d;
    }

    // good
    const bar = a + (b / c) * d;
    ```

**[⬆ back to top](#table-of-contents)**

## Blocks

  &lt;a name=&quot;blocks--braces&quot;&gt;&lt;/a&gt;&lt;a name=&quot;16.1&quot;&gt;&lt;/a&gt;
  - [16.1](#blocks--braces) Use braces with all multiline blocks. eslint: [`nonblock-statement-body-position`](https://eslint.org/docs/rules/nonblock-statement-body-position)

    ```javascript
    // bad
    if (test)
      return false;

    // good
    if (test) return false;

    // good
    if (test) {
      return false;
    }

    // bad
    function foo() { return false; }

    // good
    function bar() {
      return false;
    }
    ```

  &lt;a name=&quot;blocks--cuddled-elses&quot;&gt;&lt;/a&gt;&lt;a name=&quot;16.2&quot;&gt;&lt;/a&gt;
  - [16.2](#blocks--cuddled-elses) If you’re using multiline blocks with `if` and `else`, put `else` on the same line as your `if` block’s closing brace. eslint: [`brace-style`](https://eslint.org/docs/rules/brace-style)

    ```javascript
    // bad
    if (test) {
      thing1();
      thing2();
    }
    else {
      thing3();
    }

    // good
    if (test) {
      thing1();
      thing2();
    } else {
      thing3();
    }
    ```

  &lt;a name=&quot;blocks--no-else-return&quot;&gt;&lt;/a&gt;&lt;a name=&quot;16.3&quot;&gt;&lt;/a&gt;
  - [16.3](#blocks--no-else-return) If an `if` block always executes a `return` statement, the subsequent `else` block is unnecessary. A `return` in an `else if` block following an `if` block that contains a `return` can be separated into multiple `if` blocks. eslint: [`no-else-return`](https://eslint.org/docs/rules/no-else-return)

    ```javascript
    // bad
    function foo() {
      if (x) {
        return x;
      } else {
        return y;
      }
    }

    // bad
    function cats() {
      if (x) {
        return x;
      } else if (y) {
        return y;
      }
    }

    // bad
    function dogs() {
      if (x) {
        return x;
      } else {
        if (y) {
          return y;
        }
      }
    }

    // good
    function foo() {
      if (x) {
        return x;
      }

      return y;
    }

    // good
    function cats() {
      if (x) {
        return x;
      }

      if (y) {
        return y;
      }
    }

    // good
    function dogs(x) {
      if (x) {
        if (z) {
          return y;
        }
      } else {
        return z;
      }
    }
    ```

**[⬆ back to top](#table-of-contents)**

## Control Statements

  &lt;a name=&quot;control-statements&quot;&gt;&lt;/a&gt;
  - [17.1](#control-statements) In case your control statement (`if`, `while` etc.) gets too long or exceeds the maximum line length, each (grouped) condition could be put into a new line. The logical operator should begin the line.

    &gt; Why? Requiring operators at the beginning of the line keeps the operators aligned and follows a pattern similar to method chaining. This also improves readability by making it easier to visually follow complex logic.

    ```javascript
    // bad
    if ((foo === 123 || bar === 'abc') &amp;&amp; doesItLookGoodWhenItBecomesThatLong() &amp;&amp; isThisReallyHappening()) {
      thing1();
    }

    // bad
    if (foo === 123 &amp;&amp;
      bar === 'abc') {
      thing1();
    }

    // bad
    if (foo === 123
      &amp;&amp; bar === 'abc') {
      thing1();
    }

    // bad
    if (
      foo === 123 &amp;&amp;
      bar === 'abc'
    ) {
      thing1();
    }

    // good
    if (
      foo === 123
      &amp;&amp; bar === 'abc'
    ) {
      thing1();
    }

    // good
    if (
      (foo === 123 || bar === 'abc')
      &amp;&amp; doesItLookGoodWhenItBecomesThatLong()
      &amp;&amp; isThisReallyHappening()
    ) {
      thing1();
    }

    // good
    if (foo === 123 &amp;&amp; bar === 'abc') {
      thing1();
    }
    ```

  &lt;a name=&quot;control-statement--value-selection&quot;&gt;&lt;/a&gt;&lt;a name=&quot;control-statements--value-selection&quot;&gt;&lt;/a&gt;
  - [17.2](#control-statements--value-selection) Don't use selection operators in place of control statements.

    ```javascript
    // bad
    !isRunning &amp;&amp; startRunning();

    // good
    if (!isRunning) {
      startRunning();
    }
    ```

**[⬆ back to top](#table-of-contents)**

## Comments

  &lt;a name=&quot;comments--multiline&quot;&gt;&lt;/a&gt;&lt;a name=&quot;17.1&quot;&gt;&lt;/a&gt;
  - [18.1](#comments--multiline) Use `/** ... */` for multiline comments.

    ```javascript
    // bad
    // make() returns a new element
    // based on the passed in tag name
    //
    // @param {String} tag
    // @return {Element} element
    function make(tag) {

      // ...

      return element;
    }

    // good
    /**
     * make() returns a new element
     * based on the passed-in tag name
     */
    function make(tag) {

      // ...

      return element;
    }
    ```

  &lt;a name=&quot;comments--singleline&quot;&gt;&lt;/a&gt;&lt;a name=&quot;17.2&quot;&gt;&lt;/a&gt;
  - [18.2](#comments--singleline) Use `//` for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it’s on the first line of a block.

    ```javascript
    // bad
    const active = true;  // is current tab

    // good
    // is current tab
    const active = true;

    // bad
    function getType() {
      console.log('fetching type...');
      // set the default type to 'no type'
      const type = this.type || 'no type';

      return type;
    }

    // good
    function getType() {
      console.log('fetching type...');

      // set the default type to 'no type'
      const type = this.type || 'no type';

      return type;
    }

    // also good
    function getType() {
      // set the default type to 'no type'
      const type = this.type || 'no type';

      return type;
    }
    ```

  &lt;a name=&quot;comments--spaces&quot;&gt;&lt;/a&gt;
  - [18.3](#comments--spaces) Start all comments with a space to make it easier to read. eslint: [`spaced-comment`](https://eslint.org/docs/rules/spaced-comment)

    ```javascript
    // bad
    //is current tab
    const active = true;

    // good
    // is current tab
    const active = true;

    // bad
    /**
     *make() returns a new element
     *based on the passed-in tag name
     */
    function make(tag) {

      // ...

      return element;
    }

    // good
    /**
     * make() returns a new element
     * based on the passed-in tag name
     */
    function make(tag) {

      // ...

      return element;
    }
    ```

  &lt;a name=&quot;comments--actionitems&quot;&gt;&lt;/a&gt;&lt;a name=&quot;17.3&quot;&gt;&lt;/a&gt;
  - [18.4](#comments--actionitems) Prefixing your comments with `FIXME` or `TODO` helps other developers quickly understand if you’re pointing out a problem that needs to be revisited, or if you’re suggesting a solution to the problem that needs to be implemented. These are different than regular comments because they are actionable. The actions are `FIXME: -- need to figure this out` or `TODO: -- need to implement`.

  &lt;a name=&quot;comments--fixme&quot;&gt;&lt;/a&gt;&lt;a name=&quot;17.4&quot;&gt;&lt;/a&gt;
  - [18.5](#comments--fixme) Use `// FIXME:` to annotate problems.

    ```javascript
    class Calculator extends Abacus {
      constructor() {
        super();

        // FIXME: shouldn’t use a global here
        total = 0;
      }
    }
    ```

  &lt;a name=&quot;comments--todo&quot;&gt;&lt;/a&gt;&lt;a name=&quot;17.5&quot;&gt;&lt;/a&gt;
  - [18.6](#comments--todo) Use `// TODO:` to annotate solutions to problems.

    ```javascript
    class Calculator extends Abacus {
      constructor() {
        super();

        // TODO: total should be configurable by an options param
        this.total = 0;
      }
    }
    ```

**[⬆ back to top](#table-of-contents)**

## Whitespace

  &lt;a name=&quot;whitespace--spaces&quot;&gt;&lt;/a&gt;&lt;a name=&quot;18.1&quot;&gt;&lt;/a&gt;
  - [19.1](#whitespace--spaces) Use soft tabs (space character) set to 2 spaces. eslint: [`indent`](https://eslint.org/docs/rules/indent)

    ```javascript
    // bad
    function foo() {
    ∙∙∙∙let name;
    }

    // bad
    function bar() {
    ∙let name;
    }

    // good
    function baz() {
    ∙∙let name;
    }
    ```

  &lt;a name=&quot;whitespace--before-blocks&quot;&gt;&lt;/a&gt;&lt;a name=&quot;18.2&quot;&gt;&lt;/a&gt;
  - [19.2](#whitespace--before-blocks) Place 1 space before the leading brace. eslint: [`space-before-blocks`](https://eslint.org/docs/rules/space-before-blocks)

    ```javascript
    // bad
    function test(){
      console.log('test');
    }

    // good
    function test() {
      console.log('test');
    }

    // bad
    dog.set('attr',{
      age: '1 year',
      breed: 'Bernese Mountain Dog',
    });

    // good
    dog.set('attr', {
      age: '1 year',
      breed: 'Bernese Mountain Dog',
    });
    ```

  &lt;a name=&quot;whitespace--around-keywords&quot;&gt;&lt;/a&gt;&lt;a name=&quot;18.3&quot;&gt;&lt;/a&gt;
  - [19.3](#whitespace--around-keywords) Place 1 space before the opening parenthesis in control statements (`if`, `while` etc.). Place no space between the argument list and the function name in function calls and declarations. eslint: [`keyword-spacing`](https://eslint.org/docs/rules/keyword-spacing)

    ```javascript
    // bad
    if(isJedi) {
      fight ();
    }

    // good
    if (isJedi) {
      fight();
    }

    // bad
    function fight () {
      console.log ('Swooosh!');
    }

    // good
    function fight() {
      console.log('Swooosh!');
    }
    ```

  &lt;a name=&quot;whitespace--infix-ops&quot;&gt;&lt;/a&gt;&lt;a name=&quot;18.4&quot;&gt;&lt;/a&gt;
  - [19.4](#whitespace--infix-ops) Set off operators with spaces. eslint: [`space-infix-ops`](https://eslint.org/docs/rules/space-infix-ops)

    ```javascript
    // bad
    const x=y+5;

    // good
    const x = y + 5;
    ```

  &lt;a name=&quot;whitespace--newline-at-end&quot;&gt;&lt;/a&gt;&lt;a name=&quot;18.5&quot;&gt;&lt;/a&gt;
  - [19.5](#whitespace--newline-at-end) End files with a single newline character. eslint: [`eol-last`](https://eslint.org/docs/rules/eol-last)

    ```javascript
    // bad
    import { es6 } from './AirbnbStyleGuide';
      // ...
    export default es6;
    ```

    ```javascript
    // bad
    import { es6 } from './AirbnbStyleGuide';
      // ...
    export default es6;↵
    ↵
    ```

    ```javascript
    // good
    import { es6 } from './AirbnbStyleGuide';
      // ...
    export default es6;↵
    ```

  &lt;a name=&quot;whitespace--chains&quot;&gt;&lt;/a&gt;&lt;a name=&quot;18.6&quot;&gt;&lt;/a&gt;
  - [19.6](#whitespace--chains) Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which
    emphasizes that the line is a method call, not a new statement. eslint: [`newline-per-chained-call`](https://eslint.org/docs/rules/newline-per-chained-call) [`no-whitespace-before-property`](https://eslint.org/docs/rules/no-whitespace-before-property)

    ```javascript
    // bad
    $('#items').find('.selected').highlight().end().find('.open').updateCount();

    // bad
    $('#items').
      find('.selected').
        highlight().
        end().
      find('.open').
        updateCount();

    // good
    $('#items')
      .find('.selected')
        .highlight()
        .end()
      .find('.open')
        .updateCount();

    // bad
    const leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)
        .attr('width', (radius + margin) * 2).append('svg:g')
        .attr('transform', `translate(${radius + margin}, ${radius + margin})`)
        .call(tron.led);

    // good
    const leds = stage.selectAll('.led')
        .data(data)
      .enter().append('svg:svg')
        .classed('led', true)
        .attr('width', (radius + margin) * 2)
      .append('svg:g')
        .attr('transform', `translate(${radius + margin}, ${radius + margin})`)
        .call(tron.led);

    // good
    const leds = stage.selectAll('.led').data(data);
    const svg = leds.enter().append('svg:svg');
    svg.classed('led', true).attr('width', (radius + margin) * 2);
    const g = svg.append('svg:g');
    g.attr('transform', `translate(${radius + margin}, ${radius + margin})`).call(tron.led);
    ```

  &lt;a name=&quot;whitespace--after-blocks&quot;&gt;&lt;/a&gt;&lt;a name=&quot;18.7&quot;&gt;&lt;/a&gt;
  - [19.7](#whitespace--after-blocks) Leave a blank line after blocks and before the next statement.

    ```javascript
    // bad
    if (foo) {
      return bar;
    }
    return baz;

    // good
    if (foo) {
      return bar;
    }

    return baz;

    // bad
    const obj = {
      foo() {
      },
      bar() {
      },
    };
    return obj;

    // good
    const obj = {
      foo() {
      },

      bar() {
      },
    };

    return obj;

    // bad
    const arr = [
      function foo() {
      },
      function bar() {
      },
    ];
    return arr;

    // good
    const arr = [
      function foo() {
      },

      function bar() {
      },
    ];

    return arr;
    ```

  &lt;a name=&quot;whitespace--padded-blocks&quot;&gt;&lt;/a&gt;&lt;a name=&quot;18.8&quot;&gt;&lt;/a&gt;
  - [19.8](#whitespace--padded-blocks) Do not pad your blocks with blank lines. eslint: [`padded-blocks`](https://eslint.org/docs/rules/padded-blocks)

    ```javascript
    // bad
    function bar() {

      console.log(foo);

    }

    // bad
    if (baz) {

      console.log(quux);
    } else {
      console.log(foo);

    }

    // bad
    class Foo {

      constructor(bar) {
        this.bar = bar;
      }
    }

    // good
    function bar() {
      console.log(foo);
    }

    // good
    if (baz) {
      console.log(quux);
    } else {
      console.log(foo);
    }
    ```

  &lt;a name=&quot;whitespace--no-multiple-blanks&quot;&gt;&lt;/a&gt;
  - [19.9](#whitespace--no-multiple-blanks) Do not use multiple blank lines to pad your code. eslint: [`no-multiple-empty-lines`](https://eslint.org/docs/rules/no-multiple-empty-lines)

    &lt;!-- markdownlint-disable MD012 --&gt;
    ```javascript
    // bad
    class Person {
      constructor(fullName, email, birthday) {
        this.fullName = fullName;


        this.email = email;


        this.setAge(birthday);
      }


      setAge(birthday) {
        const today = new Date();


        const age = this.getAge(today, birthday);


        this.age = age;
      }


      getAge(today, birthday) {
        // ..
      }
    }

    // good
    class Person {
      constructor(fullName, email, birthday) {
        this.fullName = fullName;
        this.email = email;
        this.setAge(birthday);
      }

      setAge(birthday) {
        const today = new Date();
        const age = getAge(today, birthday);
        this.age = age;
      }

      getAge(today, birthday) {
        // ..
      }
    }
    ```

  &lt;a name=&quot;whitespace--in-parens&quot;&gt;&lt;/a&gt;&lt;a name=&quot;18.9&quot;&gt;&lt;/a&gt;
  - [19.10](#whitespace--in-parens) Do not add spaces inside parentheses. eslint: [`space-in-parens`](https://eslint.org/docs/rules/space-in-parens)

    ```javascript
    // bad
    function bar( foo ) {
      return foo;
    }

    // good
    function bar(foo) {
      return foo;
    }

    // bad
    if ( foo ) {
      console.log(foo);
    }

    // good
    if (foo) {
      console.log(foo);
    }
    ```

  &lt;a name=&quot;whitespace--in-brackets&quot;&gt;&lt;/a&gt;&lt;a name=&quot;18.10&quot;&gt;&lt;/a&gt;
  - [19.11](#whitespace--in-brackets) Do not add spaces inside brackets. eslint: [`array-bracket-spacing`](https://eslint.org/docs/rules/array-bracket-spacing)

    ```javascript
    // bad
    const foo = [ 1, 2, 3 ];
    console.log(foo[ 0 ]);

    // good
    const foo = [1, 2, 3];
    console.log(foo[0]);
    ```

  &lt;a name=&quot;whitespace--in-braces&quot;&gt;&lt;/a&gt;&lt;a name=&quot;18.11&quot;&gt;&lt;/a&gt;
  - [19.12](#whitespace--in-braces) Add spaces inside curly braces. eslint: [`object-curly-spacing`](https://eslint.org/docs/rules/object-curly-spacing)

    ```javascript
    // bad
    const foo = {clark: 'kent'};

    // good
    const foo = { clark: 'kent' };
    ```

  &lt;a name=&quot;whitespace--max-len&quot;&gt;&lt;/a&gt;&lt;a name=&quot;18.12&quot;&gt;&lt;/a&gt;
  - [19.13](#whitespace--max-len) Avoid having lines of code that are longer than 100 characters (including whitespace). Note: per [above](#strings--line-length), long strings are exempt from this rule, and should not be broken up. eslint: [`max-len`](https://eslint.org/docs/rules/max-len)

    &gt; Why? This ensures readability and maintainability.

    ```javascript
    // bad
    const foo = jsonData &amp;&amp; jsonData.foo &amp;&amp; jsonData.foo.bar &amp;&amp; jsonData.foo.bar.baz &amp;&amp; jsonData.foo.bar.baz.quux &amp;&amp; jsonData.foo.bar.baz.quux.xyzzy;

    // bad
    $.ajax({ method: 'POST', url: 'https://airbnb.com/', data: { name: 'John' } }).done(() =&gt; console.log('Congratulations!')).fail(() =&gt; console.log('You have failed this city.'));

    // good
    const foo = jsonData
      &amp;&amp; jsonData.foo
      &amp;&amp; jsonData.foo.bar
      &amp;&amp; jsonData.foo.bar.baz
      &amp;&amp; jsonData.foo.bar.baz.quux
      &amp;&amp; jsonData.foo.bar.baz.quux.xyzzy;

    // better
    const foo = jsonData
      ?.foo
      ?.bar
      ?.baz
      ?.quux
      ?.xyzzy;

    // good
    $.ajax({
      method: 'POST',
      url: 'https://airbnb.com/',
      data: { name: 'John' },
    })
      .done(() =&gt; console.log('Congratulations!'))
      .fail(() =&gt; console.log('You have failed this city.'));
    ```

  &lt;a name=&quot;whitespace--block-spacing&quot;&gt;&lt;/a&gt;
  - [19.14](#whitespace--block-spacing) Require consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line. eslint: [`block-spacing`](https://eslint.org/docs/rules/block-spacing)

    ```javascript
    // bad
    function foo() {return true;}
    if (foo) { bar = 0;}

    // good
    function foo() { return true; }
    if (foo) { bar = 0; }
    ```

  &lt;a name=&quot;whitespace--comma-spacing&quot;&gt;&lt;/a&gt;
  - [19.15](#whitespace--comma-spacing) Avoid spaces before commas and require a space after commas. eslint: [`comma-spacing`](https://eslint.org/docs/rules/comma-spacing)

    ```javascript
    // bad
    const foo = 1,bar = 2;
    const arr = [1 , 2];

    // good
    const foo = 1, bar = 2;
    const arr = [1, 2];
    ```

  &lt;a name=&quot;whitespace--computed-property-spacing&quot;&gt;&lt;/a&gt;
  - [19.16](#whitespace--computed-property-spacing) Enforce spacing inside of computed property brackets. eslint: [`computed-property-spacing`](https://eslint.org/docs/rules/computed-property-spacing)

    ```javascript
    // bad
    obj[foo ]
    obj[ 'foo']
    const x = {[ b ]: a}
    obj[foo[ bar ]]

    // good
    obj[foo]
    obj['foo']
    const x = { [b]: a }
    obj[foo[bar]]
    ```

  &lt;a name=&quot;whitespace--func-call-spacing&quot;&gt;&lt;/a&gt;
  - [19.17](#whitespace--func-call-spacing) Avoid spaces between functions and their invocations. eslint: [`func-call-spacing`](https://eslint.org/docs/rules/func-call-spacing)

    ```javascript
    // bad
    func ();

    func
    ();

    // good
    func();
    ```

  &lt;a name=&quot;whitespace--key-spacing&quot;&gt;&lt;/a&gt;
  - [19.18](#whitespace--key-spacing) Enforce spacing between keys and values in object literal properties. eslint: [`key-spacing`](https://eslint.org/docs/rules/key-spacing)

    ```javascript
    // bad
    const obj = { foo : 42 };
    const obj2 = { foo:42 };

    // good
    const obj = { foo: 42 };
    ```

  &lt;a name=&quot;whitespace--no-trailing-spaces&quot;&gt;&lt;/a&gt;
  - [19.19](#whitespace--no-trailing-spaces) Avoid trailing spaces at the end of lines. eslint: [`no-trailing-spaces`](https://eslint.org/docs/rules/no-trailing-spaces)

  &lt;a name=&quot;whitespace--no-multiple-empty-lines&quot;&gt;&lt;/a&gt;
  - [19.20](#whitespace--no-multiple-empty-lines) Avoid multiple empty lines, only allow one newline at the end of files, and avoid a newline at the beginning of files. eslint: [`no-multiple-empty-lines`](https://eslint.org/docs/rules/no-multiple-empty-lines)

    &lt;!-- markdownlint-disable MD012 --&gt;
    ```javascript
    // bad - multiple empty lines
    const x = 1;


    const y = 2;

    // bad - 2+ newlines at end of file
    const x = 1;
    const y = 2;


    // bad - 1+ newline(s) at beginning of file

    const x = 1;
    const y = 2;

    // good
    const x = 1;
    const y = 2;

    ```
    &lt;!-- markdownlint-enable MD012 --&gt;

**[⬆ back to top](#table-of-contents)**

## Commas

  &lt;a name=&quot;commas--leading-trailing&quot;&gt;&lt;/a&gt;&lt;a name=&quot;19.1&quot;&gt;&lt;/a&gt;
  - [20.1](#commas--leading-trailing) Leading commas: **Nope.** eslint: [`comma-style`](https://eslint.org/docs/rules/comma-style)

    ```javascript
    // bad
    const story = [
        once
      , upon
      , aTime
    ];

    // good
    const story = [
      once,
      upon,
      aTime,
    ];

    // bad
    const hero = {
        firstName: 'Ada'
      , lastName: 'Lovelace'
      , birthYear: 1815
      , superPower: 'computers'
    };

    // good
    const hero = {
      firstName: 'Ada',
      lastName: 'Lovelace',
      birthYear: 1815,
      superPower: 'computers',
    };
    ```

  &lt;a name=&quot;commas--dangling&quot;&gt;&lt;/a&gt;&lt;a name=&quot;19.2&quot;&gt;&lt;/a&gt;
  - [20.2](#commas--dangling) Additional trailing comma: **Yup.** eslint: [`comma-dangle`](https://eslint.org/docs/rules/comma-dangle)

    &gt; Why? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you don’t have to worry about the [trailing comma problem](https://github.com/airbnb/javascript/blob/es5-deprecated/es5/README.md#commas) in legacy browsers.

    ```diff
    // bad - git diff without trailing comma
    const hero = {
         firstName: 'Florence',
    -    lastName: 'Nightingale'
    +    lastName: 'Nightingale',
    +    inventorOf: ['coxcomb chart', 'modern nursing']
    };

    // good - git diff with trailing comma
    const hero = {
         firstName: 'Florence',
         lastName: 'Nightingale',
    +    inventorOf: ['coxcomb chart', 'modern nursing'],
    };
    ```

    ```javascript
    // bad
    const hero = {
      firstName: 'Dana',
      lastName: 'Scully'
    };

    const heroes = [
      'Batman',
      'Superman'
    ];

    // good
    const hero = {
      firstName: 'Dana',
      lastName: 'Scully',
    };

    const heroes = [
      'Batman',
      'Superman',
    ];

    // bad
    function createHero(
      firstName,
      lastName,
      inventorOf
    ) {
      // does nothing
    }

    // good
    function createHero(
      firstName,
      lastName,
      inventorOf,
    ) {
      // does nothing
    }

    // good (note that a comma must not appear after a &quot;rest&quot; element)
    function createHero(
      firstName,
      lastName,
      inventorOf,
      ...heroArgs
    ) {
      // does nothing
    }

    // bad
    createHero(
      firstName,
      lastName,
      inventorOf
    );

    // good
    createHero(
      firstName,
      lastName,
      inventorOf,
    );

    // good (note that a comma must not appear after a &quot;rest&quot; element)
    createHero(
      firstName,
      lastName,
      inventorOf,
      ...heroArgs
    );
    ```

**[⬆ back to top](#table-of-contents)**

## Semicolons

  &lt;a name=&quot;semicolons--required&quot;&gt;&lt;/a&gt;&lt;a name=&quot;20.1&quot;&gt;&lt;/a&gt;
  - [21.1](#semicolons--required) **Yup.** eslint: [`semi`](https://eslint.org/docs/rules/semi)

    &gt; Why? When JavaScript encounters a line break without a semicolon, it uses a set of rules called [Automatic Semicolon Insertion](https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion) to determine whether it should regard that line break as the end of a statement, and (as the name implies) place a semicolon into your code before the line break if it thinks so. ASI contains a few eccentric behaviors, though, and your code will break if JavaScript misinterprets your line break. These rules will become more complicated as new features become a part of JavaScript. Explicitly terminating your statements and configuring your linter to catch missing semicolons will help prevent you from encountering issues.

    ```javascript
    // bad - raises exception
    const luke = {}
    const leia = {}
    [luke, leia].forEach((jedi) =&gt; jedi.father = 'vader')

    // bad - raises exception
    const reaction = &quot;No! That’s impossible!&quot;
    (async function meanwhileOnTheFalcon() {
      // handle `leia`, `lando`, `chewie`, `r2`, `c3p0`
      // ...
    }())

    // bad - returns `undefined` instead of the value on the next line - always happens when `return` is on a line by itself because of ASI!
    function foo() {
      return
        'search your feelings, you know it to be foo'
    }

    // good
    const luke = {};
    const leia = {};
    [luke, leia].forEach((jedi) =&gt; {
      jedi.father = 'vader';
    });

    // good
    const reaction = 'No! That’s impossible!';
    (async function meanwhileOnTheFalcon() {
      // handle `leia`, `lando`, `chewie`, `r2`, `c3p0`
      // ...
    }());

    // good
    function foo() {
      return 'search your feelings, you know it to be foo';
    }
    ```

    [Read more](https://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214#7365214).

**[⬆ back to top](#table-of-contents)**

## Type Casting &amp; Coercion

  &lt;a name=&quot;coercion--explicit&quot;&gt;&lt;/a&gt;&lt;a name=&quot;21.1&quot;&gt;&lt;/a&gt;
  - [22.1](#coercion--explicit) Perform type coercion at the beginning of the statement.

  &lt;a name=&quot;coercion--strings&quot;&gt;&lt;/a&gt;&lt;a name=&quot;21.2&quot;&gt;&lt;/a&gt;
  - [22.2](#coercion--strings) Strings: eslint: [`no-new-wrappers`](https://eslint.org/docs/rules/no-new-wrappers)

    ```javascript
    // =&gt; this.reviewScore = 9;

    // bad
    const totalScore = new String(this.reviewScore); // typeof totalScore is &quot;object&quot; not &quot;string&quot;

    // bad
    const totalScore = this.reviewScore + ''; // invokes this.reviewScore.valueOf()

    // bad
    const totalScore = this.reviewScore.toString(); // isn’t guaranteed to return a string

    // good
    const totalScore = String(this.reviewScore);
    ```

  &lt;a name=&quot;coercion--numbers&quot;&gt;&lt;/a&gt;&lt;a name=&quot;21.3&quot;&gt;&lt;/a&gt;
  - [22.3](#coercion--numbers) Numbers: Use `Number` for type casting and `parseInt` always with a radix for parsing strings. eslint: [`radix`](https://eslint.org/docs/rules/radix) [`no-new-wrappers`](https://eslint.org/docs/rules/no-new-wrappers)

    &gt; Why? The `parseInt` function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading whitespace in string is ignored. If radix is `undefined` or `0`, it is assumed to be `10` except when the number begins with the character pairs `0x` or `0X`, in which case a radix of 16 is assumed. This differs from ECMAScript 3, which merely discouraged (but allowed) octal interpretation. Many implementations have not adopted this behavior as of 2013. And, because older browsers must be supported, always specify a radix.

    ```javascript
    const inputValue = '4';

    // bad
    const val = new Number(inputValue);

    // bad
    const val = +inputValue;

    // bad
    const val = inputValue &gt;&gt; 0;

    // bad
    const val = parseInt(inputValue);

    // good
    const val = Number(inputValue);

    // good
    const val = parseInt(inputValue, 10);
    ```

  &lt;a name=&quot;coercion--comment-deviations&quot;&gt;&lt;/a&gt;&lt;a name=&quot;21.4&quot;&gt;&lt;/a&gt;
  - [22.4](#coercion--comment-deviations) If for whatever reason you are doing something wild and `parseInt` is your bottleneck and need to use Bitshift for [performance reasons](https://web.archive.org/web/20200414205431/https://jsperf.com/coercion-vs-casting/3), leave a comment explaining why and what you’re doing.

    ```javascript
    // good
    /**
     * parseInt was the reason my code was slow.
     * Bitshifting the String to coerce it to a
     * Number made it a lot faster.
     */
    const val = inputValue &gt;&gt; 0;
    ```

  &lt;a name=&quot;coercion--bitwise&quot;&gt;&lt;/a&gt;&lt;a name=&quot;21.5&quot;&gt;&lt;/a&gt;
  - [22.5](#coercion--bitwise) **Note:** Be careful when using bitshift operations. Numbers are represented as [64-bit values](https://es5.github.io/#x4.3.19), but bitshift operations always return a 32-bit integer ([source](https://es5.github.io/#x11.7)). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. [Discussion](https://github.com/airbnb/javascript/issues/109). Largest signed 32-bit Int is 2,147,483,647:

    ```javascript
    2147483647 &gt;&gt; 0; // =&gt; 2147483647
    2147483648 &gt;&gt; 0; // =&gt; -2147483648
    2147483649 &gt;&gt; 0; // =&gt; -2147483647
    ```

  &lt;a name=&quot;coercion--booleans&quot;&gt;&lt;/a&gt;&lt;a name=&quot;21.6&quot;&gt;&lt;/a&gt;
  - [22.6](#coercion--booleans) Booleans: eslint: [`no-new-wrappers`](https://eslint.org/docs/rules/no-new-wrappers)

    ```javascript
    const age = 0;

    // bad
    const hasAge = new Boolean(age);

    // good
    const hasAge = Boolean(age);

    // best
    const hasAge = !!age;
    ```

**[⬆ back to top](#table-of-contents)**

## Naming Conventions

  &lt;a name=&quot;naming--descriptive&quot;&gt;&lt;/a&gt;&lt;a name=&quot;22.1&quot;&gt;&lt;/a&gt;
  - [23.1](#naming--descriptive) Avoid single letter names. Be descriptive with your naming. eslint: [`id-length`](https://eslint.org/docs/rules/id-length)

    ```javascript
    // bad
    function q() {
      // ...
    }

    // good
    function query() {
      // ...
    }
    ```

  &lt;a name=&quot;naming--camelCase&quot;&gt;&lt;/a&gt;&lt;a name=&quot;22.2&quot;&gt;&lt;/a&gt;
  - [23.2](#naming--camelCase) Use camelCase when naming objects, functions, and instances. eslint: [`camelcase`](https://eslint.org/docs/rules/camelcase)

    ```javascript
    // bad
    const OBJEcttsssss = {};
    const this_is_my_object = {};
    function c() {}

    // good
    const thisIsMyObject = {};
    function thisIsMyFunction() {}
    ```

  &lt;a name=&quot;naming--PascalCase&quot;&gt;&lt;/a&gt;&lt;a name=&quot;22.3&quot;&gt;&lt;/a&gt;
  - [23.3](#naming--PascalCase) Use PascalCase only when naming constructors or classes. eslint: [`new-cap`](https://eslint.org/docs/rules/new-cap)

    ```javascript
    // bad
    function user(options) {
      this.name = options.name;
    }

    const bad = new user({
      name: 'nope',
    });

    // good
    class User {
      constructor(options) {
        this.name = options.name;
      }
    }

    const good = new User({
      name: 'yup',
    });
    ```

  &lt;a name=&quot;naming--leading-underscore&quot;&gt;&lt;/a&gt;&lt;a name=&quot;22.4&quot;&gt;&lt;/a&gt;
  - [23.4](#naming--leading-underscore) Do not use trailing or leading underscores. eslint: [`no-underscore-dangle`](https://eslint.org/docs/rules/no-underscore-dangle)

    &gt; Why? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean “private”, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won’t count as breaking, or that tests aren’t needed. tl;dr: if you want something to be “private”, it must not be observably present.

    ```javascript
    // bad
    this.__firstName__ = 'Panda';
    this.firstName_ = 'Panda';
    this._firstName = 'Panda';

    // good
    this.firstName = 'Panda';

    // good, in environments where WeakMaps are available
    // see https://kangax.github.io/compat-table/es6/#test-WeakMap
    const firstNames = new WeakMap();
    firstNames.set(this, 'Panda');
    ```

  &lt;a name=&quot;naming--self-this&quot;&gt;&lt;/a&gt;&lt;a name=&quot;22.5&quot;&gt;&lt;/a&gt;
  - [23.5](#naming--self-this) Don’t save references to `this`. Use arrow functions or [Function#bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).

    ```javascript
    // bad
    function foo() {
      const self = this;
      return function () {
        console.log(self);
      };
    }

    // bad
    function foo() {
      const that = this;
      return function () {
        console.log(that);
      };
    }

    // good
    function foo() {
      return () =&gt; {
        console.log(this);
      };
    }
    ```

  &lt;a name=&quot;naming--filename-matches-export&quot;&gt;&lt;/a&gt;&lt;a name=&quot;22.6&quot;&gt;&lt;/a&gt;
  - [23.6](#naming--filename-matches-export) A base filename should exactly match the name of its default export.

    ```javascript
    // file 1 contents
    class CheckBox {
      // ...
    }
    export default CheckBox;

    // file 2 contents
    export default function fortyTwo() { return 42; }

    // file 3 contents
    export default function insideDirectory() {}

    // in some other file
    // bad
    import CheckBox from './checkBox'; // PascalCase import/export, camelCase filename
    import FortyTwo from './FortyTwo'; // PascalCase import/filename, camelCase export
    import InsideDirectory from './InsideDirectory'; // PascalCase import/filename, camelCase export

    // bad
    import CheckBox from './check_box'; // PascalCase import/export, snake_case filename
    import forty_two from './forty_two'; // snake_case import/filename, camelCase export
    import inside_directory from './inside_directory'; // snake_case import, camelCase export
    import index from './inside_directory/index'; // requiring the index file explicitly
    import insideDirectory from './insideDirectory/index'; // requiring the index file explicitly

    // good
    import CheckBox from './CheckBox'; // PascalCase export/import/filename
    import fortyTwo from './fortyTwo'; // camelCase export/import/filename
    import insideDirectory from './insideDirectory'; // camelCase export/import/directory name/implicit &quot;index&quot;
    // ^ supports both insideDirectory.js and insideDirectory/index.js
    ```

  &lt;a name=&quot;naming--camelCase-default-export&quot;&gt;&lt;/a&gt;&lt;a name=&quot;22.7&quot;&gt;&lt;/a&gt;
  - [23.7](#naming--camelCase-default-export) Use camelCase when you export-default a function. Your filename should be identical to your function’s name.

    ```javascript
    function makeStyleGuide() {
      // ...
    }

    export default makeStyleGuide;
    ```

  &lt;a name=&quot;naming--PascalCase-singleton&quot;&gt;&lt;/a&gt;&lt;a name=&quot;22.8&quot;&gt;&lt;/a&gt;
  - [23.8](#naming--PascalCase-singleton) Use PascalCase when you export a constructor / class / singleton / function library / bare object.

    ```javascript
    const AirbnbStyleGuide = {
      es6: {
      },
    };

    export default AirbnbStyleGuide;
    ```

  &lt;a name=&quot;naming--Acronyms-and-Initialisms&quot;&gt;&lt;/a&gt;
  - [23.9](#naming--Acronyms-and-Initialisms) Acronyms and initialisms should always be all uppercased, or all lowercased.

    &gt; Why? Names are for readability, not to appease a computer algorithm.

    ```javascript
    // bad
    import SmsContainer from './containers/SmsContainer';

    // bad
    const HttpRequests = [
      // ...
    ];

    // good
    import SMSContainer from './containers/SMSContainer';

    // good
    const HTTPRequests = [
      // ...
    ];

    // also good
    const httpRequests = [
      // ...
    ];

    // best
    import TextMessageContainer from './containers/TextMessageContainer';

    // best
    const requests = [
      // ...
    ];
    ```

  &lt;a name=&quot;naming--uppercase&quot;&gt;&lt;/a&gt;
  - [23.10](#naming--uppercase) You may optionally uppercase a constant only if it (1) is exported, (2) is a `const` (it can not be reassigned), and (3) the programmer can trust it (and its nested properties) to never change.

    &gt; Why? This is an additional tool to assist in situations where the programmer would be unsure if a variable might ever change. UPPERCASE_VARIABLES are letting the programmer know that they can trust the variable (and its properties) not to change.
    - What about all `const` variables? - This is unnecessary, so uppercasing should not be used for constants within a file. It should be used for exported constants however.
    - What about exported objects? - Uppercase at the top level of export (e.g. `EXPORTED_OBJECT.key`) and maintain that all nested properties do not change.

    ```javascript
    // bad
    const PRIVATE_VARIABLE = 'should not be unnecessarily uppercased within a file';

    // bad
    export const THING_TO_BE_CHANGED = 'should obviously not be uppercased';

    // bad
    export let REASSIGNABLE_VARIABLE = 'do not use let with uppercase variables';

    // ---

    // allowed but does not supply semantic value
    export const apiKey = 'SOMEKEY';

    // better in most cases
    export const API_KEY = 'SOMEKEY';

    // ---

    // bad - unnecessarily uppercases key while adding no semantic value
    export const MAPPING = {
      KEY: 'value'
    };

    // good
    export const MAPPING = {
      key: 'value',
    };
    ```

**[⬆ back to top](#table-of-contents)**

## Accessors

  &lt;a name=&quot;accessors--not-required&quot;&gt;&lt;/a&gt;&lt;a name=&quot;23.1&quot;&gt;&lt;/a&gt;
  - [24.1](#accessors--not-required) Accessor functions for properties are not required.

  &lt;a name=&quot;accessors--no-getters-setters&quot;&gt;&lt;/a&gt;&lt;a name=&quot;23.2&quot;&gt;&lt;/a&gt;
  - [24.2](#accessors--no-getters-setters) Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use `getVal()` and `setVal('hello')`.

    ```javascript
    // bad
    class Dragon {
      get age() {
        // ...
      }

      set age(value) {
        // ...
      }
    }

    // good
    class Dragon {
      getAge() {
        // ...
      }

      setAge(value) {
        // ...
      }
    }
    ```

  &lt;a name=&quot;accessors--boolean-prefix&quot;&gt;&lt;/a&gt;&lt;a name=&quot;23.3&quot;&gt;&lt;/a&gt;
  - [24.3](#accessors--boolean-prefix) If the property/method is a `boolean`, use `isVal()` or `hasVal()`.

    ```javascript
    // bad
    if (!dragon.age()) {
      return false;
    }

    // good
    if (!dragon.hasAge()) {
      return false;
    }
    ```

  &lt;a name=&quot;accessors--consistent&quot;&gt;&lt;/a&gt;&lt;a name=&quot;23.4&quot;&gt;&lt;/a&gt;
  - [24.4](#accessors--consistent) It’s okay to create `get()` and `set()` functions, but be consistent.

    ```javascript
    class Jedi {
      constructor(options = {}) {
        const lightsaber = options.lightsaber || 'blue';
        this.set('lightsaber', lightsaber);
      }

      set(key, val) {
        this[key] = val;
      }

      get(key) {
        return this[key];
      }
    }
    ```

**[⬆ back to top](#table-of-contents)**

## Events

  &lt;a name=&quot;events--hash&quot;&gt;&lt;/a&gt;&lt;a name=&quot;24.1&quot;&gt;&lt;/a&gt;
  - [25.1](#events--hash) When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass an object literal (also known as a &quot;hash&quot;) instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:

    ```javascript
    // bad
    $(this).trigger('listingUpdated', listing.id);

    // ...

    $(this).on('listingUpdated', (e, listingID) =&gt; {
      // do something with listingID
    });
    ```

    prefer:

    ```javascript
    // good
    $(this).trigger('listingUpdated', { listingID: listing.id });

    // ...

    $(this).on('listingUpdated', (e, data) =&gt; {
      // do something with data.listingID
    });
    ```

  **[⬆ back to top](#table-of-contents)**

## jQuery

  &lt;a name=&quot;jquery--dollar-prefix&quot;&gt;&lt;/a&gt;&lt;a name=&quot;25.1&quot;&gt;&lt;/a&gt;
  - [26.1](#jquery--dollar-prefix) Prefix jQuery object variables with a `$`.

    ```javascript
    // bad
    const sidebar = $('.sidebar');

    // good
    const $sidebar = $('.sidebar');

    // good
    const $sidebarBtn = $('.sidebar-btn');
    ```

  &lt;a name=&quot;jquery--cache&quot;&gt;&lt;/a&gt;&lt;a name=&quot;25.2&quot;&gt;&lt;/a&gt;
  - [26.2](#jquery--cache) Cache jQuery lookups.

    ```javascript
    // bad
    function setSidebar() {
      $('.sidebar').hide();

      // ...

      $('.sidebar').css({
        'background-color': 'pink',
      });
    }

    // good
    function setSidebar() {
      const $sidebar = $('.sidebar');
      $sidebar.hide();

      // ...

      $sidebar.css({
        'background-color': 'pink',
      });
    }
    ```

  &lt;a name=&quot;jquery--queries&quot;&gt;&lt;/a&gt;&lt;a name=&quot;25.3&quot;&gt;&lt;/a&gt;
  - [26.3](#jquery--queries) For DOM queries use Cascading `$('.sidebar ul')` or parent &gt; child `$('.sidebar &gt; ul')`. [jsPerf](https://web.archive.org/web/20200414183810/https://jsperf.com/jquery-find-vs-context-sel/16)

  &lt;a name=&quot;jquery--find&quot;&gt;&lt;/a&gt;&lt;a name=&quot;25.4&quot;&gt;&lt;/a&gt;
  - [26.4](#jquery--find) Use `find` with scoped jQuery object queries.

    ```javascript
    // bad
    $('ul', '.sidebar').hide();

    // bad
    $('.sidebar').find('ul').hide();

    // good
    $('.sidebar ul').hide();

    // good
    $('.sidebar &gt; ul').hide();

    // good
    $sidebar.find('ul').hide();
    ```

**[⬆ back to top](#table-of-contents)**

## ECMAScript 5 Compatibility

  &lt;a name=&quot;es5-compat--kangax&quot;&gt;&lt;/a&gt;&lt;a name=&quot;26.1&quot;&gt;&lt;/a&gt;
  - [27.1](#es5-compat--kangax) Refer to [Kangax](https://twitter.com/kangax/)’s ES5 [compatibility table](https://kangax.github.io/es5-compat-table/).

**[⬆ back to top](#table-of-contents)**

&lt;a name=&quot;ecmascript-6-styles&quot;&gt;&lt;/a&gt;
## ECMAScript 6+ (ES 2015+) Styles

  &lt;a name=&quot;es6-styles&quot;&gt;&lt;/a&gt;&lt;a name=&quot;27.1&quot;&gt;&lt;/a&gt;
  - [28.1](#es6-styles) This is a collection of links to the various ES6+ features.

1. [Arrow Functions](#arrow-functions)
1. [Classes](#classes--constructors)
1. [Object Shorthand](#es6-object-shorthand)
1. [Object Concise](#es6-object-concise)
1. [Object Computed Properties](#es6-computed-properties)
1. [Template Strings](#es6-template-literals)
1. [Destructuring](#destructuring)
1. [Default Parameters](#es6-default-parameters)
1. [Rest](#es6-rest)
1. [Array Spreads](#es6-array-spreads)
1. [Let and Const](#references)
1. [Exponentiation Operator](#es2016-properties--exponentiation-operator)
1. [Iterators and Generators](#iterators-and-generators)
1. [Modules](#modules)

  &lt;a name=&quot;tc39-proposals&quot;&gt;&lt;/a&gt;
  - [28.2](#tc39-proposals) Do not use [TC39 proposals](https://github.com/tc39/proposals) that have not reached stage 3.

    &gt; Why? [They are not finalized](https://tc39.github.io/process-document/), and they are subject to change or to be withdrawn entirely. We want to use JavaScript, and proposals are not JavaScript yet.

**[⬆ back to top](#table-of-contents)**

## Standard Library

  The [Standard Library](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects)
  contains utilities that are functionally broken but remain for legacy reasons.

  &lt;a name=&quot;standard-library--isnan&quot;&gt;&lt;/a&gt;
  - [29.1](#standard-library--isnan) Use `Number.isNaN` instead of global `isNaN`.
    eslint: [`no-restricted-globals`](https://eslint.org/docs/rules/no-restricted-globals)

    &gt; Why? The global `isNaN` coerces non-numbers to numbers, returning true for anything that coerces to NaN.
    &gt; If this behavior is desired, make it explicit.

    ```javascript
    // bad
    isNaN('1.2'); // false
    isNaN('1.2.3'); // true

    // good
    Number.isNaN('1.2.3'); // false
    Number.isNaN(Number('1.2.3')); // true
    ```

  &lt;a name=&quot;standard-library--isfinite&quot;&gt;&lt;/a&gt;
  - [29.2](#standard-library--isfinite) Use `Number.isFinite` instead of global `isFinite`.
    eslint: [`no-restricted-globals`](https://eslint.org/docs/rules/no-restricted-globals)

    &gt; Why? The global `isFinite` coerces non-numbers to numbers, returning true for anything that coerces to a finite number.
    &gt; If this behavior is desired, make it explicit.

    ```javascript
    // bad
    isFinite('2e3'); // true

    // good
    Number.isFinite('2e3'); // false
    Number.isFinite(parseInt('2e3', 10)); // true
    ```

**[⬆ back to top](#table-of-contents)**

## Testing

  &lt;a name=&quot;testing--yup&quot;&gt;&lt;/a&gt;&lt;a name=&quot;28.1&quot;&gt;&lt;/a&gt;
  - [30.1](#testing--yup) **Yup.**

    ```javascript
    function foo() {
      return true;
    }
    ```

  &lt;a name=&quot;testing--for-real&quot;&gt;&lt;/a&gt;&lt;a name=&quot;28.2&quot;&gt;&lt;/a&gt;
  - [30.2](#testing--for-real) **No, but seriously**:
    - Whichever testing framework you use, you should be writing tests!
    - Strive to write many small pure functions, and minimize where mutations occur.
    - Be cautious about stubs and mocks - they can make your tests more brittle.
    - We primarily use [`mocha`](https://www.npmjs.com/package/mocha) and [`jest`](https://www.npmjs.com/package/jest) at Airbnb. [`tape`](https://www.npmjs.com/package/tape) is also used occasionally for small, separate modules.
    - 100% test coverage is a good goal to strive for, even if it’s not always practical to reach it.
    - Whenever you fix a bug, *write a regression test*. A bug fixed without a regression test is almost certainly going to break again in the future.

**[⬆ back to top](#table-of-contents)**

## Performance

  - [On Layout &amp; Web Performance](https://www.kellegous.com/j/2013/01/26/layout-performance/)
  - [String vs Array Concat](https://web.archive.org/web/20200414200857/https://jsperf.com/string-vs-array-concat/2)
  - [Try/Catch Cost In a Loop](https://web.archive.org/web/20200414190827/https://jsperf.com/try-catch-in-loop-cost/12)
  - [Bang Function](https://web.archive.org/web/20200414205426/https://jsperf.com/bang-function)
  - [jQuery Find vs Context, Selector](https://web.archive.org/web/20200414200850/https://jsperf.com/jquery-find-vs-context-sel/164)
  - [innerHTML vs textContent for script text](https://web.archive.org/web/20200414205428/https://jsperf.com/innerhtml-vs-textcontent-for-script-text)
  - [Long String Concatenation](https://web.archive.org/web/20200414203914/https://jsperf.com/ya-string-concat/38)
  - [Are JavaScript functions like `map()`, `reduce()`, and `filter()` optimized for traversing arrays?](https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta)
  - Loading...

**[⬆ back to top](#table-of-contents)**

## Resources

**Learning ES6+**

  - [Latest ECMA spec](https://tc39.github.io/ecma262/)
  - [ExploringJS](https://exploringjs.com/)
  - [ES6 Compatibility Table](https://kangax.github.io/compat-table/es6/)
  - [Comprehensive Overview of ES6 Features](http://es6-features.org/)
  - [JavaScript Roadmap](https://roadmap.sh/javascript)

**Read This**

  - [Standard ECMA-262](https://www.ecma-international.org/ecma-262/6.0/index.html)

**Tools**

  - Code Style Linters
    - [ESlint](https://eslint.org/) - [Airbnb Style .eslintrc](https://github.com/airbnb/javascript/blob/master/linters/.eslintrc)
    - [JSHint](https://jshint.com/) - [Airbnb Style .jshintrc](https://github.com/airbnb/javascript/blob/master/linters/.jshintrc)
  - Neutrino Preset - [@neutrinojs/airbnb](https://neutrinojs.org/packages/airbnb/)

**Other Style Guides**

  - [Google JavaScript Style Guide](https://google.github.io/styleguide/jsguide.html)
  - [Google JavaScript Style Guide (Old)](https://google.github.io/styleguide/javascriptguide.xml)
  - [jQuery Core Style Guidelines](https://contribute.jquery.org/style-guide/js/)
  - [Principles of Writing Consistent, Idiomatic JavaScript](https://github.com/rwaldron/idiomatic.js)
  - [StandardJS](https://standardjs.com)

**Other Styles**

  - [Naming this in nested functions](https://gist.github.com/cjohansen/4135065) - Christian Johansen
  - [Conditional Callbacks](https://github.com/airbnb/javascript/issues/52) - Ross Allen
  - [Popular JavaScript Coding Conventions on GitHub](http://sideeffect.kr/popularconvention/#javascript) - JeongHoon Byun
  - [Multiple var statements in JavaScript, not superfluous](https://benalman.com/news/2012/05/multiple-var-statements-javascript/) - Ben Alman

**Further Reading**

  - [Understanding JavaScript Closures](https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/) - Angus Croll
  - [Basic JavaScript for the impatient programmer](https://www.2ality.com/2013/06/basic-javascript.html) - Dr. Axel Rauschmayer
  - [You Might Not Need jQuery](https://youmightnotneedjquery.com/) - Zack Bloom &amp; Adam Schwartz
  - [ES6 Features](https://github.com/lukehoban/es6features) - Luke Hoban
  - [Frontend Guidelines](https://github.com/bendc/frontend-guidelines) - Benjamin De Cock

**Books**

  - [JavaScript: The Good Parts](https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) - Douglas Crockford
  - [JavaScript Patterns](https://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752) - Stoyan Stefanov
  - [Pro JavaScript Design Patterns](https://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X) - Ross Harmes and Dustin Diaz
  - [High Performance Web Sites: Essential Knowledge for Front-End Engineers](https://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309) - Steve Souders
  - [Maintainable JavaScript](https://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680) - Nicholas C. Zakas
  - [JavaScript Web Applications](https://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X) - Alex MacCaw
  - [Pro JavaScript Techniques](https://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273) - John Resig
  - [Smashing Node.js: JavaScript Everywhere](https://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595) - Guillermo Rauch
  - [Secrets of the JavaScript Ninja](https://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X) - John Resig and Bear Bibeault
  - [Human JavaScript](http://humanjavascript.com/) - Henrik Joreteg
  - [Superhero.js](http://superherojs.com/) - Kim Joar Bekkelund, Mads Mobæk, &amp; Olav Bjorkoy
  - [JSBooks](https://jsbooks.revolunet.com/) - Julien Bouquillon
  - [Third Party JavaScript](https://www.manning.com/books/third-party-javascript) - Ben Vinegar and Anton Kovalyov
  - [Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript](https://amzn.com/dp/0321812182) - David Herman
  - [Eloquent JavaScript](https://eloquentjavascript.net/) - Marijn Haverbeke
  - [You Don’t Know JS: ES6 &amp; Beyond](https://shop.oreilly.com/product/0636920033769.do) - Kyle Simpson

**Blogs**

  - [JavaScript Weekly](https://javascriptweekly.com/)
  - [JavaScript, JavaScript...](https://javascriptweblog.wordpress.com/)
  - [Bocoup Weblog](https://bocoup.com/weblog)
  - [Adequately Good](https://www.adequatelygood.com/)
  - [NCZOnline](https://www.nczonline.net/)
  - [Perfection Kills](http://perfectionkills.com/)
  - [Ben Alman](https://benalman.com/)
  - [Dmitry Baranovskiy](http://dmitry.baranovskiy.com/)
  - [nettuts](https://code.tutsplus.com/?s=javascript)

**Podcasts**

  - [JavaScript Air](https://javascriptair.com/)
  - [JavaScript Jabber](https://devchat.tv/js-jabber/)

**[⬆ back to top](#table-of-contents)**

## Chat With Us About JavaScript

  - Find us on [Discord](https://discord.gg/KpGXAEnVnv).

## License

(The MIT License)

Copyright (c) 2012 Airbnb

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**[⬆ back to top](#table-of-contents)**

## Amendments

We encourage you to fork this guide and change the rules to fit your team’s style guide. Below, you may list some amendments to the style guide. This allows you to periodically update your style guide without having to deal with merge conflicts.

### JavaScript Header Template

```js
/**
 * FILENAME : filename.js
 * 
 * PURPOSE  : This is just an example of a nice detailed 
 *            header it is based on the python style guide 
 *            header template feel free to only use the 
 *            fields you want, but include this purpose and 
 *            example of how to run it.
 *            Have a nice day. 
 *            -- @hasidicdevs/web 
 * 
 * EXAMPLE  : nodemon . || node filename.js [args...]
 *
 * @__author__     = &quot;Yosi Leyid, https://github.com/yosileyid&quot;
 * @__authors__    = [&quot;@yosileyid&quot;, &quot;@hasidicdevs&quot;]
 * @__contact__    = &quot;github[at]hasidic.com&quot;
 * @__copyright__  = &quot;Copyright 2023, $HASIDIC.DEV&quot;
 * @__credits__    = [&quot;@yosileyid&quot;, &quot;@hasidicdevs&quot;]
 * @__date__       = &quot;2023/02/20&quot;
 * @__deprecated__ = False
 * @__email__      = &quot;yosi[at]hasidic.dev&quot;
 * @__license__    = &quot;MPLv2.0&quot;
 * @__maintainer__ = &quot;Yosi Leyid&quot;
 * @__status__     = &quot;Production | Development | Beta&quot;
 * @__version__    = &quot;0.0.1-alpha&quot;
 *
 */
```

# };</description>
            <link>http://localhost:4000/styleguide/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Types of Websites</title>
            <description># Types Of Websites

## Responsive Web Design

A responsive website is simply a website that will respond to changes from the user. Whether that be by `user-agent` such as mobile, desktop, or tablet or some other means we will design you a beautiful website using the most modern CSS / HTML principles and design methods to ensure it is fast and has all the information you need to be presented to users.

## Dynamic Website Design

A *dynamic web page* is a web page whose construction is controlled by an application server processing server-side scripts. This can be accomplished using multiple languages, we focus on **jQuery**, **Node.js**, and **Ruby**. In server-side scripting, parameters determine how the assembly of every new web page proceeds, and including the setting up of more client-side processing based on user interaction with the page.

## SPA - Single Page Application

An SPA (Single-page application) is a web app implementation that loads only a single web document, and then updates the body content of that single document via JavaScript APIs such as XMLHttpRequest and Fetch when different content is to be shown. This therefore allows users to use websites without loading whole new pages from the server, which can result in performance gains and a more dynamic experience, with some tradeoff disadvantages such as SEO, more effort required to maintain state, implement navigation, and do meaningful performance monitoring.</description>
            <link>http://localhost:4000/types/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.web %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/web/</link>
          </item>
        
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    

  </channel>
</rss>